
Sirius_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d8c  08007d8c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d94  08007d94  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  08007e2c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08007e2c  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001584a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003727  00000000  00000000  0003590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00039038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  0003a160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c76  00000000  00000000  0003b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172ac  00000000  00000000  00053d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e797  00000000  00000000  0006b03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f97d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  000f9824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d58 	.word	0x08007d58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08007d58 	.word	0x08007d58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc74 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f882 	bl	80005f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f962 	bl	80007b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f89e 	bl	8000630 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f4:	f000 f8ca 	bl	800068c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f8:	f000 f8f6 	bl	80006e8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f924 	bl	8000748 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000500:	f006 ffe2 	bl	80074c8 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x40>)
 800050a:	f000 ffa4 	bl	8001456 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800050e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000512:	f000 fccd 	bl	8000eb0 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000516:	f006 fffd 	bl	8007514 <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800051a:	e7f3      	b.n	8000504 <main+0x28>
 800051c:	40020c00 	.word	0x40020c00

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fb0c 	bl	8007b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SystemClock_Config+0xc8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <SystemClock_Config+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xcc>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000594:	23c0      	movs	r3, #192	; 0xc0
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000598:	2304      	movs	r3, #4
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f95f 	bl	8003868 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f9da 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2103      	movs	r1, #3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fbc1 	bl	8003d58 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005dc:	f000 f9c4 	bl	8000968 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000606:	2301      	movs	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800060a:	23c8      	movs	r3, #200	; 0xc8
 800060c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800060e:	2305      	movs	r3, #5
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fda9 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000624:	f000 f9a0 	bl	8000968 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f002 fb17 	bl	8002ca0 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f976 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000ac 	.word	0x200000ac
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2S2_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2S2_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2S2_Init+0x50>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2S2_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_I2S2_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2S2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2S2_Init+0x50>)
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <MX_I2S2_Init+0x58>)
 80006b4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2S2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2S2_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2S2_Init+0x50>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2S2_Init+0x50>)
 80006ca:	f002 fc2d 	bl	8002f28 <HAL_I2S_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f948 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000100 	.word	0x20000100
 80006e0:	40003800 	.word	0x40003800
 80006e4:	00017700 	.word	0x00017700

080006e8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_I2S3_Init+0x54>)
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <MX_I2S3_Init+0x58>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2S3_Init+0x54>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_I2S3_Init+0x54>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_I2S3_Init+0x54>)
 8000710:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <MX_I2S3_Init+0x5c>)
 8000712:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2S3_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_I2S3_Init+0x54>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_I2S3_Init+0x54>)
 8000728:	f002 fbfe 	bl	8002f28 <HAL_I2S_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000732:	f000 f919 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000148 	.word	0x20000148
 8000740:	40003c00 	.word	0x40003c00
 8000744:	00017700 	.word	0x00017700

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f003 fe39 	bl	8004410 <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f8e0 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000190 	.word	0x20000190
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4b61      	ldr	r3, [pc, #388]	; (8000954 <MX_GPIO_Init+0x1a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a60      	ldr	r2, [pc, #384]	; (8000954 <MX_GPIO_Init+0x1a0>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b5e      	ldr	r3, [pc, #376]	; (8000954 <MX_GPIO_Init+0x1a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b5a      	ldr	r3, [pc, #360]	; (8000954 <MX_GPIO_Init+0x1a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a59      	ldr	r2, [pc, #356]	; (8000954 <MX_GPIO_Init+0x1a0>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b57      	ldr	r3, [pc, #348]	; (8000954 <MX_GPIO_Init+0x1a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b53      	ldr	r3, [pc, #332]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a52      	ldr	r2, [pc, #328]	; (8000954 <MX_GPIO_Init+0x1a0>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b50      	ldr	r3, [pc, #320]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b4c      	ldr	r3, [pc, #304]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a4b      	ldr	r2, [pc, #300]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b49      	ldr	r3, [pc, #292]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b45      	ldr	r3, [pc, #276]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a44      	ldr	r2, [pc, #272]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <MX_GPIO_Init+0x1a0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <MX_GPIO_Init+0x1a0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a3d      	ldr	r2, [pc, #244]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <MX_GPIO_Init+0x1a0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	4838      	ldr	r0, [pc, #224]	; (8000958 <MX_GPIO_Init+0x1a4>)
 8000878:	f000 fdd4 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4836      	ldr	r0, [pc, #216]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000882:	f000 fdcf 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000886:	2200      	movs	r2, #0
 8000888:	f24f 0110 	movw	r1, #61456	; 0xf010
 800088c:	4834      	ldr	r0, [pc, #208]	; (8000960 <MX_GPIO_Init+0x1ac>)
 800088e:	f000 fdc9 	bl	8001424 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000892:	2304      	movs	r3, #4
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <MX_GPIO_Init+0x1a4>)
 80008a6:	f000 fc39 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4825      	ldr	r0, [pc, #148]	; (8000958 <MX_GPIO_Init+0x1a4>)
 80008c2:	f000 fc2b 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008c6:	2332      	movs	r3, #50	; 0x32
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <MX_GPIO_Init+0x1a4>)
 80008dc:	f000 fc1e 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4819      	ldr	r0, [pc, #100]	; (800095c <MX_GPIO_Init+0x1a8>)
 80008f8:	f000 fc10 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000900:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_GPIO_Init+0x1b0>)
 8000912:	f000 fc03 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000916:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0x1ac>)
 8000930:	f000 fbf4 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000934:	2320      	movs	r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_GPIO_Init+0x1ac>)
 8000948:	f000 fbe8 	bl	800111c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	; 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020800 	.word	0x40020800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40020000 	.word	0x40020000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fb70 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12c      	bne.n	8000a40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	2312      	movs	r3, #18
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <HAL_I2C_MspInit+0x8c>)
 8000a20:	f000 fb7c 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a59      	ldr	r2, [pc, #356]	; (8000bd8 <HAL_I2S_MspInit+0x184>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d15b      	bne.n	8000b2e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
 8000a7a:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a57      	ldr	r2, [pc, #348]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b55      	ldr	r3, [pc, #340]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	623b      	str	r3, [r7, #32]
 8000a90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	4b51      	ldr	r3, [pc, #324]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a49      	ldr	r2, [pc, #292]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aca:	2304      	movs	r3, #4
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ada:	2306      	movs	r3, #6
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483e      	ldr	r0, [pc, #248]	; (8000be0 <HAL_I2S_MspInit+0x18c>)
 8000ae6:	f000 fb19 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aea:	2308      	movs	r3, #8
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afa:	2305      	movs	r3, #5
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4836      	ldr	r0, [pc, #216]	; (8000be0 <HAL_I2S_MspInit+0x18c>)
 8000b06:	f000 fb09 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	482f      	ldr	r0, [pc, #188]	; (8000be4 <HAL_I2S_MspInit+0x190>)
 8000b28:	f000 faf8 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b2c:	e04f      	b.n	8000bce <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <HAL_I2S_MspInit+0x194>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d14a      	bne.n	8000bce <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_I2S_MspInit+0x188>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <HAL_I2S_MspInit+0x198>)
 8000ba8:	f000 fab8 	bl	800111c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_I2S_MspInit+0x18c>)
 8000bca:	f000 faa7 	bl	800111c <HAL_GPIO_Init>
}
 8000bce:	bf00      	nop
 8000bd0:	3738      	adds	r7, #56	; 0x38
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40003800 	.word	0x40003800
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40003c00 	.word	0x40003c00
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fa59 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8d0 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <OTG_FS_IRQHandler+0x10>)
 8000cda:	f000 fe41 	bl	8001960 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200005cc 	.word	0x200005cc

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f006 fede 	bl	8007ad8 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20020000 	.word	0x20020000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	200001e8 	.word	0x200001e8
 8000d50:	200008e0 	.word	0x200008e0

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d94:	4c0b      	ldr	r4, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd7 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f006 fe9d 	bl	8007ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fb97 	bl	80004dc <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000dbc:	08007d9c 	.word	0x08007d9c
  ldr r2, =_sbss
 8000dc0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dc4:	200008e0 	.word	0x200008e0

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f94f 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fdb8 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f967 	bl	8001102 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f92f 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200001ec 	.word	0x200001ec

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001ec 	.word	0x200001ec

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e159      	b.n	80013ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8148 	bne.w	80013e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a2 	beq.w	80013e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012be:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a49      	ldr	r2, [pc, #292]	; (800140c <HAL_GPIO_Init+0x2f0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x202>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_GPIO_Init+0x2f4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x1fe>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a47      	ldr	r2, [pc, #284]	; (8001414 <HAL_GPIO_Init+0x2f8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x1fa>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x2fc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x1f6>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x300>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x1f2>
 800130a:	2304      	movs	r3, #4
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800130e:	2307      	movs	r3, #7
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x204>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x204>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800131e:	2300      	movs	r3, #0
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x304>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_GPIO_Init+0x304>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	f67f aea2 	bls.w	8001138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001440:	e003      	b.n	800144a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	041a      	lsls	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001468:	887a      	ldrh	r2, [r7, #2]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43d9      	mvns	r1, r3
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	400b      	ands	r3, r1
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800148a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148c:	b08f      	sub	sp, #60	; 0x3c
 800148e:	af0a      	add	r7, sp, #40	; 0x28
 8001490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e054      	b.n	8001546 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f006 f864 	bl	8007584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 f893 	bl	8004606 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	687e      	ldr	r6, [r7, #4]
 80014e8:	466d      	mov	r5, sp
 80014ea:	f106 0410 	add.w	r4, r6, #16
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014fe:	1d33      	adds	r3, r6, #4
 8001500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001502:	6838      	ldr	r0, [r7, #0]
 8001504:	f003 f80d 	bl	8004522 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f003 f88a 	bl	8004628 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	687e      	ldr	r6, [r7, #4]
 800151c:	466d      	mov	r5, sp
 800151e:	f106 0410 	add.w	r4, r6, #16
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001532:	1d33      	adds	r3, r6, #4
 8001534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f003 fa12 	bl	8004960 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800154e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b089      	sub	sp, #36	; 0x24
 8001552:	af04      	add	r7, sp, #16
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	4608      	mov	r0, r1
 8001558:	4611      	mov	r1, r2
 800155a:	461a      	mov	r2, r3
 800155c:	4603      	mov	r3, r0
 800155e:	70fb      	strb	r3, [r7, #3]
 8001560:	460b      	mov	r3, r1
 8001562:	70bb      	strb	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_HCD_HC_Init+0x28>
 8001572:	2302      	movs	r3, #2
 8001574:	e076      	b.n	8001664 <HAL_HCD_HC_Init+0x116>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	212c      	movs	r1, #44	; 0x2c
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	4413      	add	r3, r2
 800158a:	333d      	adds	r3, #61	; 0x3d
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	212c      	movs	r1, #44	; 0x2c
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4413      	add	r3, r2
 800159c:	3338      	adds	r3, #56	; 0x38
 800159e:	787a      	ldrb	r2, [r7, #1]
 80015a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	3340      	adds	r3, #64	; 0x40
 80015b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	3339      	adds	r3, #57	; 0x39
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	212c      	movs	r1, #44	; 0x2c
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	333f      	adds	r3, #63	; 0x3f
 80015d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	78ba      	ldrb	r2, [r7, #2]
 80015de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015e2:	b2d0      	uxtb	r0, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	333a      	adds	r3, #58	; 0x3a
 80015f0:	4602      	mov	r2, r0
 80015f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da09      	bge.n	8001610 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	212c      	movs	r1, #44	; 0x2c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	333b      	adds	r3, #59	; 0x3b
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e008      	b.n	8001622 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	333b      	adds	r3, #59	; 0x3b
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	212c      	movs	r1, #44	; 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	333c      	adds	r3, #60	; 0x3c
 8001630:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001634:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	787c      	ldrb	r4, [r7, #1]
 800163c:	78ba      	ldrb	r2, [r7, #2]
 800163e:	78f9      	ldrb	r1, [r7, #3]
 8001640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4623      	mov	r3, r4
 8001652:	f003 fb0b 	bl	8004c6c <USB_HC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_HCD_HC_Halt+0x1e>
 8001686:	2302      	movs	r3, #2
 8001688:	e00f      	b.n	80016aa <HAL_HCD_HC_Halt+0x3e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fd5b 	bl	8005156 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70bb      	strb	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	333b      	adds	r3, #59	; 0x3b
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	333f      	adds	r3, #63	; 0x3f
 80016ee:	787a      	ldrb	r2, [r7, #1]
 80016f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016f2:	7c3b      	ldrb	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d112      	bne.n	800171e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2203      	movs	r2, #3
 8001708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	333d      	adds	r3, #61	; 0x3d
 8001718:	7f3a      	ldrb	r2, [r7, #28]
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e008      	b.n	8001730 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	3342      	adds	r3, #66	; 0x42
 800172c:	2202      	movs	r2, #2
 800172e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b03      	cmp	r3, #3
 8001734:	f200 80c6 	bhi.w	80018c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	080018b1 	.word	0x080018b1
 8001748:	080017b5 	.word	0x080017b5
 800174c:	08001833 	.word	0x08001833
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001750:	7c3b      	ldrb	r3, [r7, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	f040 80b8 	bne.w	80018c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80b4 	bne.w	80018c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001760:	8b3b      	ldrh	r3, [r7, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	212c      	movs	r1, #44	; 0x2c
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	3355      	adds	r3, #85	; 0x55
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3355      	adds	r3, #85	; 0x55
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3342      	adds	r3, #66	; 0x42
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800179e:	e093      	b.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2202      	movs	r2, #2
 80017b0:	701a      	strb	r2, [r3, #0]
      break;
 80017b2:	e089      	b.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017b4:	78bb      	ldrb	r3, [r7, #2]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d11d      	bne.n	80017f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3355      	adds	r3, #85	; 0x55
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	212c      	movs	r1, #44	; 0x2c
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	3342      	adds	r3, #66	; 0x42
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017e0:	e073      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3342      	adds	r3, #66	; 0x42
 80017f0:	2202      	movs	r2, #2
 80017f2:	701a      	strb	r2, [r3, #0]
      break;
 80017f4:	e069      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	3354      	adds	r3, #84	; 0x54
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3342      	adds	r3, #66	; 0x42
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
      break;
 800181c:	e055      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3342      	adds	r3, #66	; 0x42
 800182c:	2202      	movs	r2, #2
 800182e:	701a      	strb	r2, [r3, #0]
      break;
 8001830:	e04b      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001832:	78bb      	ldrb	r3, [r7, #2]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11d      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3355      	adds	r3, #85	; 0x55
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3342      	adds	r3, #66	; 0x42
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800185e:	e034      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
      break;
 8001872:	e02a      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3354      	adds	r3, #84	; 0x54
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3342      	adds	r3, #66	; 0x42
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
      break;
 800189a:	e016      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3342      	adds	r3, #66	; 0x42
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e00c      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3342      	adds	r3, #66	; 0x42
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e002      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3344      	adds	r3, #68	; 0x44
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	8b3a      	ldrh	r2, [r7, #24]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	202c      	movs	r0, #44	; 0x2c
 80018e4:	fb00 f303 	mul.w	r3, r0, r3
 80018e8:	440b      	add	r3, r1
 80018ea:	334c      	adds	r3, #76	; 0x4c
 80018ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3360      	adds	r3, #96	; 0x60
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3350      	adds	r3, #80	; 0x50
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	3339      	adds	r3, #57	; 0x39
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3361      	adds	r3, #97	; 0x61
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	222c      	movs	r2, #44	; 0x2c
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	3338      	adds	r3, #56	; 0x38
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	18d1      	adds	r1, r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	f003 faae 	bl	8004eb0 <USB_HC_StartXfer>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop

08001960 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f002 ffaf 	bl	80048da <USB_GetMode>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	f040 80f6 	bne.w	8001b70 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 ff93 	bl	80048b4 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80ec 	beq.w	8001b6e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 ff8a 	bl	80048b4 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019aa:	d104      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 ff7a 	bl	80048b4 <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ca:	d104      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 ff6a 	bl	80048b4 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ea:	d104      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 ff5a 	bl	80048b4 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 ff4c 	bl	80048b4 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a26:	d11c      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10f      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a42:	2110      	movs	r1, #16
 8001a44:	6938      	ldr	r0, [r7, #16]
 8001a46:	f002 fe3b 	bl	80046c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a4a:	6938      	ldr	r0, [r7, #16]
 8001a4c:	f002 fe6c 	bl	8004728 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 f842 	bl	8004ae0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f005 fe0f 	bl	8007680 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 ff24 	bl	80048b4 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a76:	d102      	bne.n	8001a7e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f001 f89e 	bl	8002bba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 ff16 	bl	80048b4 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d106      	bne.n	8001aa0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f005 fdd8 	bl	8007648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 ff05 	bl	80048b4 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	d101      	bne.n	8001ab8 <HAL_HCD_IRQHandler+0x158>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_HCD_IRQHandler+0x15a>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d012      	beq.n	8001ae4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0210 	bic.w	r2, r2, #16
 8001acc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 ffa1 	bl	8002a16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0210 	orr.w	r2, r2, #16
 8001ae2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fee3 	bl	80048b4 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001af8:	d13a      	bne.n	8001b70 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fb18 	bl	8005134 <USB_HC_ReadInterrupt>
 8001b04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e025      	b.n	8001b58 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d018      	beq.n	8001b52 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b36:	d106      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8ab 	bl	8001c9a <HCD_HC_IN_IRQHandler>
 8001b44:	e005      	b.n	8001b52 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fbf9 	bl	8002344 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3d4      	bcc.n	8001b0c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	e000      	b.n	8001b70 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b6e:	bf00      	nop
    }
  }
}
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_HCD_Start+0x16>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e013      	b.n	8001bb4 <HAL_HCD_Start+0x3e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f804 	bl	8004ba8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fd1d 	bl	80045e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_HCD_Stop+0x16>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e00d      	b.n	8001bee <HAL_HCD_Stop+0x32>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fbf2 	bl	80053c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 ffa6 	bl	8004b54 <USB_ResetPort>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3360      	adds	r3, #96	; 0x60
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3350      	adds	r3, #80	; 0x50
 8001c54:	681b      	ldr	r3, [r3, #0]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 ffea 	bl	8004c48 <USB_GetCurrentFrame>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 ffc5 	bl	8004c1a <USB_GetHostSpeed>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d11a      	bne.n	8001d00 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2304      	movs	r3, #4
 8001cda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3361      	adds	r3, #97	; 0x61
 8001cea:	2206      	movs	r2, #6
 8001cec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fa2c 	bl	8005156 <USB_HC_Halt>
 8001cfe:	e0af      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d16:	d11b      	bne.n	8001d50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	461a      	mov	r2, r3
 8001d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3361      	adds	r3, #97	; 0x61
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fa04 	bl	8005156 <USB_HC_Halt>
 8001d4e:	e087      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d109      	bne.n	8001d7a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	461a      	mov	r2, r3
 8001d74:	2320      	movs	r3, #32
 8001d76:	6093      	str	r3, [r2, #8]
 8001d78:	e072      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d11a      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2308      	movs	r3, #8
 8001da0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3361      	adds	r3, #97	; 0x61
 8001db0:	2205      	movs	r2, #5
 8001db2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f9c9 	bl	8005156 <USB_HC_Halt>
 8001dc4:	e04c      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ddc:	d11b      	bne.n	8001e16 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dea:	461a      	mov	r2, r3
 8001dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3361      	adds	r3, #97	; 0x61
 8001e00:	2208      	movs	r2, #8
 8001e02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 f9a1 	bl	8005156 <USB_HC_Halt>
 8001e14:	e024      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d119      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3361      	adds	r3, #97	; 0x61
 8001e4c:	2206      	movs	r2, #6
 8001e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f97b 	bl	8005156 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e76:	d112      	bne.n	8001e9e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f967 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e9c:	e24e      	b.n	800233c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f040 80df 	bne.w	8002074 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0159      	lsls	r1, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ee0:	1ad2      	subs	r2, r2, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	202c      	movs	r0, #44	; 0x2c
 8001ee8:	fb00 f303 	mul.w	r3, r0, r3
 8001eec:	440b      	add	r3, r1
 8001eee:	3350      	adds	r3, #80	; 0x50
 8001ef0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3361      	adds	r3, #97	; 0x61
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	335c      	adds	r3, #92	; 0x5c
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	461a      	mov	r2, r3
 8001f24:	2301      	movs	r3, #1
 8001f26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	333f      	adds	r3, #63	; 0x3f
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	333f      	adds	r3, #63	; 0x3f
 8001f4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d111      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f8fb 	bl	8005156 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2310      	movs	r3, #16
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	e03a      	b.n	8001fea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	333f      	adds	r3, #63	; 0x3f
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d009      	beq.n	8001f9c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	333f      	adds	r3, #63	; 0x3f
 8001f96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d126      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	0151      	lsls	r1, r2, #5
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3360      	adds	r3, #96	; 0x60
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	b2d9      	uxtb	r1, r3
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	202c      	movs	r0, #44	; 0x2c
 8001fd8:	fb00 f303 	mul.w	r3, r0, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3360      	adds	r3, #96	; 0x60
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f005 fb59 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12b      	bne.n	800204a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3348      	adds	r3, #72	; 0x48
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	202c      	movs	r0, #44	; 0x2c
 8002008:	fb00 f202 	mul.w	r2, r0, r2
 800200c:	440a      	add	r2, r1
 800200e:	3240      	adds	r2, #64	; 0x40
 8002010:	8812      	ldrh	r2, [r2, #0]
 8002012:	fbb3 f3f2 	udiv	r3, r3, r2
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 818e 	beq.w	800233c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3354      	adds	r3, #84	; 0x54
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	f083 0301 	eor.w	r3, r3, #1
 8002034:	b2d8      	uxtb	r0, r3
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	212c      	movs	r1, #44	; 0x2c
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	3354      	adds	r3, #84	; 0x54
 8002044:	4602      	mov	r2, r0
 8002046:	701a      	strb	r2, [r3, #0]
}
 8002048:	e178      	b.n	800233c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3354      	adds	r3, #84	; 0x54
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	b2d8      	uxtb	r0, r3
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3354      	adds	r3, #84	; 0x54
 800206e:	4602      	mov	r2, r0
 8002070:	701a      	strb	r2, [r3, #0]
}
 8002072:	e163      	b.n	800233c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	f040 80f6 	bne.w	8002278 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3361      	adds	r3, #97	; 0x61
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d109      	bne.n	80020b4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e0c9      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3361      	adds	r3, #97	; 0x61
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d109      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3360      	adds	r3, #96	; 0x60
 80020d6:	2205      	movs	r2, #5
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e0b5      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3361      	adds	r3, #97	; 0x61
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d009      	beq.n	8002104 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002100:	2b08      	cmp	r3, #8
 8002102:	d150      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	335c      	adds	r3, #92	; 0x5c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	440b      	add	r3, r1
 8002122:	335c      	adds	r3, #92	; 0x5c
 8002124:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	335c      	adds	r3, #92	; 0x5c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d912      	bls.n	8002160 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	2204      	movs	r2, #4
 800215c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800215e:	e073      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3360      	adds	r3, #96	; 0x60
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002188:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002190:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021a4:	e050      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3361      	adds	r3, #97	; 0x61
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d122      	bne.n	8002200 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3360      	adds	r3, #96	; 0x60
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e023      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3361      	adds	r3, #97	; 0x61
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b07      	cmp	r3, #7
 8002212:	d119      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	335c      	adds	r3, #92	; 0x5c
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	202c      	movs	r0, #44	; 0x2c
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	440b      	add	r3, r1
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	2204      	movs	r2, #4
 8002246:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2302      	movs	r3, #2
 8002258:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	b2d9      	uxtb	r1, r3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	4413      	add	r3, r2
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f005 fa13 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002276:	e061      	b.n	800233c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b10      	cmp	r3, #16
 800228c:	d156      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	333f      	adds	r3, #63	; 0x3f
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d111      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	335c      	adds	r3, #92	; 0x5c
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 ff49 	bl	8005156 <USB_HC_Halt>
 80022c4:	e031      	b.n	800232a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	333f      	adds	r3, #63	; 0x3f
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333f      	adds	r3, #63	; 0x3f
 80022e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d11d      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	335c      	adds	r3, #92	; 0x5c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d110      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3361      	adds	r3, #97	; 0x61
 8002316:	2203      	movs	r2, #3
 8002318:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f002 ff16 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2310      	movs	r3, #16
 800233a:	6093      	str	r3, [r2, #8]
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d11a      	bne.n	80023aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2304      	movs	r3, #4
 8002384:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3361      	adds	r3, #97	; 0x61
 8002394:	2206      	movs	r2, #6
 8002396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fed7 	bl	8005156 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023a8:	e331      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d12e      	bne.n	800241e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	2320      	movs	r3, #32
 80023d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	333d      	adds	r3, #61	; 0x3d
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 8313 	bne.w	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	333d      	adds	r3, #61	; 0x3d
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3360      	adds	r3, #96	; 0x60
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fe9d 	bl	8005156 <USB_HC_Halt>
}
 800241c:	e2f7      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d112      	bne.n	800245c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002448:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f002 fe7e 	bl	8005156 <USB_HC_Halt>
}
 800245a:	e2d8      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d140      	bne.n	80024f4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	335c      	adds	r3, #92	; 0x5c
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d111      	bne.n	80024be <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	333d      	adds	r3, #61	; 0x3d
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2340      	movs	r3, #64	; 0x40
 80024bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2301      	movs	r3, #1
 80024ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fe32 	bl	8005156 <USB_HC_Halt>
}
 80024f2:	e28c      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d12c      	bne.n	8002564 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3361      	adds	r3, #97	; 0x61
 8002518:	2204      	movs	r2, #4
 800251a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	333d      	adds	r3, #61	; 0x3d
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	335c      	adds	r3, #92	; 0x5c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fe03 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	461a      	mov	r2, r3
 800255e:	2340      	movs	r3, #64	; 0x40
 8002560:	6093      	str	r3, [r2, #8]
}
 8002562:	e254      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d11a      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	2308      	movs	r3, #8
 800258a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	2205      	movs	r2, #5
 800259c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fdd4 	bl	8005156 <USB_HC_Halt>
}
 80025ae:	e22e      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d140      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3361      	adds	r3, #97	; 0x61
 80025e6:	2203      	movs	r2, #3
 80025e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	333d      	adds	r3, #61	; 0x3d
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d112      	bne.n	8002624 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333c      	adds	r3, #60	; 0x3c
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	333d      	adds	r3, #61	; 0x3d
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fd91 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2310      	movs	r3, #16
 8002644:	6093      	str	r3, [r2, #8]
}
 8002646:	e1e2      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d164      	bne.n	8002728 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d111      	bne.n	800268a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3361      	adds	r3, #97	; 0x61
 8002674:	2206      	movs	r2, #6
 8002676:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fd67 	bl	8005156 <USB_HC_Halt>
 8002688:	e044      	b.n	8002714 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	202c      	movs	r0, #44	; 0x2c
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	440b      	add	r3, r1
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d920      	bls.n	8002702 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	335c      	adds	r3, #92	; 0x5c
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	b2d9      	uxtb	r1, r3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	202c      	movs	r0, #44	; 0x2c
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3360      	adds	r3, #96	; 0x60
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f004 ffce 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002700:	e008      	b.n	8002714 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3360      	adds	r3, #96	; 0x60
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	6093      	str	r3, [r2, #8]
}
 8002726:	e172      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d11b      	bne.n	8002778 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3361      	adds	r3, #97	; 0x61
 800274e:	2208      	movs	r2, #8
 8002750:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f002 fcfa 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	6093      	str	r3, [r2, #8]
}
 8002776:	e14a      	b.n	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	f040 813f 	bne.w	8002a0e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d17d      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3360      	adds	r3, #96	; 0x60
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	333f      	adds	r3, #63	; 0x3f
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d00a      	beq.n	80027e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333f      	adds	r3, #63	; 0x3f
 80027d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027da:	2b03      	cmp	r3, #3
 80027dc:	f040 8100 	bne.w	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d113      	bne.n	8002810 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3355      	adds	r3, #85	; 0x55
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f083 0301 	eor.w	r3, r3, #1
 80027fc:	b2d8      	uxtb	r0, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3355      	adds	r3, #85	; 0x55
 800280c:	4602      	mov	r2, r0
 800280e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 80e3 	bne.w	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	334c      	adds	r3, #76	; 0x4c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80d8 	beq.w	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	334c      	adds	r3, #76	; 0x4c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	202c      	movs	r0, #44	; 0x2c
 8002846:	fb00 f202 	mul.w	r2, r0, r2
 800284a:	440a      	add	r2, r1
 800284c:	3240      	adds	r2, #64	; 0x40
 800284e:	8812      	ldrh	r2, [r2, #0]
 8002850:	4413      	add	r3, r2
 8002852:	3b01      	subs	r3, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	202c      	movs	r0, #44	; 0x2c
 800285a:	fb00 f202 	mul.w	r2, r0, r2
 800285e:	440a      	add	r2, r1
 8002860:	3240      	adds	r2, #64	; 0x40
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	fbb3 f3f2 	udiv	r3, r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80b5 	beq.w	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3355      	adds	r3, #85	; 0x55
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	f083 0301 	eor.w	r3, r3, #1
 800288a:	b2d8      	uxtb	r0, r3
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3355      	adds	r3, #85	; 0x55
 800289a:	4602      	mov	r2, r0
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e09f      	b.n	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d109      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3360      	adds	r3, #96	; 0x60
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e08b      	b.n	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d109      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e077      	b.n	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3361      	adds	r3, #97	; 0x61
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d109      	bne.n	8002918 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3360      	adds	r3, #96	; 0x60
 8002912:	2205      	movs	r2, #5
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e063      	b.n	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3361      	adds	r3, #97	; 0x61
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d009      	beq.n	8002940 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3361      	adds	r3, #97	; 0x61
 800293a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800293c:	2b08      	cmp	r3, #8
 800293e:	d14f      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	335c      	adds	r3, #92	; 0x5c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	202c      	movs	r0, #44	; 0x2c
 8002958:	fb00 f303 	mul.w	r3, r0, r3
 800295c:	440b      	add	r3, r1
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	335c      	adds	r3, #92	; 0x5c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d912      	bls.n	800299c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2204      	movs	r2, #4
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e021      	b.n	80029e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3360      	adds	r3, #96	; 0x60
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	461a      	mov	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	2302      	movs	r3, #2
 80029f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	b2d9      	uxtb	r1, r3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	202c      	movs	r0, #44	; 0x2c
 80029fc:	fb00 f303 	mul.w	r3, r0, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3360      	adds	r3, #96	; 0x60
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f004 fe47 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a0e:	bf00      	nop
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08a      	sub	sp, #40	; 0x28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	0c5b      	lsrs	r3, r3, #17
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d004      	beq.n	8002a5c <HCD_RXQLVL_IRQHandler+0x46>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	f000 80a9 	beq.w	8002bac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a5a:	e0aa      	b.n	8002bb2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80a6 	beq.w	8002bb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3344      	adds	r3, #68	; 0x44
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 809b 	beq.w	8002bb0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3350      	adds	r3, #80	; 0x50
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	441a      	add	r2, r3
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	202c      	movs	r0, #44	; 0x2c
 8002a94:	fb00 f303 	mul.w	r3, r0, r3
 8002a98:	440b      	add	r3, r1
 8002a9a:	334c      	adds	r3, #76	; 0x4c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d87a      	bhi.n	8002b98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3344      	adds	r3, #68	; 0x44
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f001 fea2 	bl	8004804 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3344      	adds	r3, #68	; 0x44
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	441a      	add	r2, r3
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3344      	adds	r3, #68	; 0x44
 8002ae2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3350      	adds	r3, #80	; 0x50
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	441a      	add	r2, r3
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	202c      	movs	r0, #44	; 0x2c
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	440b      	add	r3, r1
 8002b04:	3350      	adds	r3, #80	; 0x50
 8002b06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	0cdb      	lsrs	r3, r3, #19
 8002b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3340      	adds	r3, #64	; 0x40
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d13c      	bne.n	8002bb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d039      	beq.n	8002bb0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3354      	adds	r3, #84	; 0x54
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f083 0301 	eor.w	r3, r3, #1
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3354      	adds	r3, #84	; 0x54
 8002b92:	4602      	mov	r2, r0
 8002b94:	701a      	strb	r2, [r3, #0]
      break;
 8002b96:	e00b      	b.n	8002bb0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3360      	adds	r3, #96	; 0x60
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	701a      	strb	r2, [r3, #0]
      break;
 8002baa:	e001      	b.n	8002bb0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bac:	bf00      	nop
 8002bae:	e000      	b.n	8002bb2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bb0:	bf00      	nop
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	; 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002be6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d10b      	bne.n	8002c0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fd31 	bl	8007664 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d132      	bne.n	8002c7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f043 0308 	orr.w	r3, r3, #8
 8002c1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d126      	bne.n	8002c74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d113      	bne.n	8002c56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c38:	d106      	bne.n	8002c48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 ff4d 	bl	8004ae0 <USB_InitFSLSPClkSel>
 8002c46:	e011      	b.n	8002c6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 ff46 	bl	8004ae0 <USB_InitFSLSPClkSel>
 8002c54:	e00a      	b.n	8002c6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c64:	461a      	mov	r2, r3
 8002c66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f004 fd23 	bl	80076b8 <HAL_HCD_PortEnabled_Callback>
 8002c72:	e002      	b.n	8002c7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f004 fd2d 	bl	80076d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d103      	bne.n	8002c8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f043 0320 	orr.w	r3, r3, #32
 8002c8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e12b      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fe7c 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d04:	f001 fa20 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8002d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a81      	ldr	r2, [pc, #516]	; (8002f14 <HAL_I2C_Init+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d807      	bhi.n	8002d24 <HAL_I2C_Init+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a80      	ldr	r2, [pc, #512]	; (8002f18 <HAL_I2C_Init+0x278>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e006      	b.n	8002d32 <HAL_I2C_Init+0x92>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a7d      	ldr	r2, [pc, #500]	; (8002f1c <HAL_I2C_Init+0x27c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0e7      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a78      	ldr	r2, [pc, #480]	; (8002f20 <HAL_I2C_Init+0x280>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a6a      	ldr	r2, [pc, #424]	; (8002f14 <HAL_I2C_Init+0x274>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <HAL_I2C_Init+0xd4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e009      	b.n	8002d88 <HAL_I2C_Init+0xe8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_I2C_Init+0x284>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	495c      	ldr	r1, [pc, #368]	; (8002f14 <HAL_I2C_Init+0x274>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d819      	bhi.n	8002ddc <HAL_I2C_Init+0x13c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_I2C_Init+0x138>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e59      	subs	r1, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	e051      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e04f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <HAL_I2C_Init+0x168>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e012      	b.n	8002e2e <HAL_I2C_Init+0x18e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x196>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <HAL_I2C_Init+0x1bc>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e58      	subs	r0, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6809      	ldr	r1, [r1, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6911      	ldr	r1, [r2, #16]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	000186a0 	.word	0x000186a0
 8002f18:	001e847f 	.word	0x001e847f
 8002f1c:	003d08ff 	.word	0x003d08ff
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e128      	b.n	800318c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a90      	ldr	r2, [pc, #576]	; (8003194 <HAL_I2S_Init+0x26c>)
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fd fd7d 	bl	8000a54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f70:	f023 030f 	bic.w	r3, r3, #15
 8002f74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d060      	beq.n	8003048 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e001      	b.n	8002f98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d802      	bhi.n	8002fa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f001 f9d2 	bl	8004350 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d125      	bne.n	8003004 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	3305      	adds	r3, #5
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e01f      	b.n	8003022 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	3305      	adds	r3, #5
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e00e      	b.n	8003022 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	461a      	mov	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	3305      	adds	r3, #5
 8003020:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_I2S_Init+0x270>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003048:	2302      	movs	r3, #2
 800304a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d902      	bls.n	800305c <HAL_I2S_Init+0x134>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2bff      	cmp	r3, #255	; 0xff
 800305a:	d907      	bls.n	800306c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e08f      	b.n	800318c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	ea42 0103 	orr.w	r1, r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	430a      	orrs	r2, r1
 800307e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68d2      	ldr	r2, [r2, #12]
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6992      	ldr	r2, [r2, #24]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d161      	bne.n	800317c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a38      	ldr	r2, [pc, #224]	; (800319c <HAL_I2S_Init+0x274>)
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <HAL_I2S_Init+0x278>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_I2S_Init+0x1a4>
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_I2S_Init+0x27c>)
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x1a8>
 80030cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	4932      	ldr	r1, [pc, #200]	; (80031a0 <HAL_I2S_Init+0x278>)
 80030d8:	428a      	cmp	r2, r1
 80030da:	d101      	bne.n	80030e0 <HAL_I2S_Init+0x1b8>
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_I2S_Init+0x27c>)
 80030de:	e001      	b.n	80030e4 <HAL_I2S_Init+0x1bc>
 80030e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_I2S_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_I2S_Init+0x1d4>
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_I2S_Init+0x27c>)
 80030fa:	e001      	b.n	8003100 <HAL_I2S_Init+0x1d8>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003100:	2202      	movs	r2, #2
 8003102:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_I2S_Init+0x278>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_I2S_Init+0x1ea>
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_I2S_Init+0x27c>)
 8003110:	e001      	b.n	8003116 <HAL_I2S_Init+0x1ee>
 8003112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003122:	d003      	beq.n	800312c <HAL_I2S_Init+0x204>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800312c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003142:	4313      	orrs	r3, r2
 8003144:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800314c:	4313      	orrs	r3, r2
 800314e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003156:	4313      	orrs	r3, r2
 8003158:	b29a      	uxth	r2, r3
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	4313      	orrs	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003164:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_I2S_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_I2S_Init+0x24c>
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_I2S_Init+0x27c>)
 8003172:	e001      	b.n	8003178 <HAL_I2S_Init+0x250>
 8003174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003178:	897a      	ldrh	r2, [r7, #10]
 800317a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	0800329f 	.word	0x0800329f
 8003198:	cccccccd 	.word	0xcccccccd
 800319c:	080033b5 	.word	0x080033b5
 80031a0:	40003800 	.word	0x40003800
 80031a4:	40003400 	.word	0x40003400

080031a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10e      	bne.n	8003238 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003228:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffb8 	bl	80031a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	b292      	uxth	r2, r2
 8003254:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	1c9a      	adds	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10e      	bne.n	8003296 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003286:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff93 	bl	80031bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d13a      	bne.n	8003330 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d109      	bne.n	80032d8 <I2S_IRQHandler+0x3a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d102      	bne.n	80032d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffb4 	bl	8003240 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d126      	bne.n	8003330 <I2S_IRQHandler+0x92>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d11f      	bne.n	8003330 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff50 	bl	80031d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d136      	bne.n	80033aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d109      	bne.n	800335a <I2S_IRQHandler+0xbc>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d102      	bne.n	800335a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff45 	bl	80031e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d122      	bne.n	80033aa <I2S_IRQHandler+0x10c>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b20      	cmp	r3, #32
 8003370:	d11b      	bne.n	80033aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003380:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff13 	bl	80031d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a92      	ldr	r2, [pc, #584]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033d0:	e001      	b.n	80033d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a8b      	ldr	r2, [pc, #556]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033ec:	4b8a      	ldr	r3, [pc, #552]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033ee:	e001      	b.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d004      	beq.n	800340c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 8099 	bne.w	800353e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f925 	bl	8003670 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9c8 	bl	80037d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d13a      	bne.n	80034c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d035      	beq.n	80034c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6e      	ldr	r2, [pc, #440]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003460:	e001      	b.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4969      	ldr	r1, [pc, #420]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800346e:	428b      	cmp	r3, r1
 8003470:	d101      	bne.n	8003476 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003472:	4b69      	ldr	r3, [pc, #420]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003474:	e001      	b.n	800347a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800347a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800347e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800348e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fe88 	bl	80031d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	f040 80c3 	bne.w	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80bd 	beq.w	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034f4:	e001      	b.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4944      	ldr	r1, [pc, #272]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003502:	428b      	cmp	r3, r1
 8003504:	d101      	bne.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003508:	e001      	b.n	800350e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800350a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003512:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fe4a 	bl	80031d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800353c:	e089      	b.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d107      	bne.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8be 	bl	80036d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8fd 	bl	800376c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d12f      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d02a      	beq.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003594:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a2:	e001      	b.n	80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4919      	ldr	r1, [pc, #100]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d101      	bne.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035b4:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b6:	e001      	b.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f043 0202 	orr.w	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fdfa 	bl	80031d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d136      	bne.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d031      	beq.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035fc:	e001      	b.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4902      	ldr	r1, [pc, #8]	; (8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800360a:	428b      	cmp	r3, r1
 800360c:	d106      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800360e:	4b02      	ldr	r3, [pc, #8]	; (8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003610:	e006      	b.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003612:	bf00      	nop
 8003614:	40003800 	.word	0x40003800
 8003618:	40003400 	.word	0x40003400
 800361c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003624:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003634:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f043 0204 	orr.w	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fdc0 	bl	80031d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003650:	e000      	b.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003652:	bf00      	nop
}
 8003654:	bf00      	nop
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c99      	adds	r1, r3, #2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6251      	str	r1, [r2, #36]	; 0x24
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d113      	bne.n	80036ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ffc9 	bl	800365c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c99      	adds	r1, r3, #2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6251      	str	r1, [r2, #36]	; 0x24
 80036e6:	8819      	ldrh	r1, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <I2SEx_TxISR_I2SExt+0x90>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <I2SEx_TxISR_I2SExt+0x22>
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <I2SEx_TxISR_I2SExt+0x94>)
 80036f4:	e001      	b.n	80036fa <I2SEx_TxISR_I2SExt+0x26>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	460a      	mov	r2, r1
 80036fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d121      	bne.n	800375a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <I2SEx_TxISR_I2SExt+0x90>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <I2SEx_TxISR_I2SExt+0x50>
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <I2SEx_TxISR_I2SExt+0x94>)
 8003722:	e001      	b.n	8003728 <I2SEx_TxISR_I2SExt+0x54>
 8003724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	490d      	ldr	r1, [pc, #52]	; (8003764 <I2SEx_TxISR_I2SExt+0x90>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d101      	bne.n	8003738 <I2SEx_TxISR_I2SExt+0x64>
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <I2SEx_TxISR_I2SExt+0x94>)
 8003736:	e001      	b.n	800373c <I2SEx_TxISR_I2SExt+0x68>
 8003738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003740:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff81 	bl	800365c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40003800 	.word	0x40003800
 8003768:	40003400 	.word	0x40003400

0800376c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68d8      	ldr	r0, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	1c99      	adds	r1, r3, #2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003784:	b282      	uxth	r2, r0
 8003786:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d113      	bne.n	80037c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff4a 	bl	800365c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <I2SEx_RxISR_I2SExt+0x90>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <I2SEx_RxISR_I2SExt+0x16>
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <I2SEx_RxISR_I2SExt+0x94>)
 80037e4:	e001      	b.n	80037ea <I2SEx_RxISR_I2SExt+0x1a>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	68d8      	ldr	r0, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	1c99      	adds	r1, r3, #2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037f6:	b282      	uxth	r2, r0
 80037f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d121      	bne.n	8003856 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <I2SEx_RxISR_I2SExt+0x90>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <I2SEx_RxISR_I2SExt+0x50>
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <I2SEx_RxISR_I2SExt+0x94>)
 800381e:	e001      	b.n	8003824 <I2SEx_RxISR_I2SExt+0x54>
 8003820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	490d      	ldr	r1, [pc, #52]	; (8003860 <I2SEx_RxISR_I2SExt+0x90>)
 800382c:	428b      	cmp	r3, r1
 800382e:	d101      	bne.n	8003834 <I2SEx_RxISR_I2SExt+0x64>
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <I2SEx_RxISR_I2SExt+0x94>)
 8003832:	e001      	b.n	8003838 <I2SEx_RxISR_I2SExt+0x68>
 8003834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003838:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff03 	bl	800365c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40003800 	.word	0x40003800
 8003864:	40003400 	.word	0x40003400

08003868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e267      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	4b88      	ldr	r3, [pc, #544]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800389a:	2b08      	cmp	r3, #8
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e242      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6f      	ldr	r2, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6c      	ldr	r2, [pc, #432]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd faba 	bl	8000e98 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fd fab6 	bl	8000e98 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e207      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fd faa6 	bl	8000e98 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7fd faa2 	bl	8000e98 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1f3      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4937      	ldr	r1, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fd fa5b 	bl	8000e98 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fd fa57 	bl	8000e98 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a8      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4925      	ldr	r1, [pc, #148]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fd fa3a 	bl	8000e98 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fd fa36 	bl	8000e98 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e187      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fa1a 	bl	8000e98 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fd fa16 	bl	8000e98 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e167      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fa03 	bl	8000e98 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fd f9ff 	bl	8000e98 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d907      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e150      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8097 	beq.w	8003bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b74      	ldr	r3, [pc, #464]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fd f9bf 	bl	8000e98 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fd f9bb 	bl	8000e98 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e10c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2ea>
 8003b44:	4b64      	ldr	r3, [pc, #400]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x30c>
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b74:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a54      	ldr	r2, [pc, #336]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fd f980 	bl	8000e98 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fd f97c 	bl	8000e98 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0cb      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fd f96a 	bl	8000e98 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fd f966 	bl	8000e98 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b5      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a1 	beq.w	8003d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d05c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d141      	bne.n	8003c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fd f93a 	bl	8000e98 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd f936 	bl	8000e98 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e087      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fd f90f 	bl	8000e98 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fd f90b 	bl	8000e98 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x416>
 8003c9c:	e054      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f8f8 	bl	8000e98 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd f8f4 	bl	8000e98 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e038      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4ec>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cc      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90c      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b65      	ldr	r3, [pc, #404]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fd f826 	bl	8000e98 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fd f822 	bl	8000e98 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20c      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc ff86 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08007d74 	.word	0x08007d74
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b094      	sub	sp, #80	; 0x50
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f30:	2300      	movs	r3, #0
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	2300      	movs	r3, #0
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b79      	ldr	r3, [pc, #484]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80e1 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e0db      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b73      	ldr	r3, [pc, #460]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f5c:	e0db      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f62:	e0d8      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	2300      	movs	r3, #0
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
 8003f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4621      	mov	r1, r4
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	6139      	str	r1, [r7, #16]
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fdc:	4659      	mov	r1, fp
 8003fde:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	462b      	mov	r3, r5
 8004004:	eb49 0303 	adc.w	r3, r9, r3
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004016:	4629      	mov	r1, r5
 8004018:	024b      	lsls	r3, r1, #9
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004020:	4621      	mov	r1, r4
 8004022:	024a      	lsls	r2, r1, #9
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
 800402e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004034:	f7fc f8d0 	bl	80001d8 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	e058      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	4618      	mov	r0, r3
 800404c:	4611      	mov	r1, r2
 800404e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0159      	lsls	r1, r3, #5
 800406a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406e:	0150      	lsls	r0, r2, #5
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4641      	mov	r1, r8
 8004076:	ebb2 0a01 	subs.w	sl, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800408c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004094:	ebb2 040a 	subs.w	r4, r2, sl
 8004098:	eb63 050b 	sbc.w	r5, r3, fp
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	61fa      	str	r2, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	f7fc f876 	bl	80001d8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004118:	4618      	mov	r0, r3
 800411a:	3750      	adds	r7, #80	; 0x50
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08007d84 	.word	0x08007d84

08004170 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004194:	2b00      	cmp	r3, #0
 8004196:	d038      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800419e:	f7fc fe7b 	bl	8000e98 <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041a6:	f7fc fe77 	bl	8000e98 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0bd      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b8:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	071b      	lsls	r3, r3, #28
 80041d6:	495a      	ldr	r1, [pc, #360]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041de:	4b57      	ldr	r3, [pc, #348]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fc fe58 	bl	8000e98 <HAL_GetTick>
 80041e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041ec:	f7fc fe54 	bl	8000e98 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e09a      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041fe:	4b50      	ldr	r3, [pc, #320]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8083 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	4b48      	ldr	r3, [pc, #288]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4a47      	ldr	r2, [pc, #284]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6413      	str	r3, [r2, #64]	; 0x40
 8004228:	4b45      	ldr	r3, [pc, #276]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004234:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a42      	ldr	r2, [pc, #264]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004240:	f7fc fe2a 	bl	8000e98 <HAL_GetTick>
 8004244:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004248:	f7fc fe26 	bl	8000e98 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e06c      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800425a:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d028      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004284:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800429a:	4a29      	ldr	r2, [pc, #164]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d114      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fc fdf4 	bl	8000e98 <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fc fdf0 	bl	8000e98 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e034      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ee      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d10d      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80042e4:	4b16      	ldr	r3, [pc, #88]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f8:	4911      	ldr	r1, [pc, #68]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
 80042fe:	e005      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800430a:	6093      	str	r3, [r2, #8]
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004318:	4909      	ldr	r1, [pc, #36]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7d1a      	ldrb	r2, [r3, #20]
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004330:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	42470068 	.word	0x42470068
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	42470e40 	.word	0x42470e40
 800434c:	424711e0 	.word	0x424711e0

08004350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d140      	bne.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d131      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004386:	617b      	str	r3, [r7, #20]
          break;
 8004388:	e031      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004396:	d109      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800439a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a2:	4a19      	ldr	r2, [pc, #100]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e008      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	0f1b      	lsrs	r3, r3, #28
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
          break;
 80043e6:	e002      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
          break;
 80043ec:	bf00      	nop
        }
      }
      break;
 80043ee:	bf00      	nop
    }
  }
  return frequency;
 80043f0:	697b      	ldr	r3, [r7, #20]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00bb8000 	.word	0x00bb8000
 8004408:	007a1200 	.word	0x007a1200
 800440c:	00f42400 	.word	0x00f42400

08004410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e07b      	b.n	800451a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d009      	beq.n	8004448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
 800443a:	e005      	b.n	8004448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fbc4 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	ea42 0103 	orr.w	r1, r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0104 	and.w	r1, r3, #4
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0210 	and.w	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004522:	b084      	sub	sp, #16
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	f107 001c 	add.w	r0, r7, #28
 8004530:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2b01      	cmp	r3, #1
 8004538:	d122      	bne.n	8004580 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9bf 	bl	80048f8 <USB_CoreReset>
 800457a:	4603      	mov	r3, r0
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e01a      	b.n	80045b6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9b3 	bl	80048f8 <USB_CoreReset>
 8004592:	4603      	mov	r3, r0
 8004594:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38
 80045a8:	e005      	b.n	80045b6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10b      	bne.n	80045d4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f043 0206 	orr.w	r2, r3, #6
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e0:	b004      	add	sp, #16
 80045e2:	4770      	bx	lr

080045e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d115      	bne.n	8004676 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004656:	2001      	movs	r0, #1
 8004658:	f7fc fc2a 	bl	8000eb0 <HAL_Delay>
      ms++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f939 	bl	80048da <USB_GetMode>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d01e      	beq.n	80046ac <USB_SetCurrentMode+0x84>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b31      	cmp	r3, #49	; 0x31
 8004672:	d9f0      	bls.n	8004656 <USB_SetCurrentMode+0x2e>
 8004674:	e01a      	b.n	80046ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d115      	bne.n	80046a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004688:	2001      	movs	r0, #1
 800468a:	f7fc fc11 	bl	8000eb0 <HAL_Delay>
      ms++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f920 	bl	80048da <USB_GetMode>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <USB_SetCurrentMode+0x84>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b31      	cmp	r3, #49	; 0x31
 80046a4:	d9f0      	bls.n	8004688 <USB_SetCurrentMode+0x60>
 80046a6:	e001      	b.n	80046ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e005      	b.n	80046b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b32      	cmp	r3, #50	; 0x32
 80046b0:	d101      	bne.n	80046b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a13      	ldr	r2, [pc, #76]	; (8004724 <USB_FlushTxFifo+0x64>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e01b      	b.n	8004718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	daf2      	bge.n	80046ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	019b      	lsls	r3, r3, #6
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <USB_FlushTxFifo+0x64>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e006      	b.n	8004718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b20      	cmp	r3, #32
 8004714:	d0f0      	beq.n	80046f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	00030d40 	.word	0x00030d40

08004728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <USB_FlushRxFifo+0x5c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e018      	b.n	8004778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	daf2      	bge.n	8004734 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2210      	movs	r2, #16
 8004756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <USB_FlushRxFifo+0x5c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e006      	b.n	8004778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	d0f0      	beq.n	8004758 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	00030d40 	.word	0x00030d40

08004788 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	4611      	mov	r1, r2
 8004794:	461a      	mov	r2, r3
 8004796:	460b      	mov	r3, r1
 8004798:	71fb      	strb	r3, [r7, #7]
 800479a:	4613      	mov	r3, r2
 800479c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d123      	bne.n	80047f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ae:	88bb      	ldrh	r3, [r7, #4]
 80047b0:	3303      	adds	r3, #3
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e018      	b.n	80047ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	031a      	lsls	r2, r3, #12
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	461a      	mov	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3e2      	bcc.n	80047bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3724      	adds	r7, #36	; 0x24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004804:	b480      	push	{r7}
 8004806:	b08b      	sub	sp, #44	; 0x2c
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	b29b      	uxth	r3, r3
 8004820:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	e014      	b.n	800485a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	601a      	str	r2, [r3, #0]
    pDest++;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	3301      	adds	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	3301      	adds	r3, #1
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	3301      	adds	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	3301      	adds	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3301      	adds	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	429a      	cmp	r2, r3
 8004860:	d3e6      	bcc.n	8004830 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004862:	8bfb      	ldrh	r3, [r7, #30]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01e      	beq.n	80048a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004872:	461a      	mov	r2, r3
 8004874:	f107 0310 	add.w	r3, r7, #16
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	b2da      	uxtb	r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	701a      	strb	r2, [r3, #0]
      i++;
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	3301      	adds	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
      pDest++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800489a:	8bfb      	ldrh	r3, [r7, #30]
 800489c:	3b01      	subs	r3, #1
 800489e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048a0:	8bfb      	ldrh	r3, [r7, #30]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ea      	bne.n	800487c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	372c      	adds	r7, #44	; 0x2c
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <USB_CoreReset+0x64>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e01b      	b.n	800494e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	daf2      	bge.n	8004904 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <USB_CoreReset+0x64>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d0f0      	beq.n	800492e <USB_CoreReset+0x36>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	00030d40 	.word	0x00030d40

08004960 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004960:	b084      	sub	sp, #16
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800496e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10a      	bne.n	80049d2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e014      	b.n	80049fc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e009      	b.n	80049fc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049f6:	f023 0304 	bic.w	r3, r3, #4
 80049fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049fc:	2110      	movs	r1, #16
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fe5e 	bl	80046c0 <USB_FlushTxFifo>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fe8a 	bl	8004728 <USB_FlushRxFifo>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e015      	b.n	8004a50 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	461a      	mov	r2, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d3e5      	bcc.n	8004a24 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <USB_HostInit+0x16c>)
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <USB_HostInit+0x170>)
 8004a84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a88:	e009      	b.n	8004a9e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <USB_HostInit+0x174>)
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <USB_HostInit+0x178>)
 8004a9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <USB_HostInit+0x17c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac8:	b004      	add	sp, #16
 8004aca:	4770      	bx	lr
 8004acc:	01000200 	.word	0x01000200
 8004ad0:	00e00300 	.word	0x00e00300
 8004ad4:	00600080 	.word	0x00600080
 8004ad8:	004000e0 	.word	0x004000e0
 8004adc:	a3200008 	.word	0xa3200008

08004ae0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b2e:	6053      	str	r3, [r2, #4]
 8004b30:	e009      	b.n	8004b46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d106      	bne.n	8004b46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b84:	2064      	movs	r0, #100	; 0x64
 8004b86:	f7fc f993 	bl	8000eb0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b98:	200a      	movs	r0, #10
 8004b9a:	f7fc f989 	bl	8000eb0 <HAL_Delay>

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <USB_DriveVbus+0x44>
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d109      	bne.n	8004c0c <USB_DriveVbus+0x64>
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c5b      	lsrs	r3, r3, #17
 8004c38:	f003 0303 	and.w	r3, r3, #3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	b29b      	uxth	r3, r3
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	70fb      	strb	r3, [r7, #3]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	70bb      	strb	r3, [r7, #2]
 8004c82:	4613      	mov	r3, r2
 8004c84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ca2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d87e      	bhi.n	8004da8 <USB_HC_Init+0x13c>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <USB_HC_Init+0x44>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004d6b 	.word	0x08004d6b
 8004cb8:	08004cc1 	.word	0x08004cc1
 8004cbc:	08004d2d 	.word	0x08004d2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f240 439d 	movw	r3, #1181	; 0x49d
 8004cd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da10      	bge.n	8004cfe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004cfc:	e057      	b.n	8004dae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d051      	beq.n	8004dae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d28:	60d3      	str	r3, [r2, #12]
      break;
 8004d2a:	e040      	b.n	8004dae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da34      	bge.n	8004db2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d68:	e023      	b.n	8004db2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	461a      	mov	r2, r3
 8004d78:	f240 2325 	movw	r3, #549	; 0x225
 8004d7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da17      	bge.n	8004db6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004da4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004da6:	e006      	b.n	8004db6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	77fb      	strb	r3, [r7, #31]
      break;
 8004dac:	e004      	b.n	8004db8 <USB_HC_Init+0x14c>
      break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <USB_HC_Init+0x14c>
      break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <USB_HC_Init+0x14c>
      break;
 8004db6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f043 0302 	orr.w	r3, r3, #2
 8004dd6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	2101      	movs	r1, #1
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	6939      	ldr	r1, [r7, #16]
 8004dee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004df2:	4313      	orrs	r3, r2
 8004df4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da03      	bge.n	8004e12 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e001      	b.n	8004e16 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff feff 	bl	8004c1a <USB_GetHostSpeed>
 8004e1c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d106      	bne.n	8004e34 <USB_HC_Init+0x1c8>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d003      	beq.n	8004e34 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e001      	b.n	8004e38 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	059b      	lsls	r3, r3, #22
 8004e3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e40:	78bb      	ldrb	r3, [r7, #2]
 8004e42:	02db      	lsls	r3, r3, #11
 8004e44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e4e:	049b      	lsls	r3, r3, #18
 8004e50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	0159      	lsls	r1, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	440b      	add	r3, r1
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e74:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d003      	beq.n	8004e86 <USB_HC_Init+0x21a>
 8004e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10f      	bne.n	8004ea6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	; 0x30
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ecc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02d      	beq.n	8004f36 <USB_HC_StartXfer+0x86>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d129      	bne.n	8004f36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d117      	bne.n	8004f18 <USB_HC_StartXfer+0x68>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	79db      	ldrb	r3, [r3, #7]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <USB_HC_StartXfer+0x48>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	79db      	ldrb	r3, [r3, #7]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d10f      	bne.n	8004f18 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <USB_HC_StartXfer+0x86>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	795b      	ldrb	r3, [r3, #5]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa0f 	bl	8005350 <USB_DoPing>
      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e0f8      	b.n	8005128 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	8912      	ldrh	r2, [r2, #8]
 8004f46:	4413      	add	r3, r2
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	8912      	ldrh	r2, [r2, #8]
 8004f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f52:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f56:	8b7b      	ldrh	r3, [r7, #26]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d90b      	bls.n	8004f74 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004f5c:	8b7b      	ldrh	r3, [r7, #26]
 8004f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	8912      	ldrh	r2, [r2, #8]
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	611a      	str	r2, [r3, #16]
 8004f6e:	e001      	b.n	8004f74 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f70:	2301      	movs	r3, #1
 8004f72:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	8912      	ldrh	r2, [r2, #8]
 8004f82:	fb03 f202 	mul.w	r2, r3, r2
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	611a      	str	r2, [r3, #16]
 8004f8a:	e003      	b.n	8004f94 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f9e:	04d9      	lsls	r1, r3, #19
 8004fa0:	4b63      	ldr	r3, [pc, #396]	; (8005130 <USB_HC_StartXfer+0x280>)
 8004fa2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fa4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	7a9b      	ldrb	r3, [r3, #10]
 8004faa:	075b      	lsls	r3, r3, #29
 8004fac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb0:	69f9      	ldr	r1, [r7, #28]
 8004fb2:	0148      	lsls	r0, r1, #5
 8004fb4:	6a39      	ldr	r1, [r7, #32]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	68d9      	ldr	r1, [r3, #12]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	460a      	mov	r2, r1
 8004fd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	6a3a      	ldr	r2, [r7, #32]
 8005006:	440a      	add	r2, r1
 8005008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005010:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	7e7b      	ldrb	r3, [r7, #25]
 8005022:	075b      	lsls	r3, r3, #29
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	0148      	lsls	r0, r1, #5
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	4401      	add	r1, r0
 800502c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800504a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	e003      	b.n	8005066 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005064:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800506c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e04e      	b.n	8005128 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d149      	bne.n	8005126 <USB_HC_StartXfer+0x276>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d045      	beq.n	8005126 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	79db      	ldrb	r3, [r3, #7]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d830      	bhi.n	8005104 <USB_HC_StartXfer+0x254>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <USB_HC_StartXfer+0x1f8>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050dd 	.word	0x080050dd
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	080050dd 	.word	0x080050dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	3303      	adds	r3, #3
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050c2:	8afa      	ldrh	r2, [r7, #22]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d91c      	bls.n	8005108 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80050da:	e015      	b.n	8005108 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	3303      	adds	r3, #3
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80050e6:	8afa      	ldrh	r2, [r7, #22]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d90a      	bls.n	800510c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]
        }
        break;
 8005102:	e003      	b.n	800510c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <USB_HC_StartXfer+0x25e>
        break;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <USB_HC_StartXfer+0x25e>
        break;
 800510c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785a      	ldrb	r2, [r3, #1]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	b29b      	uxth	r3, r3
 800511c:	2000      	movs	r0, #0
 800511e:	9000      	str	r0, [sp, #0]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff fb31 	bl	8004788 <USB_WritePacket>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	1ff80000 	.word	0x1ff80000

08005134 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	b29b      	uxth	r3, r3
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005156:	b480      	push	{r7}
 8005158:	b089      	sub	sp, #36	; 0x24
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0c9b      	lsrs	r3, r3, #18
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0fdb      	lsrs	r3, r3, #31
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d104      	bne.n	80051b0 <USB_HC_Halt+0x5a>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e0c8      	b.n	8005342 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <USB_HC_Halt+0x66>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d163      	bne.n	8005284 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f040 80ab 	bne.w	8005340 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d133      	bne.n	800525e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005214:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005234:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005242:	d81d      	bhi.n	8005280 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525a:	d0ec      	beq.n	8005236 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800525c:	e070      	b.n	8005340 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800527c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800527e:	e05f      	b.n	8005340 <USB_HC_Halt+0x1ea>
            break;
 8005280:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005282:	e05d      	b.n	8005340 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d133      	bne.n	800531c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005300:	d81d      	bhi.n	800533e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005318:	d0ec      	beq.n	80052f4 <USB_HC_Halt+0x19e>
 800531a:	e011      	b.n	8005340 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e000      	b.n	8005340 <USB_HC_Halt+0x1ea>
          break;
 800533e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3724      	adds	r7, #36	; 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005364:	2301      	movs	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	04da      	lsls	r2, r3, #19
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <USB_DoPing+0x74>)
 800536e:	4013      	ands	r3, r2
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	440a      	add	r2, r1
 8005378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005380:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005398:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	461a      	mov	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	1ff80000 	.word	0x1ff80000

080053c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f912 	bl	8004606 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e2:	2110      	movs	r1, #16
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff f96b 	bl	80046c0 <USB_FlushTxFifo>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff f997 	bl	8004728 <USB_FlushRxFifo>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e01f      	b.n	800544a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005420:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005428:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005430:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	461a      	mov	r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	3301      	adds	r3, #1
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d9dc      	bls.n	800540a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	e034      	b.n	80054c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005474:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800547c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	461a      	mov	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549c:	d80c      	bhi.n	80054b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b4:	d0ec      	beq.n	8005490 <USB_StopHost+0xc8>
 80054b6:	e000      	b.n	80054ba <USB_StopHost+0xf2>
        break;
 80054b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	3301      	adds	r3, #1
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d9c7      	bls.n	8005456 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff f881 	bl	80045e4 <USB_EnableGlobalInt>

  return ret;
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af04      	add	r7, sp, #16
 80054f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80054f4:	2301      	movs	r3, #1
 80054f6:	2202      	movs	r2, #2
 80054f8:	2102      	movs	r1, #2
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fc66 	bl	8005dcc <USBH_FindInterface>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2bff      	cmp	r3, #255	; 0xff
 8005508:	d002      	beq.n	8005510 <USBH_CDC_InterfaceInit+0x24>
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d901      	bls.n	8005514 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005510:	2302      	movs	r3, #2
 8005512:	e13d      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fc3b 	bl	8005d94 <USBH_SelectInterface>
 800551e:	4603      	mov	r3, r0
 8005520:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005528:	2302      	movs	r3, #2
 800552a:	e131      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005532:	2050      	movs	r0, #80	; 0x50
 8005534:	f002 fafa 	bl	8007b2c <malloc>
 8005538:	4603      	mov	r3, r0
 800553a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800554c:	2302      	movs	r3, #2
 800554e:	e11f      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005550:	2250      	movs	r2, #80	; 0x50
 8005552:	2100      	movs	r1, #0
 8005554:	68b8      	ldr	r0, [r7, #8]
 8005556:	f002 faf9 	bl	8007b4c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	211a      	movs	r1, #26
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	b25b      	sxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	da15      	bge.n	800559e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	211a      	movs	r1, #26
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	211a      	movs	r1, #26
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	4413      	add	r3, r2
 8005594:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005598:	881a      	ldrh	r2, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 ff2c 	bl	8007402 <USBH_AllocPipe>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	7819      	ldrb	r1, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	7858      	ldrb	r0, [r3, #1]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	8952      	ldrh	r2, [r2, #10]
 80055ca:	9202      	str	r2, [sp, #8]
 80055cc:	2203      	movs	r2, #3
 80055ce:	9201      	str	r2, [sp, #4]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4623      	mov	r3, r4
 80055d4:	4602      	mov	r2, r0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 fee4 	bl	80073a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f002 f9f3 	bl	80079d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80055ea:	2300      	movs	r3, #0
 80055ec:	2200      	movs	r2, #0
 80055ee:	210a      	movs	r1, #10
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fbeb 	bl	8005dcc <USBH_FindInterface>
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2bff      	cmp	r3, #255	; 0xff
 80055fe:	d002      	beq.n	8005606 <USBH_CDC_InterfaceInit+0x11a>
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d901      	bls.n	800560a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005606:	2302      	movs	r3, #2
 8005608:	e0c2      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	211a      	movs	r1, #26
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b25b      	sxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	da16      	bge.n	8005650 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	211a      	movs	r1, #26
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	211a      	movs	r1, #26
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	835a      	strh	r2, [r3, #26]
 800564e:	e015      	b.n	800567c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	211a      	movs	r1, #26
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	211a      	movs	r1, #26
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005676:	881a      	ldrh	r2, [r3, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	211a      	movs	r1, #26
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	4413      	add	r3, r2
 8005688:	f203 3356 	addw	r3, r3, #854	; 0x356
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b25b      	sxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	da16      	bge.n	80056c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	211a      	movs	r1, #26
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	211a      	movs	r1, #26
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056ba:	881a      	ldrh	r2, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	835a      	strh	r2, [r3, #26]
 80056c0:	e015      	b.n	80056ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	211a      	movs	r1, #26
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	211a      	movs	r1, #26
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	7b9b      	ldrb	r3, [r3, #14]
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fe84 	bl	8007402 <USBH_AllocPipe>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	7bdb      	ldrb	r3, [r3, #15]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 fe7a 	bl	8007402 <USBH_AllocPipe>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	7b59      	ldrb	r1, [r3, #13]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	7b98      	ldrb	r0, [r3, #14]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	8b12      	ldrh	r2, [r2, #24]
 800572e:	9202      	str	r2, [sp, #8]
 8005730:	2202      	movs	r2, #2
 8005732:	9201      	str	r2, [sp, #4]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4623      	mov	r3, r4
 8005738:	4602      	mov	r2, r0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 fe32 	bl	80073a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	7b19      	ldrb	r1, [r3, #12]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	7bd8      	ldrb	r0, [r3, #15]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	8b52      	ldrh	r2, [r2, #26]
 8005758:	9202      	str	r2, [sp, #8]
 800575a:	2202      	movs	r2, #2
 800575c:	9201      	str	r2, [sp, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4623      	mov	r3, r4
 8005762:	4602      	mov	r2, r0
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fe1d 	bl	80073a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	7b5b      	ldrb	r3, [r3, #13]
 8005776:	2200      	movs	r2, #0
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f002 f928 	bl	80079d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f002 f921 	bl	80079d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}

08005798 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00e      	beq.n	80057d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fe12 	bl	80073e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fe3d 	bl	8007444 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	7b1b      	ldrb	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	7b1b      	ldrb	r3, [r3, #12]
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 fdff 	bl	80073e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fe2a 	bl	8007444 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7b5b      	ldrb	r3, [r3, #13]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	7b5b      	ldrb	r3, [r3, #13]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fdec 	bl	80073e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	7b5b      	ldrb	r3, [r3, #13]
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fe17 	bl	8007444 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4618      	mov	r0, r3
 8005832:	f002 f983 	bl	8007b3c <free>
    phost->pActiveClass->pData = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800583c:	2200      	movs	r2, #0
 800583e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3340      	adds	r3, #64	; 0x40
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8b1 	bl	80059ca <GetLineCoding>
 8005868:	4603      	mov	r3, r0
 800586a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800586c:	7afb      	ldrb	r3, [r7, #11]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005878:	2102      	movs	r1, #2
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800587e:	7afb      	ldrb	r3, [r7, #11]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d877      	bhi.n	800599c <USBH_CDC_Process+0x114>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <USBH_CDC_Process+0x2c>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058c9 	.word	0x080058c9
 80058b8:	080058cf 	.word	0x080058cf
 80058bc:	080058ff 	.word	0x080058ff
 80058c0:	08005973 	.word	0x08005973
 80058c4:	08005981 	.word	0x08005981
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e06d      	b.n	80059aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f897 	bl	8005a08 <SetLineCoding>
 80058da:	4603      	mov	r3, r0
 80058dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058ec:	e058      	b.n	80059a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d055      	beq.n	80059a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2204      	movs	r2, #4
 80058f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058fc:	e050      	b.n	80059a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3340      	adds	r3, #64	; 0x40
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f860 	bl	80059ca <GetLineCoding>
 800590a:	4603      	mov	r3, r0
 800590c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d126      	bne.n	8005962 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	791b      	ldrb	r3, [r3, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d13b      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005936:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005938:	429a      	cmp	r2, r3
 800593a:	d133      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005948:	429a      	cmp	r2, r3
 800594a:	d12b      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005954:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005956:	429a      	cmp	r2, r3
 8005958:	d124      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f958 	bl	8005c10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005960:	e020      	b.n	80059a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d01d      	beq.n	80059a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2204      	movs	r2, #4
 800596c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005970:	e018      	b.n	80059a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f867 	bl	8005a46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8da 	bl	8005b32 <CDC_ProcessReception>
      break;
 800597e:	e014      	b.n	80059aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005980:	2100      	movs	r1, #0
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 ffef 	bl	8006966 <USBH_ClrFeature>
 8005988:	4603      	mov	r3, r0
 800598a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800599a:	e005      	b.n	80059a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800599c:	bf00      	nop
 800599e:	e004      	b.n	80059aa <USBH_CDC_Process+0x122>
      break;
 80059a0:	bf00      	nop
 80059a2:	e002      	b.n	80059aa <USBH_CDC_Process+0x122>
      break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <USBH_CDC_Process+0x122>
      break;
 80059a8:	bf00      	nop

  }

  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	22a1      	movs	r2, #161	; 0xa1
 80059d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2221      	movs	r2, #33	; 0x21
 80059de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2207      	movs	r2, #7
 80059f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2207      	movs	r2, #7
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fa81 	bl	8006f00 <USBH_CtlReq>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2221      	movs	r2, #33	; 0x21
 8005a16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2207      	movs	r2, #7
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fa62 	bl	8006f00 <USBH_CtlReq>
 8005a3c:	4603      	mov	r3, r0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af02      	add	r7, sp, #8
 8005a4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d002      	beq.n	8005a6c <CDC_ProcessTransmission+0x26>
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d023      	beq.n	8005ab2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a6a:	e05e      	b.n	8005b2a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	8b12      	ldrh	r2, [r2, #24]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d90b      	bls.n	8005a90 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	69d9      	ldr	r1, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8b1a      	ldrh	r2, [r3, #24]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	7b5b      	ldrb	r3, [r3, #13]
 8005a84:	2001      	movs	r0, #1
 8005a86:	9000      	str	r0, [sp, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 fc48 	bl	800731e <USBH_BulkSendData>
 8005a8e:	e00b      	b.n	8005aa8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	7b5b      	ldrb	r3, [r3, #13]
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	9000      	str	r0, [sp, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fc3b 	bl	800731e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ab0:	e03b      	b.n	8005b2a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	7b5b      	ldrb	r3, [r3, #13]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 ff5f 	bl	800797c <USBH_LL_GetURBState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d128      	bne.n	8005b1a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	8b12      	ldrh	r2, [r2, #24]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d90e      	bls.n	8005af2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	8b12      	ldrh	r2, [r2, #24]
 8005adc:	1a9a      	subs	r2, r3, r2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	8b12      	ldrh	r2, [r2, #24]
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	61da      	str	r2, [r3, #28]
 8005af0:	e002      	b.n	8005af8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b08:	e00e      	b.n	8005b28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f868 	bl	8005be8 <USBH_CDC_TransmitCallback>
      break;
 8005b18:	e006      	b.n	8005b28 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d103      	bne.n	8005b28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b28:	bf00      	nop
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d002      	beq.n	8005b58 <CDC_ProcessReception+0x26>
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d00e      	beq.n	8005b74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b56:	e043      	b.n	8005be0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6a19      	ldr	r1, [r3, #32]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	8b5a      	ldrh	r2, [r3, #26]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	7b1b      	ldrb	r3, [r3, #12]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fbff 	bl	8007368 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b72:	e035      	b.n	8005be0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	7b1b      	ldrb	r3, [r3, #12]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fefe 	bl	800797c <USBH_LL_GetURBState>
 8005b80:	4603      	mov	r3, r0
 8005b82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d129      	bne.n	8005bde <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	7b1b      	ldrb	r3, [r3, #12]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fe61 	bl	8007858 <USBH_LL_GetLastXferSize>
 8005b96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d016      	beq.n	8005bd0 <CDC_ProcessReception+0x9e>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	8b5b      	ldrh	r3, [r3, #26]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d910      	bls.n	8005bd0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bce:	e006      	b.n	8005bde <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f80f 	bl	8005bfc <USBH_CDC_ReceiveCallback>
      break;
 8005bde:	bf00      	nop
  }
}
 8005be0:	bf00      	nop
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e029      	b.n	8005c90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f81f 	bl	8005c98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f001 fd31 	bl	80076f0 <USBH_LL_Init>

  return USBH_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e009      	b.n	8005cbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	33e0      	adds	r3, #224	; 0xe0
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d9f2      	bls.n	8005caa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e009      	b.n	8005cde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d3f1      	bcc.n	8005cca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2240      	movs	r2, #64	; 0x40
 8005d0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d016      	beq.n	8005d82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	33de      	adds	r3, #222	; 0xde
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
 8005d7a:	e004      	b.n	8005d86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	73fb      	strb	r3, [r7, #15]
 8005d80:	e001      	b.n	8005d86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d82:	2302      	movs	r3, #2
 8005d84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d204      	bcs.n	8005dba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005db8:	e001      	b.n	8005dbe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	70fb      	strb	r3, [r7, #3]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70bb      	strb	r3, [r7, #2]
 8005de2:	4613      	mov	r3, r2
 8005de4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005df4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005df6:	e025      	b.n	8005e44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	221a      	movs	r2, #26
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	3308      	adds	r3, #8
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	3302      	adds	r3, #2
 8005e08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	795b      	ldrb	r3, [r3, #5]
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d002      	beq.n	8005e1a <USBH_FindInterface+0x4e>
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2bff      	cmp	r3, #255	; 0xff
 8005e18:	d111      	bne.n	8005e3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e1e:	78ba      	ldrb	r2, [r7, #2]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d002      	beq.n	8005e2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e24:	78bb      	ldrb	r3, [r7, #2]
 8005e26:	2bff      	cmp	r3, #255	; 0xff
 8005e28:	d109      	bne.n	8005e3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e2e:	787a      	ldrb	r2, [r7, #1]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d002      	beq.n	8005e3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e34:	787b      	ldrb	r3, [r7, #1]
 8005e36:	2bff      	cmp	r3, #255	; 0xff
 8005e38:	d101      	bne.n	8005e3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	e006      	b.n	8005e4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	3301      	adds	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d9d6      	bls.n	8005df8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e4a:	23ff      	movs	r3, #255	; 0xff
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fc81 	bl	8007768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e66:	2101      	movs	r1, #1
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 fd9a 	bl	80079a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e80:	2302      	movs	r3, #2
 8005e82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b0b      	cmp	r3, #11
 8005ea2:	f200 81be 	bhi.w	8006222 <USBH_Process+0x3aa>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <USBH_Process+0x34>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005edd 	.word	0x08005edd
 8005eb0:	08005f0f 	.word	0x08005f0f
 8005eb4:	08005f77 	.word	0x08005f77
 8005eb8:	080061bd 	.word	0x080061bd
 8005ebc:	08006223 	.word	0x08006223
 8005ec0:	0800601b 	.word	0x0800601b
 8005ec4:	08006163 	.word	0x08006163
 8005ec8:	08006051 	.word	0x08006051
 8005ecc:	08006071 	.word	0x08006071
 8005ed0:	08006091 	.word	0x08006091
 8005ed4:	080060d5 	.word	0x080060d5
 8005ed8:	080061a5 	.word	0x080061a5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 819e 	beq.w	8006226 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005ef0:	20c8      	movs	r0, #200	; 0xc8
 8005ef2:	f001 fd9d 	bl	8007a30 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fc93 	bl	8007822 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f0c:	e18b      	b.n	8006226 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d107      	bne.n	8005f28 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f26:	e18d      	b.n	8006244 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f32:	d914      	bls.n	8005f5e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d903      	bls.n	8005f56 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	220d      	movs	r2, #13
 8005f52:	701a      	strb	r2, [r3, #0]
      break;
 8005f54:	e176      	b.n	8006244 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
      break;
 8005f5c:	e172      	b.n	8006244 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f64:	f103 020a 	add.w	r2, r3, #10
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f6e:	200a      	movs	r0, #10
 8005f70:	f001 fd5e 	bl	8007a30 <USBH_Delay>
      break;
 8005f74:	e166      	b.n	8006244 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f86:	2104      	movs	r1, #4
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005f8c:	2064      	movs	r0, #100	; 0x64
 8005f8e:	f001 fd4f 	bl	8007a30 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fc1e 	bl	80077d4 <USBH_LL_GetSpeed>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fa29 	bl	8007402 <USBH_AllocPipe>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fa21 	bl	8007402 <USBH_AllocPipe>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7919      	ldrb	r1, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fdc:	b292      	uxth	r2, r2
 8005fde:	9202      	str	r2, [sp, #8]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	9201      	str	r2, [sp, #4]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 f9da 	bl	80073a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	7959      	ldrb	r1, [r3, #5]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006004:	b292      	uxth	r2, r2
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4603      	mov	r3, r0
 8006010:	2200      	movs	r2, #0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 f9c6 	bl	80073a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006018:	e114      	b.n	8006244 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f918 	bl	8006250 <USBH_HandleEnum>
 8006020:	4603      	mov	r3, r0
 8006022:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 80fe 	bne.w	800622a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800603c:	2b01      	cmp	r3, #1
 800603e:	d103      	bne.n	8006048 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2208      	movs	r2, #8
 8006044:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006046:	e0f0      	b.n	800622a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2207      	movs	r2, #7
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e0ec      	b.n	800622a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80e9 	beq.w	800622e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2208      	movs	r2, #8
 800606c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800606e:	e0de      	b.n	800622e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006076:	b29b      	uxth	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fc2c 	bl	80068d8 <USBH_SetCfg>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 80d5 	bne.w	8006232 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2209      	movs	r2, #9
 800608c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800608e:	e0d0      	b.n	8006232 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc3c 	bl	800691e <USBH_SetFeature>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	220a      	movs	r2, #10
 80060b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060b8:	e0bd      	b.n	8006236 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b03      	cmp	r3, #3
 80060c0:	f040 80b9 	bne.w	8006236 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	220a      	movs	r2, #10
 80060c8:	701a      	strb	r2, [r3, #0]
      break;
 80060ca:	e0b4      	b.n	8006236 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	220a      	movs	r2, #10
 80060d0:	701a      	strb	r2, [r3, #0]
      break;
 80060d2:	e0b0      	b.n	8006236 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80ad 	beq.w	800623a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e016      	b.n	800611c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	32de      	adds	r2, #222	; 0xde
 80060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f8:	791a      	ldrb	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006100:	429a      	cmp	r2, r3
 8006102:	d108      	bne.n	8006116 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32de      	adds	r2, #222	; 0xde
 800610a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006114:	e005      	b.n	8006122 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	3301      	adds	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0e5      	beq.n	80060ee <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d016      	beq.n	800615a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2206      	movs	r2, #6
 8006142:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800614a:	2103      	movs	r1, #3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006150:	e073      	b.n	800623a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	220d      	movs	r2, #13
 8006156:	701a      	strb	r2, [r3, #0]
      break;
 8006158:	e06f      	b.n	800623a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	220d      	movs	r2, #13
 800615e:	701a      	strb	r2, [r3, #0]
      break;
 8006160:	e06b      	b.n	800623a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d017      	beq.n	800619c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
 8006178:	4603      	mov	r3, r0
 800617a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	220b      	movs	r2, #11
 8006188:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800618a:	e058      	b.n	800623e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d154      	bne.n	800623e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	220d      	movs	r2, #13
 8006198:	701a      	strb	r2, [r3, #0]
      break;
 800619a:	e050      	b.n	800623e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	220d      	movs	r2, #13
 80061a0:	701a      	strb	r2, [r3, #0]
      break;
 80061a2:	e04c      	b.n	800623e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d049      	beq.n	8006242 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
      }
      break;
 80061ba:	e042      	b.n	8006242 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fd67 	bl	8005c98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061f8:	2105      	movs	r1, #5
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d107      	bne.n	800621a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe20 	bl	8005e58 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006218:	e014      	b.n	8006244 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 faa4 	bl	8007768 <USBH_LL_Start>
      break;
 8006220:	e010      	b.n	8006244 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006222:	bf00      	nop
 8006224:	e00e      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006226:	bf00      	nop
 8006228:	e00c      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 800622a:	bf00      	nop
 800622c:	e00a      	b.n	8006244 <USBH_Process+0x3cc>
    break;
 800622e:	bf00      	nop
 8006230:	e008      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006232:	bf00      	nop
 8006234:	e006      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006242:	bf00      	nop
  }
  return USBH_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af04      	add	r7, sp, #16
 8006256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800625c:	2301      	movs	r3, #1
 800625e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b07      	cmp	r3, #7
 8006266:	f200 81c1 	bhi.w	80065ec <USBH_HandleEnum+0x39c>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USBH_HandleEnum+0x20>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006291 	.word	0x08006291
 8006274:	0800634f 	.word	0x0800634f
 8006278:	080063b9 	.word	0x080063b9
 800627c:	08006447 	.word	0x08006447
 8006280:	080064b1 	.word	0x080064b1
 8006284:	08006521 	.word	0x08006521
 8006288:	08006567 	.word	0x08006567
 800628c:	080065ad 	.word	0x080065ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006290:	2108      	movs	r1, #8
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa50 	bl	8006738 <USBH_Get_DevDesc>
 8006298:	4603      	mov	r3, r0
 800629a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d130      	bne.n	8006304 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	7919      	ldrb	r1, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062c6:	b292      	uxth	r2, r2
 80062c8:	9202      	str	r2, [sp, #8]
 80062ca:	2200      	movs	r2, #0
 80062cc:	9201      	str	r2, [sp, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f865 	bl	80073a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7959      	ldrb	r1, [r3, #5]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062ee:	b292      	uxth	r2, r2
 80062f0:	9202      	str	r2, [sp, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4603      	mov	r3, r0
 80062fa:	2200      	movs	r2, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f851 	bl	80073a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006302:	e175      	b.n	80065f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b03      	cmp	r3, #3
 8006308:	f040 8172 	bne.w	80065f0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006312:	3301      	adds	r3, #1
 8006314:	b2da      	uxtb	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006322:	2b03      	cmp	r3, #3
 8006324:	d903      	bls.n	800632e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	220d      	movs	r2, #13
 800632a:	701a      	strb	r2, [r3, #0]
      break;
 800632c:	e160      	b.n	80065f0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	795b      	ldrb	r3, [r3, #5]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 f885 	bl	8007444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	791b      	ldrb	r3, [r3, #4]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f87f 	bl	8007444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
      break;
 800634c:	e150      	b.n	80065f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800634e:	2112      	movs	r1, #18
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9f1 	bl	8006738 <USBH_Get_DevDesc>
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006366:	e145      	b.n	80065f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b03      	cmp	r3, #3
 800636c:	f040 8142 	bne.w	80065f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006376:	3301      	adds	r3, #1
 8006378:	b2da      	uxtb	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006386:	2b03      	cmp	r3, #3
 8006388:	d903      	bls.n	8006392 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	220d      	movs	r2, #13
 800638e:	701a      	strb	r2, [r3, #0]
      break;
 8006390:	e130      	b.n	80065f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	795b      	ldrb	r3, [r3, #5]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 f853 	bl	8007444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f84d 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
      break;
 80063b6:	e11d      	b.n	80065f4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80063b8:	2101      	movs	r1, #1
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa68 	bl	8006890 <USBH_SetAddress>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d132      	bne.n	8006430 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80063ca:	2002      	movs	r0, #2
 80063cc:	f001 fb30 	bl	8007a30 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2203      	movs	r2, #3
 80063dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7919      	ldrb	r1, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063f2:	b292      	uxth	r2, r2
 80063f4:	9202      	str	r2, [sp, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4603      	mov	r3, r0
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 ffcf 	bl	80073a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7959      	ldrb	r1, [r3, #5]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800641a:	b292      	uxth	r2, r2
 800641c:	9202      	str	r2, [sp, #8]
 800641e:	2200      	movs	r2, #0
 8006420:	9201      	str	r2, [sp, #4]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4603      	mov	r3, r0
 8006426:	2200      	movs	r2, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 ffbb 	bl	80073a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800642e:	e0e3      	b.n	80065f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b03      	cmp	r3, #3
 8006434:	f040 80e0 	bne.w	80065f8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	220d      	movs	r2, #13
 800643c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	705a      	strb	r2, [r3, #1]
      break;
 8006444:	e0d8      	b.n	80065f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006446:	2109      	movs	r1, #9
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f99d 	bl	8006788 <USBH_Get_CfgDesc>
 800644e:	4603      	mov	r3, r0
 8006450:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d103      	bne.n	8006460 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800645e:	e0cd      	b.n	80065fc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b03      	cmp	r3, #3
 8006464:	f040 80ca 	bne.w	80065fc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800646e:	3301      	adds	r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800647e:	2b03      	cmp	r3, #3
 8006480:	d903      	bls.n	800648a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220d      	movs	r2, #13
 8006486:	701a      	strb	r2, [r3, #0]
      break;
 8006488:	e0b8      	b.n	80065fc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	795b      	ldrb	r3, [r3, #5]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 ffd7 	bl	8007444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	791b      	ldrb	r3, [r3, #4]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ffd1 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
      break;
 80064ae:	e0a5      	b.n	80065fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f965 	bl	8006788 <USBH_Get_CfgDesc>
 80064be:	4603      	mov	r3, r0
 80064c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2205      	movs	r2, #5
 80064cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ce:	e097      	b.n	8006600 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	f040 8094 	bne.w	8006600 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064de:	3301      	adds	r3, #1
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d903      	bls.n	80064fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	220d      	movs	r2, #13
 80064f6:	701a      	strb	r2, [r3, #0]
      break;
 80064f8:	e082      	b.n	8006600 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	795b      	ldrb	r3, [r3, #5]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 ff9f 	bl	8007444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ff99 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
      break;
 800651e:	e06f      	b.n	8006600 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006526:	2b00      	cmp	r3, #0
 8006528:	d019      	beq.n	800655e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006536:	23ff      	movs	r3, #255	; 0xff
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f949 	bl	80067d0 <USBH_Get_StringDesc>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2206      	movs	r2, #6
 800654c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800654e:	e059      	b.n	8006604 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d156      	bne.n	8006604 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2206      	movs	r2, #6
 800655a:	705a      	strb	r2, [r3, #1]
      break;
 800655c:	e052      	b.n	8006604 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2206      	movs	r2, #6
 8006562:	705a      	strb	r2, [r3, #1]
      break;
 8006564:	e04e      	b.n	8006604 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800656c:	2b00      	cmp	r3, #0
 800656e:	d019      	beq.n	80065a4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800657c:	23ff      	movs	r3, #255	; 0xff
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f926 	bl	80067d0 <USBH_Get_StringDesc>
 8006584:	4603      	mov	r3, r0
 8006586:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2207      	movs	r2, #7
 8006592:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006594:	e038      	b.n	8006608 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d135      	bne.n	8006608 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2207      	movs	r2, #7
 80065a0:	705a      	strb	r2, [r3, #1]
      break;
 80065a2:	e031      	b.n	8006608 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2207      	movs	r2, #7
 80065a8:	705a      	strb	r2, [r3, #1]
      break;
 80065aa:	e02d      	b.n	8006608 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d017      	beq.n	80065e6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065c2:	23ff      	movs	r3, #255	; 0xff
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f903 	bl	80067d0 <USBH_Get_StringDesc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80065d8:	e018      	b.n	800660c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d115      	bne.n	800660c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
      break;
 80065e4:	e012      	b.n	800660c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
      break;
 80065ea:	e00f      	b.n	800660c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80065ec:	bf00      	nop
 80065ee:	e00e      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065f0:	bf00      	nop
 80065f2:	e00c      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065f4:	bf00      	nop
 80065f6:	e00a      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065f8:	bf00      	nop
 80065fa:	e008      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065fc:	bf00      	nop
 80065fe:	e006      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 8006600:	bf00      	nop
 8006602:	e004      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 800660c:	bf00      	nop
  }
  return Status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f804 	bl	800665a <USBH_HandleSof>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b0b      	cmp	r3, #11
 800666a:	d10a      	bne.n	8006682 <USBH_HandleSof+0x28>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
  }
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800669a:	bf00      	nop
}
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066b6:	bf00      	nop
}
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 f844 	bl	800779e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fe91 	bl	8007444 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	795b      	ldrb	r3, [r3, #5]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fe8b 	bl	8007444 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	b29b      	uxth	r3, r3
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006756:	2100      	movs	r1, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f864 	bl	8006826 <USBH_GetDescriptor>
 800675e:	4603      	mov	r3, r0
 8006760:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	b292      	uxth	r2, r2
 8006778:	4619      	mov	r1, r3
 800677a:	f000 f918 	bl	80069ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	331c      	adds	r3, #28
 8006798:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a4:	2100      	movs	r1, #0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f83d 	bl	8006826 <USBH_GetDescriptor>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	461a      	mov	r2, r3
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f987 	bl	8006ad0 <USBH_ParseCfgDesc>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	461a      	mov	r2, r3
 80067dc:	460b      	mov	r3, r1
 80067de:	72fb      	strb	r3, [r7, #11]
 80067e0:	4613      	mov	r3, r2
 80067e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067ec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80067f4:	893b      	ldrh	r3, [r7, #8]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	2100      	movs	r1, #0
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f812 	bl	8006826 <USBH_GetDescriptor>
 8006802:	4603      	mov	r3, r0
 8006804:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d107      	bne.n	800681c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006812:	893a      	ldrh	r2, [r7, #8]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fb24 	bl	8006e64 <USBH_ParseStringDesc>
  }

  return status;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	72fb      	strb	r3, [r7, #11]
 8006834:	4613      	mov	r3, r2
 8006836:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	789b      	ldrb	r3, [r3, #2]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d11c      	bne.n	800687a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2206      	movs	r2, #6
 8006850:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	893a      	ldrh	r2, [r7, #8]
 8006856:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800685e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006862:	d104      	bne.n	800686e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f240 4209 	movw	r2, #1033	; 0x409
 800686a:	829a      	strh	r2, [r3, #20]
 800686c:	e002      	b.n	8006874 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8b3a      	ldrh	r2, [r7, #24]
 8006878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800687a:	8b3b      	ldrh	r3, [r7, #24]
 800687c:	461a      	mov	r2, r3
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fb3d 	bl	8006f00 <USBH_CtlReq>
 8006886:	4603      	mov	r3, r0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	789b      	ldrb	r3, [r3, #2]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10f      	bne.n	80068c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2205      	movs	r2, #5
 80068ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fb19 	bl	8006f00 <USBH_CtlReq>
 80068ce:	4603      	mov	r3, r0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	789b      	ldrb	r3, [r3, #2]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10e      	bne.n	800690a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2209      	movs	r2, #9
 80068f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	887a      	ldrh	r2, [r7, #2]
 80068fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 faf6 	bl	8006f00 <USBH_CtlReq>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	789b      	ldrb	r3, [r3, #2]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10f      	bne.n	8006952 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2203      	movs	r2, #3
 800693c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fad2 	bl	8006f00 <USBH_CtlReq>
 800695c:	4603      	mov	r3, r0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10f      	bne.n	800699a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 faae 	bl	8006f00 <USBH_CtlReq>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	4613      	mov	r3, r2
 80069ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	785a      	ldrb	r2, [r3, #1]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3302      	adds	r3, #2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3303      	adds	r3, #3
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	791a      	ldrb	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	795a      	ldrb	r2, [r3, #5]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	799a      	ldrb	r2, [r3, #6]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	79da      	ldrb	r2, [r3, #7]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	79db      	ldrb	r3, [r3, #7]
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	dc11      	bgt.n	8006a34 <USBH_ParseDevDesc+0x86>
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	db16      	blt.n	8006a42 <USBH_ParseDevDesc+0x94>
 8006a14:	3b08      	subs	r3, #8
 8006a16:	2201      	movs	r2, #1
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf14      	ite	ne
 8006a28:	2301      	movne	r3, #1
 8006a2a:	2300      	moveq	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <USBH_ParseDevDesc+0x8a>
 8006a32:	e006      	b.n	8006a42 <USBH_ParseDevDesc+0x94>
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d104      	bne.n	8006a42 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	79da      	ldrb	r2, [r3, #7]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	71da      	strb	r2, [r3, #7]
      break;
 8006a40:	e003      	b.n	8006a4a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2240      	movs	r2, #64	; 0x40
 8006a46:	71da      	strb	r2, [r3, #7]
      break;
 8006a48:	bf00      	nop
  }

  if (length > 8U)
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d939      	bls.n	8006ac4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3308      	adds	r3, #8
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3309      	adds	r3, #9
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	330a      	adds	r3, #10
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	330b      	adds	r3, #11
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	330d      	adds	r3, #13
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	7b9a      	ldrb	r2, [r3, #14]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	7bda      	ldrb	r2, [r3, #15]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	7c1a      	ldrb	r2, [r3, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	7c5a      	ldrb	r2, [r3, #17]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	745a      	strb	r2, [r3, #17]
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ae4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	785a      	ldrb	r2, [r3, #1]
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	3302      	adds	r3, #2
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3303      	adds	r3, #3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4313      	orrs	r3, r2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2c:	bf28      	it	cs
 8006b2e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	791a      	ldrb	r2, [r3, #4]
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	795a      	ldrb	r2, [r3, #5]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	799a      	ldrb	r2, [r3, #6]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	79da      	ldrb	r2, [r3, #7]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	7a1a      	ldrb	r2, [r3, #8]
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d002      	beq.n	8006b6e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2209      	movs	r2, #9
 8006b6c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	f240 809d 	bls.w	8006cb0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b76:	2309      	movs	r3, #9
 8006b78:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b7e:	e081      	b.n	8006c84 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b80:	f107 0316 	add.w	r3, r7, #22
 8006b84:	4619      	mov	r1, r3
 8006b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b88:	f000 f99f 	bl	8006eca <USBH_GetNextDesc>
 8006b8c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d176      	bne.n	8006c84 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b09      	cmp	r3, #9
 8006b9c:	d002      	beq.n	8006ba4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	2209      	movs	r2, #9
 8006ba2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ba8:	221a      	movs	r2, #26
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	3308      	adds	r3, #8
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bba:	69f8      	ldr	r0, [r7, #28]
 8006bbc:	f000 f87e 	bl	8006cbc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bca:	e043      	b.n	8006c54 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bcc:	f107 0316 	add.w	r3, r7, #22
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd4:	f000 f979 	bl	8006eca <USBH_GetNextDesc>
 8006bd8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d138      	bne.n	8006c54 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	795b      	ldrb	r3, [r3, #5]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10f      	bne.n	8006c0a <USBH_ParseCfgDesc+0x13a>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	799b      	ldrb	r3, [r3, #6]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d10b      	bne.n	8006c0a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	79db      	ldrb	r3, [r3, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <USBH_ParseCfgDesc+0x14a>
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d00b      	beq.n	8006c1a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2209      	movs	r2, #9
 8006c06:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c08:	e007      	b.n	8006c1a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	d004      	beq.n	8006c1c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2207      	movs	r2, #7
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e000      	b.n	8006c1c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c1a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c24:	3201      	adds	r2, #1
 8006c26:	00d2      	lsls	r2, r2, #3
 8006c28:	211a      	movs	r1, #26
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	3308      	adds	r3, #8
 8006c32:	6a3a      	ldr	r2, [r7, #32]
 8006c34:	4413      	add	r3, r2
 8006c36:	3304      	adds	r3, #4
 8006c38:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f86b 	bl	8006d1a <USBH_ParseEPDesc>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c4e:	3301      	adds	r3, #1
 8006c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d204      	bcs.n	8006c6a <USBH_ParseCfgDesc+0x19a>
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	885a      	ldrh	r2, [r3, #2]
 8006c64:	8afb      	ldrh	r3, [r7, #22]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d8b0      	bhi.n	8006bcc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	791b      	ldrb	r3, [r3, #4]
 8006c6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d201      	bcs.n	8006c7a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e01c      	b.n	8006cb4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c7e:	3301      	adds	r3, #1
 8006c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d805      	bhi.n	8006c98 <USBH_ParseCfgDesc+0x1c8>
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	885a      	ldrh	r2, [r3, #2]
 8006c90:	8afb      	ldrh	r3, [r7, #22]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	f63f af74 	bhi.w	8006b80 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	bf28      	it	cs
 8006ca0:	2302      	movcs	r3, #2
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d201      	bcs.n	8006cb0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e001      	b.n	8006cb4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3730      	adds	r7, #48	; 0x30
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	785a      	ldrb	r2, [r3, #1]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	789a      	ldrb	r2, [r3, #2]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	78da      	ldrb	r2, [r3, #3]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	791a      	ldrb	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	795a      	ldrb	r2, [r3, #5]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	799a      	ldrb	r2, [r3, #6]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	79da      	ldrb	r2, [r3, #7]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	7a1a      	ldrb	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	721a      	strb	r2, [r3, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b087      	sub	sp, #28
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	781a      	ldrb	r2, [r3, #0]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	785a      	ldrb	r2, [r3, #1]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	789a      	ldrb	r2, [r3, #2]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	78da      	ldrb	r2, [r3, #3]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3305      	adds	r3, #5
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	799a      	ldrb	r2, [r3, #6]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	889b      	ldrh	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006d76:	2303      	movs	r3, #3
 8006d78:	75fb      	strb	r3, [r7, #23]
 8006d7a:	e033      	b.n	8006de4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	889b      	ldrh	r3, [r3, #4]
 8006d80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d84:	f023 0307 	bic.w	r3, r3, #7
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	b21a      	sxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	b299      	uxth	r1, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3305      	adds	r3, #5
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	430b      	orrs	r3, r1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d110      	bne.n	8006dd6 <USBH_ParseEPDesc+0xbc>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b299      	uxth	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3305      	adds	r3, #5
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	b21b      	sxth	r3, r3
 8006dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dd2:	b21b      	sxth	r3, r3
 8006dd4:	e001      	b.n	8006dda <USBH_ParseEPDesc+0xc0>
 8006dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b21b      	sxth	r3, r3
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d005      	beq.n	8006e06 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	78db      	ldrb	r3, [r3, #3]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d127      	bne.n	8006e56 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	799b      	ldrb	r3, [r3, #6]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <USBH_ParseEPDesc+0xfc>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	799b      	ldrb	r3, [r3, #6]
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d91f      	bls.n	8006e56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e16:	2303      	movs	r3, #3
 8006e18:	75fb      	strb	r3, [r7, #23]
 8006e1a:	e01c      	b.n	8006e56 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	78db      	ldrb	r3, [r3, #3]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d10a      	bne.n	8006e3e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	799b      	ldrb	r3, [r3, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <USBH_ParseEPDesc+0x11e>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	799b      	ldrb	r3, [r3, #6]
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d90e      	bls.n	8006e56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	75fb      	strb	r3, [r7, #23]
 8006e3c:	e00b      	b.n	8006e56 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	78db      	ldrb	r3, [r3, #3]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d105      	bne.n	8006e56 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	799b      	ldrb	r3, [r3, #6]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e52:	2303      	movs	r3, #3
 8006e54:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d120      	bne.n	8006ebe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	1e9a      	subs	r2, r3, #2
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	bf28      	it	cs
 8006e88:	4613      	movcs	r3, r2
 8006e8a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3302      	adds	r3, #2
 8006e90:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e92:	2300      	movs	r3, #0
 8006e94:	82fb      	strh	r3, [r7, #22]
 8006e96:	e00b      	b.n	8006eb0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e98:	8afb      	ldrh	r3, [r7, #22]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006eaa:	8afb      	ldrh	r3, [r7, #22]
 8006eac:	3302      	adds	r3, #2
 8006eae:	82fb      	strh	r3, [r7, #22]
 8006eb0:	8afa      	ldrh	r2, [r7, #22]
 8006eb2:	8abb      	ldrh	r3, [r7, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d3ef      	bcc.n	8006e98 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	881a      	ldrh	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	789b      	ldrb	r3, [r3, #2]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d002      	beq.n	8006f20 <USBH_CtlReq+0x20>
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d00f      	beq.n	8006f3e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f1e:	e027      	b.n	8006f70 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2202      	movs	r2, #2
 8006f36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3c:	e018      	b.n	8006f70 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f81c 	bl	8006f7c <USBH_HandleControl>
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <USBH_CtlReq+0x54>
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d106      	bne.n	8006f62 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	761a      	strb	r2, [r3, #24]
      break;
 8006f60:	e005      	b.n	8006f6e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d102      	bne.n	8006f6e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	709a      	strb	r2, [r3, #2]
      break;
 8006f6e:	bf00      	nop
  }
  return status;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7e1b      	ldrb	r3, [r3, #24]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	2b0a      	cmp	r3, #10
 8006f94:	f200 8156 	bhi.w	8007244 <USBH_HandleControl+0x2c8>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBH_HandleControl+0x24>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fe7 	.word	0x08006fe7
 8006fa8:	08007051 	.word	0x08007051
 8006fac:	08007077 	.word	0x08007077
 8006fb0:	080070af 	.word	0x080070af
 8006fb4:	080070d9 	.word	0x080070d9
 8006fb8:	0800712b 	.word	0x0800712b
 8006fbc:	0800714d 	.word	0x0800714d
 8006fc0:	08007189 	.word	0x08007189
 8006fc4:	080071af 	.word	0x080071af
 8006fc8:	080071ed 	.word	0x080071ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f103 0110 	add.w	r1, r3, #16
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f943 	bl	8007264 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	761a      	strb	r2, [r3, #24]
      break;
 8006fe4:	e139      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	795b      	ldrb	r3, [r3, #5]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fcc5 	bl	800797c <USBH_LL_GetURBState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d11e      	bne.n	800703a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	7c1b      	ldrb	r3, [r3, #16]
 8007000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007004:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8adb      	ldrh	r3, [r3, #22]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800700e:	7b7b      	ldrb	r3, [r7, #13]
 8007010:	2b80      	cmp	r3, #128	; 0x80
 8007012:	d103      	bne.n	800701c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2203      	movs	r2, #3
 8007018:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800701a:	e115      	b.n	8007248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2205      	movs	r2, #5
 8007020:	761a      	strb	r2, [r3, #24]
      break;
 8007022:	e111      	b.n	8007248 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007024:	7b7b      	ldrb	r3, [r7, #13]
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d103      	bne.n	8007032 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2209      	movs	r2, #9
 800702e:	761a      	strb	r2, [r3, #24]
      break;
 8007030:	e10a      	b.n	8007248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2207      	movs	r2, #7
 8007036:	761a      	strb	r2, [r3, #24]
      break;
 8007038:	e106      	b.n	8007248 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b04      	cmp	r3, #4
 800703e:	d003      	beq.n	8007048 <USBH_HandleControl+0xcc>
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b02      	cmp	r3, #2
 8007044:	f040 8100 	bne.w	8007248 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	220b      	movs	r2, #11
 800704c:	761a      	strb	r2, [r3, #24]
      break;
 800704e:	e0fb      	b.n	8007248 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6899      	ldr	r1, [r3, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	899a      	ldrh	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f93a 	bl	80072e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2204      	movs	r2, #4
 8007072:	761a      	strb	r2, [r3, #24]
      break;
 8007074:	e0f1      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fc7d 	bl	800797c <USBH_LL_GetURBState>
 8007082:	4603      	mov	r3, r0
 8007084:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d102      	bne.n	8007092 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2209      	movs	r2, #9
 8007090:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b05      	cmp	r3, #5
 8007096:	d102      	bne.n	800709e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007098:	2303      	movs	r3, #3
 800709a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800709c:	e0d6      	b.n	800724c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	f040 80d3 	bne.w	800724c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220b      	movs	r2, #11
 80070aa:	761a      	strb	r2, [r3, #24]
      break;
 80070ac:	e0ce      	b.n	800724c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6899      	ldr	r1, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	899a      	ldrh	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	795b      	ldrb	r3, [r3, #5]
 80070ba:	2001      	movs	r0, #1
 80070bc:	9000      	str	r0, [sp, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8ea 	bl	8007298 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2206      	movs	r2, #6
 80070d4:	761a      	strb	r2, [r3, #24]
      break;
 80070d6:	e0c0      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	795b      	ldrb	r3, [r3, #5]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fc4c 	bl	800797c <USBH_LL_GetURBState>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d103      	bne.n	80070f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2207      	movs	r2, #7
 80070f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070f4:	e0ac      	b.n	8007250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d105      	bne.n	8007108 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	220c      	movs	r2, #12
 8007100:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007102:	2303      	movs	r3, #3
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e0a3      	b.n	8007250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d103      	bne.n	8007116 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2205      	movs	r2, #5
 8007112:	761a      	strb	r2, [r3, #24]
      break;
 8007114:	e09c      	b.n	8007250 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b04      	cmp	r3, #4
 800711a:	f040 8099 	bne.w	8007250 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	220b      	movs	r2, #11
 8007122:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007124:	2302      	movs	r3, #2
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e092      	b.n	8007250 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f8d5 	bl	80072e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2208      	movs	r2, #8
 8007148:	761a      	strb	r2, [r3, #24]

      break;
 800714a:	e086      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	791b      	ldrb	r3, [r3, #4]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc12 	bl	800797c <USBH_LL_GetURBState>
 8007158:	4603      	mov	r3, r0
 800715a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d105      	bne.n	800716e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	220d      	movs	r2, #13
 8007166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800716c:	e072      	b.n	8007254 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b04      	cmp	r3, #4
 8007172:	d103      	bne.n	800717c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	220b      	movs	r2, #11
 8007178:	761a      	strb	r2, [r3, #24]
      break;
 800717a:	e06b      	b.n	8007254 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b05      	cmp	r3, #5
 8007180:	d168      	bne.n	8007254 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007182:	2303      	movs	r3, #3
 8007184:	73fb      	strb	r3, [r7, #15]
      break;
 8007186:	e065      	b.n	8007254 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	2201      	movs	r2, #1
 800718e:	9200      	str	r2, [sp, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	2100      	movs	r1, #0
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f87f 	bl	8007298 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	220a      	movs	r2, #10
 80071aa:	761a      	strb	r2, [r3, #24]
      break;
 80071ac:	e055      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	795b      	ldrb	r3, [r3, #5]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fbe1 	bl	800797c <USBH_LL_GetURBState>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	220d      	movs	r2, #13
 80071cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071ce:	e043      	b.n	8007258 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d103      	bne.n	80071de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2209      	movs	r2, #9
 80071da:	761a      	strb	r2, [r3, #24]
      break;
 80071dc:	e03c      	b.n	8007258 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d139      	bne.n	8007258 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	220b      	movs	r2, #11
 80071e8:	761a      	strb	r2, [r3, #24]
      break;
 80071ea:	e035      	b.n	8007258 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7e5b      	ldrb	r3, [r3, #25]
 80071f0:	3301      	adds	r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	765a      	strb	r2, [r3, #25]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7e5b      	ldrb	r3, [r3, #25]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d806      	bhi.n	800720e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800720c:	e025      	b.n	800725a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007214:	2106      	movs	r1, #6
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	795b      	ldrb	r3, [r3, #5]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f90c 	bl	8007444 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	791b      	ldrb	r3, [r3, #4]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f906 	bl	8007444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	73fb      	strb	r3, [r7, #15]
      break;
 8007242:	e00a      	b.n	800725a <USBH_HandleControl+0x2de>

    default:
      break;
 8007244:	bf00      	nop
 8007246:	e008      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007248:	bf00      	nop
 800724a:	e006      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 800724c:	bf00      	nop
 800724e:	e004      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007250:	bf00      	nop
 8007252:	e002      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007258:	bf00      	nop
  }

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af04      	add	r7, sp, #16
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007272:	79f9      	ldrb	r1, [r7, #7]
 8007274:	2300      	movs	r3, #0
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	2308      	movs	r3, #8
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	2200      	movs	r2, #0
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fb46 	bl	800791a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4611      	mov	r1, r2
 80072a4:	461a      	mov	r2, r3
 80072a6:	460b      	mov	r3, r1
 80072a8:	80fb      	strh	r3, [r7, #6]
 80072aa:	4613      	mov	r3, r2
 80072ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072bc:	7979      	ldrb	r1, [r7, #5]
 80072be:	7e3b      	ldrb	r3, [r7, #24]
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	9302      	str	r3, [sp, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2301      	movs	r3, #1
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	2200      	movs	r2, #0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fb21 	bl	800791a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b088      	sub	sp, #32
 80072e6:	af04      	add	r7, sp, #16
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	4611      	mov	r1, r2
 80072ee:	461a      	mov	r2, r3
 80072f0:	460b      	mov	r3, r1
 80072f2:	80fb      	strh	r3, [r7, #6]
 80072f4:	4613      	mov	r3, r2
 80072f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072f8:	7979      	ldrb	r1, [r7, #5]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	2301      	movs	r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	2201      	movs	r2, #1
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fb03 	bl	800791a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007314:	2300      	movs	r3, #0

}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b088      	sub	sp, #32
 8007322:	af04      	add	r7, sp, #16
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4611      	mov	r1, r2
 800732a:	461a      	mov	r2, r3
 800732c:	460b      	mov	r3, r1
 800732e:	80fb      	strh	r3, [r7, #6]
 8007330:	4613      	mov	r3, r2
 8007332:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007342:	7979      	ldrb	r1, [r7, #5]
 8007344:	7e3b      	ldrb	r3, [r7, #24]
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	2301      	movs	r3, #1
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	2302      	movs	r3, #2
 8007356:	2200      	movs	r2, #0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fade 	bl	800791a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af04      	add	r7, sp, #16
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	460b      	mov	r3, r1
 8007378:	80fb      	strh	r3, [r7, #6]
 800737a:	4613      	mov	r3, r2
 800737c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800737e:	7979      	ldrb	r1, [r7, #5]
 8007380:	2300      	movs	r3, #0
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	2301      	movs	r3, #1
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2302      	movs	r3, #2
 8007392:	2201      	movs	r2, #1
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fac0 	bl	800791a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af04      	add	r7, sp, #16
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	70fb      	strb	r3, [r7, #3]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70bb      	strb	r3, [r7, #2]
 80073ba:	4613      	mov	r3, r2
 80073bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073be:	7878      	ldrb	r0, [r7, #1]
 80073c0:	78ba      	ldrb	r2, [r7, #2]
 80073c2:	78f9      	ldrb	r1, [r7, #3]
 80073c4:	8b3b      	ldrh	r3, [r7, #24]
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	7d3b      	ldrb	r3, [r7, #20]
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	7c3b      	ldrb	r3, [r7, #16]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4603      	mov	r3, r0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa53 	bl	800787e <USBH_LL_OpenPipe>

  return USBH_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa72 	bl	80078dc <USBH_LL_ClosePipe>

  return USBH_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f836 	bl	8007480 <USBH_GetFreePipe>
 8007414:	4603      	mov	r3, r0
 8007416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800741e:	4293      	cmp	r3, r2
 8007420:	d00a      	beq.n	8007438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	89fb      	ldrh	r3, [r7, #14]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	33e0      	adds	r3, #224	; 0xe0
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007438:	89fb      	ldrh	r3, [r7, #14]
 800743a:	b2db      	uxtb	r3, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	2b0f      	cmp	r3, #15
 8007454:	d80d      	bhi.n	8007472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	33e0      	adds	r3, #224	; 0xe0
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	33e0      	adds	r3, #224	; 0xe0
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
 8007490:	e00f      	b.n	80074b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	33e0      	adds	r3, #224	; 0xe0
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	e007      	b.n	80074bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	3301      	adds	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b0f      	cmp	r3, #15
 80074b6:	d9ec      	bls.n	8007492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074cc:	2201      	movs	r2, #1
 80074ce:	490e      	ldr	r1, [pc, #56]	; (8007508 <MX_USB_HOST_Init+0x40>)
 80074d0:	480e      	ldr	r0, [pc, #56]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074d2:	f7fe fba7 	bl	8005c24 <USBH_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074dc:	f7f9 fa44 	bl	8000968 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80074e0:	490b      	ldr	r1, [pc, #44]	; (8007510 <MX_USB_HOST_Init+0x48>)
 80074e2:	480a      	ldr	r0, [pc, #40]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074e4:	f7fe fc2c 	bl	8005d40 <USBH_RegisterClass>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074ee:	f7f9 fa3b 	bl	8000968 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074f2:	4806      	ldr	r0, [pc, #24]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074f4:	f7fe fcb0 	bl	8005e58 <USBH_Start>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80074fe:	f7f9 fa33 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	08007529 	.word	0x08007529
 800750c:	200001f0 	.word	0x200001f0
 8007510:	2000000c 	.word	0x2000000c

08007514 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <MX_USB_HOST_Process+0x10>)
 800751a:	f7fe fcad 	bl	8005e78 <USBH_Process>
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200001f0 	.word	0x200001f0

08007528 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	3b01      	subs	r3, #1
 8007538:	2b04      	cmp	r3, #4
 800753a:	d819      	bhi.n	8007570 <USBH_UserProcess+0x48>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBH_UserProcess+0x1c>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007571 	.word	0x08007571
 8007548:	08007561 	.word	0x08007561
 800754c:	08007571 	.word	0x08007571
 8007550:	08007569 	.word	0x08007569
 8007554:	08007559 	.word	0x08007559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <USBH_UserProcess+0x58>)
 800755a:	2203      	movs	r2, #3
 800755c:	701a      	strb	r2, [r3, #0]
  break;
 800755e:	e008      	b.n	8007572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <USBH_UserProcess+0x58>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
  break;
 8007566:	e004      	b.n	8007572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <USBH_UserProcess+0x58>)
 800756a:	2201      	movs	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
  break;
 800756e:	e000      	b.n	8007572 <USBH_UserProcess+0x4a>

  default:
  break;
 8007570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	200005c8 	.word	0x200005c8

08007584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a4:	d147      	bne.n	8007636 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	4b25      	ldr	r3, [pc, #148]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6313      	str	r3, [r2, #48]	; 0x30
 80075b6:	4b22      	ldr	r3, [pc, #136]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80075c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	4619      	mov	r1, r3
 80075d6:	481b      	ldr	r0, [pc, #108]	; (8007644 <HAL_HCD_MspInit+0xc0>)
 80075d8:	f7f9 fda0 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e2:	2302      	movs	r3, #2
 80075e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ea:	2303      	movs	r3, #3
 80075ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075ee:	230a      	movs	r3, #10
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f2:	f107 0314 	add.w	r3, r7, #20
 80075f6:	4619      	mov	r1, r3
 80075f8:	4812      	ldr	r0, [pc, #72]	; (8007644 <HAL_HCD_MspInit+0xc0>)
 80075fa:	f7f9 fd8f 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	6353      	str	r3, [r2, #52]	; 0x34
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007618:	6453      	str	r3, [r2, #68]	; 0x44
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	2043      	movs	r0, #67	; 0x43
 800762c:	f7f9 fd3f 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007630:	2043      	movs	r0, #67	; 0x43
 8007632:	f7f9 fd58 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007636:	bf00      	nop
 8007638:	3728      	adds	r7, #40	; 0x28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40023800 	.word	0x40023800
 8007644:	40020000 	.word	0x40020000

08007648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe ffed 	bl	8006636 <USBH_LL_IncTimer>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f825 	bl	80066c2 <USBH_LL_Connect>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f82e 	bl	80066f0 <USBH_LL_Disconnect>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
 80076a8:	4613      	mov	r3, r2
 80076aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe ffdf 	bl	800668a <USBH_LL_PortEnabled>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe ffdf 	bl	80066a6 <USBH_LL_PortDisabled>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d12a      	bne.n	8007758 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007702:	4a18      	ldr	r2, [pc, #96]	; (8007764 <USBH_LL_Init+0x74>)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <USBH_LL_Init+0x74>)
 800770e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <USBH_LL_Init+0x74>)
 8007714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007718:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <USBH_LL_Init+0x74>)
 800771c:	2208      	movs	r2, #8
 800771e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <USBH_LL_Init+0x74>)
 8007722:	2201      	movs	r2, #1
 8007724:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <USBH_LL_Init+0x74>)
 8007728:	2200      	movs	r2, #0
 800772a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800772c:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <USBH_LL_Init+0x74>)
 800772e:	2202      	movs	r2, #2
 8007730:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <USBH_LL_Init+0x74>)
 8007734:	2200      	movs	r2, #0
 8007736:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007738:	480a      	ldr	r0, [pc, #40]	; (8007764 <USBH_LL_Init+0x74>)
 800773a:	f7f9 fea6 	bl	800148a <HAL_HCD_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007744:	f7f9 f910 	bl	8000968 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007748:	4806      	ldr	r0, [pc, #24]	; (8007764 <USBH_LL_Init+0x74>)
 800774a:	f7fa fa8a 	bl	8001c62 <HAL_HCD_GetCurrentFrame>
 800774e:	4603      	mov	r3, r0
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fe ff60 	bl	8006618 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200005cc 	.word	0x200005cc

08007768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800777e:	4618      	mov	r0, r3
 8007780:	f7fa f9f9 	bl	8001b76 <HAL_HCD_Start>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f95c 	bl	8007a48 <USBH_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fa fa01 	bl	8001bbc <HAL_HCD_Stop>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f941 	bl	8007a48 <USBH_Get_USB_Status>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fa fa49 	bl	8001c7e <HAL_HCD_GetCurrentSpeed>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d00c      	beq.n	800780c <USBH_LL_GetSpeed+0x38>
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d80d      	bhi.n	8007812 <USBH_LL_GetSpeed+0x3e>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <USBH_LL_GetSpeed+0x2c>
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d003      	beq.n	8007806 <USBH_LL_GetSpeed+0x32>
 80077fe:	e008      	b.n	8007812 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
    break;
 8007804:	e008      	b.n	8007818 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007806:	2301      	movs	r3, #1
 8007808:	73fb      	strb	r3, [r7, #15]
    break;
 800780a:	e005      	b.n	8007818 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800780c:	2302      	movs	r3, #2
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	e002      	b.n	8007818 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
    break;
 8007816:	bf00      	nop
  }
  return  speed;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa f9dc 	bl	8001bf6 <HAL_HCD_ResetPort>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f8ff 	bl	8007a48 <USBH_Get_USB_Status>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa f9e3 	bl	8001c3a <HAL_HCD_HC_GetXferCount>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800787e:	b590      	push	{r4, r7, lr}
 8007880:	b089      	sub	sp, #36	; 0x24
 8007882:	af04      	add	r7, sp, #16
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	461a      	mov	r2, r3
 800788c:	4603      	mov	r3, r0
 800788e:	70fb      	strb	r3, [r7, #3]
 8007890:	460b      	mov	r3, r1
 8007892:	70bb      	strb	r3, [r7, #2]
 8007894:	4613      	mov	r3, r2
 8007896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078a6:	787c      	ldrb	r4, [r7, #1]
 80078a8:	78ba      	ldrb	r2, [r7, #2]
 80078aa:	78f9      	ldrb	r1, [r7, #3]
 80078ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4623      	mov	r3, r4
 80078be:	f7f9 fe46 	bl	800154e <HAL_HCD_HC_Init>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f8bd 	bl	8007a48 <USBH_Get_USB_Status>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}

080078dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7f9 feb6 	bl	800166c <HAL_HCD_HC_Halt>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f89e 	bl	8007a48 <USBH_Get_USB_Status>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007910:	7bbb      	ldrb	r3, [r7, #14]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b089      	sub	sp, #36	; 0x24
 800791e:	af04      	add	r7, sp, #16
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	461a      	mov	r2, r3
 8007928:	4603      	mov	r3, r0
 800792a:	70fb      	strb	r3, [r7, #3]
 800792c:	460b      	mov	r3, r1
 800792e:	70bb      	strb	r3, [r7, #2]
 8007930:	4613      	mov	r3, r2
 8007932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007942:	787c      	ldrb	r4, [r7, #1]
 8007944:	78ba      	ldrb	r2, [r7, #2]
 8007946:	78f9      	ldrb	r1, [r7, #3]
 8007948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007950:	9302      	str	r3, [sp, #8]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4623      	mov	r3, r4
 800795e:	f7f9 fea9 	bl	80016b4 <HAL_HCD_HC_SubmitRequest>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f86d 	bl	8007a48 <USBH_Get_USB_Status>
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007972:	7bbb      	ldrb	r3, [r7, #14]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bd90      	pop	{r4, r7, pc}

0800797c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f7fa f93d 	bl	8001c12 <HAL_HCD_HC_GetURBState>
 8007998:	4603      	mov	r3, r0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d103      	bne.n	80079c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f870 	bl	8007aa0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079c0:	20c8      	movs	r0, #200	; 0xc8
 80079c2:	f7f9 fa75 	bl	8000eb0 <HAL_Delay>
  return USBH_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
 80079dc:	4613      	mov	r3, r2
 80079de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	212c      	movs	r1, #44	; 0x2c
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	333b      	adds	r3, #59	; 0x3b
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d009      	beq.n	8007a10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	212c      	movs	r1, #44	; 0x2c
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	3354      	adds	r3, #84	; 0x54
 8007a0a:	78ba      	ldrb	r2, [r7, #2]
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e008      	b.n	8007a22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	212c      	movs	r1, #44	; 0x2c
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3355      	adds	r3, #85	; 0x55
 8007a1e:	78ba      	ldrb	r2, [r7, #2]
 8007a20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7f9 fa39 	bl	8000eb0 <HAL_Delay>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d817      	bhi.n	8007a8c <USBH_Get_USB_Status+0x44>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBH_Get_USB_Status+0x1c>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a7b 	.word	0x08007a7b
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007a87 	.word	0x08007a87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	e00b      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7e:	e008      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
    break;
 8007a84:	e005      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8a:	e002      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a90:	bf00      	nop
  }
  return usb_status;
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	e001      	b.n	8007abe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4803      	ldr	r0, [pc, #12]	; (8007ad4 <MX_DriverVbusFS+0x34>)
 8007ac6:	f7f9 fcad 	bl	8001424 <HAL_GPIO_WritePin>
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40020800 	.word	0x40020800

08007ad8 <__errno>:
 8007ad8:	4b01      	ldr	r3, [pc, #4]	; (8007ae0 <__errno+0x8>)
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	2000002c 	.word	0x2000002c

08007ae4 <__libc_init_array>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4d0d      	ldr	r5, [pc, #52]	; (8007b1c <__libc_init_array+0x38>)
 8007ae8:	4c0d      	ldr	r4, [pc, #52]	; (8007b20 <__libc_init_array+0x3c>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	2600      	movs	r6, #0
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	d109      	bne.n	8007b08 <__libc_init_array+0x24>
 8007af4:	4d0b      	ldr	r5, [pc, #44]	; (8007b24 <__libc_init_array+0x40>)
 8007af6:	4c0c      	ldr	r4, [pc, #48]	; (8007b28 <__libc_init_array+0x44>)
 8007af8:	f000 f92e 	bl	8007d58 <_init>
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	2600      	movs	r6, #0
 8007b02:	42a6      	cmp	r6, r4
 8007b04:	d105      	bne.n	8007b12 <__libc_init_array+0x2e>
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0c:	4798      	blx	r3
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7ee      	b.n	8007af0 <__libc_init_array+0xc>
 8007b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b16:	4798      	blx	r3
 8007b18:	3601      	adds	r6, #1
 8007b1a:	e7f2      	b.n	8007b02 <__libc_init_array+0x1e>
 8007b1c:	08007d94 	.word	0x08007d94
 8007b20:	08007d94 	.word	0x08007d94
 8007b24:	08007d94 	.word	0x08007d94
 8007b28:	08007d98 	.word	0x08007d98

08007b2c <malloc>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <malloc+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f000 b87f 	b.w	8007c34 <_malloc_r>
 8007b36:	bf00      	nop
 8007b38:	2000002c 	.word	0x2000002c

08007b3c <free>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <free+0xc>)
 8007b3e:	4601      	mov	r1, r0
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f000 b80b 	b.w	8007b5c <_free_r>
 8007b46:	bf00      	nop
 8007b48:	2000002c 	.word	0x2000002c

08007b4c <memset>:
 8007b4c:	4402      	add	r2, r0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d100      	bne.n	8007b56 <memset+0xa>
 8007b54:	4770      	bx	lr
 8007b56:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5a:	e7f9      	b.n	8007b50 <memset+0x4>

08007b5c <_free_r>:
 8007b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d044      	beq.n	8007bec <_free_r+0x90>
 8007b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b66:	9001      	str	r0, [sp, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b6e:	bfb8      	it	lt
 8007b70:	18e4      	addlt	r4, r4, r3
 8007b72:	f000 f8e3 	bl	8007d3c <__malloc_lock>
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <_free_r+0x94>)
 8007b78:	9801      	ldr	r0, [sp, #4]
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	b933      	cbnz	r3, 8007b8c <_free_r+0x30>
 8007b7e:	6063      	str	r3, [r4, #4]
 8007b80:	6014      	str	r4, [r2, #0]
 8007b82:	b003      	add	sp, #12
 8007b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b88:	f000 b8de 	b.w	8007d48 <__malloc_unlock>
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	d908      	bls.n	8007ba2 <_free_r+0x46>
 8007b90:	6825      	ldr	r5, [r4, #0]
 8007b92:	1961      	adds	r1, r4, r5
 8007b94:	428b      	cmp	r3, r1
 8007b96:	bf01      	itttt	eq
 8007b98:	6819      	ldreq	r1, [r3, #0]
 8007b9a:	685b      	ldreq	r3, [r3, #4]
 8007b9c:	1949      	addeq	r1, r1, r5
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	e7ed      	b.n	8007b7e <_free_r+0x22>
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b10b      	cbz	r3, 8007bac <_free_r+0x50>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x46>
 8007bac:	6811      	ldr	r1, [r2, #0]
 8007bae:	1855      	adds	r5, r2, r1
 8007bb0:	42a5      	cmp	r5, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x70>
 8007bb4:	6824      	ldr	r4, [r4, #0]
 8007bb6:	4421      	add	r1, r4
 8007bb8:	1854      	adds	r4, r2, r1
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	d1e0      	bne.n	8007b82 <_free_r+0x26>
 8007bc0:	681c      	ldr	r4, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	6053      	str	r3, [r2, #4]
 8007bc6:	4421      	add	r1, r4
 8007bc8:	6011      	str	r1, [r2, #0]
 8007bca:	e7da      	b.n	8007b82 <_free_r+0x26>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x78>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	e7d6      	b.n	8007b82 <_free_r+0x26>
 8007bd4:	6825      	ldr	r5, [r4, #0]
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1949      	addeq	r1, r1, r5
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	6054      	str	r4, [r2, #4]
 8007bea:	e7ca      	b.n	8007b82 <_free_r+0x26>
 8007bec:	b003      	add	sp, #12
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	200008d0 	.word	0x200008d0

08007bf4 <sbrk_aligned>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4e0e      	ldr	r6, [pc, #56]	; (8007c30 <sbrk_aligned+0x3c>)
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	6831      	ldr	r1, [r6, #0]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b911      	cbnz	r1, 8007c06 <sbrk_aligned+0x12>
 8007c00:	f000 f88c 	bl	8007d1c <_sbrk_r>
 8007c04:	6030      	str	r0, [r6, #0]
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f887 	bl	8007d1c <_sbrk_r>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d00a      	beq.n	8007c28 <sbrk_aligned+0x34>
 8007c12:	1cc4      	adds	r4, r0, #3
 8007c14:	f024 0403 	bic.w	r4, r4, #3
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d007      	beq.n	8007c2c <sbrk_aligned+0x38>
 8007c1c:	1a21      	subs	r1, r4, r0
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f87c 	bl	8007d1c <_sbrk_r>
 8007c24:	3001      	adds	r0, #1
 8007c26:	d101      	bne.n	8007c2c <sbrk_aligned+0x38>
 8007c28:	f04f 34ff 	mov.w	r4, #4294967295
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	200008d4 	.word	0x200008d4

08007c34 <_malloc_r>:
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	1ccd      	adds	r5, r1, #3
 8007c3a:	f025 0503 	bic.w	r5, r5, #3
 8007c3e:	3508      	adds	r5, #8
 8007c40:	2d0c      	cmp	r5, #12
 8007c42:	bf38      	it	cc
 8007c44:	250c      	movcc	r5, #12
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	4607      	mov	r7, r0
 8007c4a:	db01      	blt.n	8007c50 <_malloc_r+0x1c>
 8007c4c:	42a9      	cmp	r1, r5
 8007c4e:	d905      	bls.n	8007c5c <_malloc_r+0x28>
 8007c50:	230c      	movs	r3, #12
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	2600      	movs	r6, #0
 8007c56:	4630      	mov	r0, r6
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	4e2e      	ldr	r6, [pc, #184]	; (8007d18 <_malloc_r+0xe4>)
 8007c5e:	f000 f86d 	bl	8007d3c <__malloc_lock>
 8007c62:	6833      	ldr	r3, [r6, #0]
 8007c64:	461c      	mov	r4, r3
 8007c66:	bb34      	cbnz	r4, 8007cb6 <_malloc_r+0x82>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f7ff ffc2 	bl	8007bf4 <sbrk_aligned>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	4604      	mov	r4, r0
 8007c74:	d14d      	bne.n	8007d12 <_malloc_r+0xde>
 8007c76:	6834      	ldr	r4, [r6, #0]
 8007c78:	4626      	mov	r6, r4
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d140      	bne.n	8007d00 <_malloc_r+0xcc>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	4631      	mov	r1, r6
 8007c82:	4638      	mov	r0, r7
 8007c84:	eb04 0803 	add.w	r8, r4, r3
 8007c88:	f000 f848 	bl	8007d1c <_sbrk_r>
 8007c8c:	4580      	cmp	r8, r0
 8007c8e:	d13a      	bne.n	8007d06 <_malloc_r+0xd2>
 8007c90:	6821      	ldr	r1, [r4, #0]
 8007c92:	3503      	adds	r5, #3
 8007c94:	1a6d      	subs	r5, r5, r1
 8007c96:	f025 0503 	bic.w	r5, r5, #3
 8007c9a:	3508      	adds	r5, #8
 8007c9c:	2d0c      	cmp	r5, #12
 8007c9e:	bf38      	it	cc
 8007ca0:	250c      	movcc	r5, #12
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ffa5 	bl	8007bf4 <sbrk_aligned>
 8007caa:	3001      	adds	r0, #1
 8007cac:	d02b      	beq.n	8007d06 <_malloc_r+0xd2>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	442b      	add	r3, r5
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	e00e      	b.n	8007cd4 <_malloc_r+0xa0>
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	1b52      	subs	r2, r2, r5
 8007cba:	d41e      	bmi.n	8007cfa <_malloc_r+0xc6>
 8007cbc:	2a0b      	cmp	r2, #11
 8007cbe:	d916      	bls.n	8007cee <_malloc_r+0xba>
 8007cc0:	1961      	adds	r1, r4, r5
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	bf18      	it	ne
 8007cc8:	6059      	strne	r1, [r3, #4]
 8007cca:	6863      	ldr	r3, [r4, #4]
 8007ccc:	bf08      	it	eq
 8007cce:	6031      	streq	r1, [r6, #0]
 8007cd0:	5162      	str	r2, [r4, r5]
 8007cd2:	604b      	str	r3, [r1, #4]
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f104 060b 	add.w	r6, r4, #11
 8007cda:	f000 f835 	bl	8007d48 <__malloc_unlock>
 8007cde:	f026 0607 	bic.w	r6, r6, #7
 8007ce2:	1d23      	adds	r3, r4, #4
 8007ce4:	1af2      	subs	r2, r6, r3
 8007ce6:	d0b6      	beq.n	8007c56 <_malloc_r+0x22>
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	50a3      	str	r3, [r4, r2]
 8007cec:	e7b3      	b.n	8007c56 <_malloc_r+0x22>
 8007cee:	6862      	ldr	r2, [r4, #4]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	bf0c      	ite	eq
 8007cf4:	6032      	streq	r2, [r6, #0]
 8007cf6:	605a      	strne	r2, [r3, #4]
 8007cf8:	e7ec      	b.n	8007cd4 <_malloc_r+0xa0>
 8007cfa:	4623      	mov	r3, r4
 8007cfc:	6864      	ldr	r4, [r4, #4]
 8007cfe:	e7b2      	b.n	8007c66 <_malloc_r+0x32>
 8007d00:	4634      	mov	r4, r6
 8007d02:	6876      	ldr	r6, [r6, #4]
 8007d04:	e7b9      	b.n	8007c7a <_malloc_r+0x46>
 8007d06:	230c      	movs	r3, #12
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f000 f81c 	bl	8007d48 <__malloc_unlock>
 8007d10:	e7a1      	b.n	8007c56 <_malloc_r+0x22>
 8007d12:	6025      	str	r5, [r4, #0]
 8007d14:	e7de      	b.n	8007cd4 <_malloc_r+0xa0>
 8007d16:	bf00      	nop
 8007d18:	200008d0 	.word	0x200008d0

08007d1c <_sbrk_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d06      	ldr	r5, [pc, #24]	; (8007d38 <_sbrk_r+0x1c>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	f7f8 ffde 	bl	8000ce8 <_sbrk>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_sbrk_r+0x1a>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_sbrk_r+0x1a>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	200008d8 	.word	0x200008d8

08007d3c <__malloc_lock>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__malloc_lock+0x8>)
 8007d3e:	f000 b809 	b.w	8007d54 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	200008dc 	.word	0x200008dc

08007d48 <__malloc_unlock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_unlock+0x8>)
 8007d4a:	f000 b804 	b.w	8007d56 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200008dc 	.word	0x200008dc

08007d54 <__retarget_lock_acquire_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <__retarget_lock_release_recursive>:
 8007d56:	4770      	bx	lr

08007d58 <_init>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	bf00      	nop
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr

08007d64 <_fini>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr
