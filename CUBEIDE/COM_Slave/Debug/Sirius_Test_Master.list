
Sirius_Test_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800958c  0800958c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009594  08009594  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009594  08009594  00019594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800959c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f08  20000090  0800962c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  0800962c  00020f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f6b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cac  00000000  00000000  0003a02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019404  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afad  00000000  00000000  0005972c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f79  00000000  00000000  000746d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005524  00000000  00000000  001056a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009558 	.word	0x08009558

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009558 	.word	0x08009558

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fcf0 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f824 	bl	8000530 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f88a 	bl	8000600 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f990 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f8a6 	bl	8000640 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f4:	f000 f8d2 	bl	800069c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f8:	f000 f8fe 	bl	80006f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f92c 	bl	8000758 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000500:	f008 fbe2 	bl	8008cc8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f95a 	bl	80007bc <MX_USART2_UART_Init>
  while (1)
  {
	  //HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
	  //HAL_Delay(1000);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000508:	f008 fc04 	bl	8008d14 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
 800050c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000510:	f240 6274 	movw	r2, #1652	; 0x674
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <main+0x4c>)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <main+0x50>)
 8000518:	f004 f90b 	bl	8004732 <HAL_SPI_Receive>
    HAL_Delay(2000);
 800051c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000520:	f000 fd42 	bl	8000fa8 <HAL_Delay>
    MX_USB_HOST_Process();
 8000524:	e7f0      	b.n	8000508 <main+0x2c>
 8000526:	bf00      	nop
 8000528:	2000022c 	.word	0x2000022c
 800052c:	20000190 	.word	0x20000190

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 ff04 	bl	800934c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005a4:	23c0      	movs	r3, #192	; 0xc0
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fa4b 	bl	8003a50 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f9f4 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2103      	movs	r1, #3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fcad 	bl	8003f40 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 f9de 	bl	80009ac <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000616:	2301      	movs	r3, #1
 8000618:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800061a:	23c8      	movs	r3, #200	; 0xc8
 800061c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800061e:	2305      	movs	r3, #5
 8000620:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fea9 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000634:	f000 f9ba 	bl	80009ac <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f002 fc03 	bl	8002e88 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f990 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000ac 	.word	0x200000ac
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2S2_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2S2_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2S2_Init+0x50>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2S2_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_I2S2_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2S2_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2S2_Init+0x50>)
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <MX_I2S2_Init+0x58>)
 80006c4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2S2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2S2_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2S2_Init+0x50>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2S2_Init+0x50>)
 80006da:	f002 fd19 	bl	8003110 <HAL_I2S_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 f962 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000100 	.word	0x20000100
 80006f0:	40003800 	.word	0x40003800
 80006f4:	00017700 	.word	0x00017700

080006f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_I2S3_Init+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S3_Init+0x5c>)
 8000722:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2S3_Init+0x54>)
 8000738:	f002 fcea 	bl	8003110 <HAL_I2S_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000742:	f000 f933 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000148 	.word	0x20000148
 8000750:	40003c00 	.word	0x40003c00
 8000754:	00017700 	.word	0x00017700

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_SPI1_Init+0x5c>)
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x60>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x5c>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x5c>)
 8000782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000786:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x5c>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x5c>)
 80007a2:	f003 ff3d 	bl	8004620 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f8fe 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000190 	.word	0x20000190
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f004 fb80 	bl	8004ef8 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8d5 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001e8 	.word	0x200001e8
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b5b      	ldr	r3, [pc, #364]	; (8000998 <MX_GPIO_Init+0x188>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5a      	ldr	r2, [pc, #360]	; (8000998 <MX_GPIO_Init+0x188>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b58      	ldr	r3, [pc, #352]	; (8000998 <MX_GPIO_Init+0x188>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b54      	ldr	r3, [pc, #336]	; (8000998 <MX_GPIO_Init+0x188>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a53      	ldr	r2, [pc, #332]	; (8000998 <MX_GPIO_Init+0x188>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b51      	ldr	r3, [pc, #324]	; (8000998 <MX_GPIO_Init+0x188>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <MX_GPIO_Init+0x188>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4c      	ldr	r2, [pc, #304]	; (8000998 <MX_GPIO_Init+0x188>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <MX_GPIO_Init+0x188>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <MX_GPIO_Init+0x188>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a45      	ldr	r2, [pc, #276]	; (8000998 <MX_GPIO_Init+0x188>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <MX_GPIO_Init+0x188>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <MX_GPIO_Init+0x188>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <MX_GPIO_Init+0x188>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_GPIO_Init+0x188>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_GPIO_Init+0x188>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a37      	ldr	r2, [pc, #220]	; (8000998 <MX_GPIO_Init+0x188>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x188>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4832      	ldr	r0, [pc, #200]	; (800099c <MX_GPIO_Init+0x18c>)
 80008d4:	f000 feb4 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4830      	ldr	r0, [pc, #192]	; (80009a0 <MX_GPIO_Init+0x190>)
 80008de:	f000 feaf 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	482e      	ldr	r0, [pc, #184]	; (80009a4 <MX_GPIO_Init+0x194>)
 80008ea:	f000 fea9 	bl	8001640 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008ee:	2304      	movs	r3, #4
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <MX_GPIO_Init+0x18c>)
 8000902:	f000 fd19 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481f      	ldr	r0, [pc, #124]	; (800099c <MX_GPIO_Init+0x18c>)
 800091e:	f000 fd0b 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000922:	2332      	movs	r3, #50	; 0x32
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000926:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4819      	ldr	r0, [pc, #100]	; (800099c <MX_GPIO_Init+0x18c>)
 8000938:	f000 fcfe 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <MX_GPIO_Init+0x190>)
 8000954:	f000 fcf0 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_GPIO_Init+0x198>)
 800096e:	f000 fce3 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000976:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_GPIO_Init+0x194>)
 800098c:	f000 fcd4 	bl	8001338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3730      	adds	r7, #48	; 0x30
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40021000 	.word	0x40021000
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020c00 	.word	0x40020c00
 80009a8:	40020000 	.word	0x40020000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f6:	2007      	movs	r0, #7
 80009f8:	f000 fbca 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_I2C_MspInit+0x84>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12c      	bne.n	8000a84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <HAL_I2C_MspInit+0x8c>)
 8000a64:	f000 fc68 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400

08000a98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a59      	ldr	r2, [pc, #356]	; (8000c1c <HAL_I2S_MspInit+0x184>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d15b      	bne.n	8000b72 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
 8000abe:	4b58      	ldr	r3, [pc, #352]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	4b51      	ldr	r3, [pc, #324]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b1e:	2306      	movs	r3, #6
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	483e      	ldr	r0, [pc, #248]	; (8000c24 <HAL_I2S_MspInit+0x18c>)
 8000b2a:	f000 fc05 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4836      	ldr	r0, [pc, #216]	; (8000c24 <HAL_I2S_MspInit+0x18c>)
 8000b4a:	f000 fbf5 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b60:	2305      	movs	r3, #5
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482f      	ldr	r0, [pc, #188]	; (8000c28 <HAL_I2S_MspInit+0x190>)
 8000b6c:	f000 fbe4 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b70:	e04f      	b.n	8000c12 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <HAL_I2S_MspInit+0x194>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d14a      	bne.n	8000c12 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_I2S_MspInit+0x188>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be0:	2306      	movs	r3, #6
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4811      	ldr	r0, [pc, #68]	; (8000c30 <HAL_I2S_MspInit+0x198>)
 8000bec:	f000 fba4 	bl	8001338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bf0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c02:	2306      	movs	r3, #6
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_I2S_MspInit+0x18c>)
 8000c0e:	f000 fb93 	bl	8001338 <HAL_GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40003800 	.word	0x40003800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_SPI_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c8e:	23e0      	movs	r3, #224	; 0xe0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_SPI_MspInit+0x8c>)
 8000caa:	f000 fb45 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d133      	bne.n	8000d4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d1e:	2360      	movs	r3, #96	; 0x60
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_UART_MspInit+0x9c>)
 8000d3a:	f000 fafd 	bl	8001338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2026      	movs	r0, #38	; 0x26
 8000d44:	f000 fa2f 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d48:	2026      	movs	r0, #38	; 0x26
 8000d4a:	f000 fa48 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8da 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	f004 f8e9 	bl	8004f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001e8 	.word	0x200001e8

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 feb9 	bl	8001b48 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000c84 	.word	0x20000c84

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f008 fa62 	bl	80092d8 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200008a0 	.word	0x200008a0
 8000e48:	20000f98 	.word	0x20000f98

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f008 fa21 	bl	80092e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb1b 	bl	80004dc <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000eb4:	0800959c 	.word	0x0800959c
  ldr r2, =_sbss
 8000eb8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ebc:	20000f98 	.word	0x20000f98

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f94f 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fd5e 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f967 	bl	80011fa <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f92f 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200008a4 	.word	0x200008a4

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200008a4 	.word	0x200008a4

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff feb6 	bl	8000f90 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d008      	beq.n	8001244 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e052      	b.n	80012ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0216 	bic.w	r2, r2, #22
 8001252:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001262:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <HAL_DMA_Abort+0x62>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0208 	bic.w	r2, r2, #8
 8001282:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001294:	e013      	b.n	80012be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001296:	f7ff fe7b 	bl	8000f90 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d90c      	bls.n	80012be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2220      	movs	r2, #32
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e015      	b.n	80012ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e4      	bne.n	8001296 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d004      	beq.n	8001310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e00c      	b.n	800132a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	e159      	b.n	8001608 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 8148 	bne.w	8001602 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d005      	beq.n	800138a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	2b02      	cmp	r3, #2
 8001388:	d130      	bne.n	80013ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d017      	beq.n	8001428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80a2 	beq.w	8001602 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b57      	ldr	r3, [pc, #348]	; (8001620 <HAL_GPIO_Init+0x2e8>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a56      	ldr	r2, [pc, #344]	; (8001620 <HAL_GPIO_Init+0x2e8>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_GPIO_Init+0x2e8>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014da:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_GPIO_Init+0x2ec>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a49      	ldr	r2, [pc, #292]	; (8001628 <HAL_GPIO_Init+0x2f0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d019      	beq.n	800153a <HAL_GPIO_Init+0x202>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a48      	ldr	r2, [pc, #288]	; (800162c <HAL_GPIO_Init+0x2f4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0x1fe>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a47      	ldr	r2, [pc, #284]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00d      	beq.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a46      	ldr	r2, [pc, #280]	; (8001634 <HAL_GPIO_Init+0x2fc>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d007      	beq.n	800152e <HAL_GPIO_Init+0x1f6>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a45      	ldr	r2, [pc, #276]	; (8001638 <HAL_GPIO_Init+0x300>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_GPIO_Init+0x1f2>
 8001526:	2304      	movs	r3, #4
 8001528:	e008      	b.n	800153c <HAL_GPIO_Init+0x204>
 800152a:	2307      	movs	r3, #7
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x204>
 800152e:	2303      	movs	r3, #3
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x204>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x204>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x204>
 800153a:	2300      	movs	r3, #0
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	f002 0203 	and.w	r2, r2, #3
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4093      	lsls	r3, r2
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_GPIO_Init+0x2ec>)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <HAL_GPIO_Init+0x304>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157e:	4a2f      	ldr	r2, [pc, #188]	; (800163c <HAL_GPIO_Init+0x304>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_GPIO_Init+0x304>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a8:	4a24      	ldr	r2, [pc, #144]	; (800163c <HAL_GPIO_Init+0x304>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_GPIO_Init+0x304>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <HAL_GPIO_Init+0x304>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_GPIO_Init+0x304>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_GPIO_Init+0x304>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b0f      	cmp	r3, #15
 800160c:	f67f aea2 	bls.w	8001354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40013800 	.word	0x40013800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400
 8001630:	40020800 	.word	0x40020800
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40021000 	.word	0x40021000
 800163c:	40013c00 	.word	0x40013c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001674:	b08f      	sub	sp, #60	; 0x3c
 8001676:	af0a      	add	r7, sp, #40	; 0x28
 8001678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e054      	b.n	800172e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f007 fb70 	bl	8008d84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fb9e 	bl	8005e04 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	687e      	ldr	r6, [r7, #4]
 80016d0:	466d      	mov	r5, sp
 80016d2:	f106 0410 	add.w	r4, r6, #16
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e6:	1d33      	adds	r3, r6, #4
 80016e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f004 fb18 	bl	8005d20 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fb95 	bl	8005e26 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	687e      	ldr	r6, [r7, #4]
 8001704:	466d      	mov	r5, sp
 8001706:	f106 0410 	add.w	r4, r6, #16
 800170a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001716:	e885 0003 	stmia.w	r5, {r0, r1}
 800171a:	1d33      	adds	r3, r6, #4
 800171c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f004 fd1e 	bl	8006160 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001736 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001736:	b590      	push	{r4, r7, lr}
 8001738:	b089      	sub	sp, #36	; 0x24
 800173a:	af04      	add	r7, sp, #16
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	4608      	mov	r0, r1
 8001740:	4611      	mov	r1, r2
 8001742:	461a      	mov	r2, r3
 8001744:	4603      	mov	r3, r0
 8001746:	70fb      	strb	r3, [r7, #3]
 8001748:	460b      	mov	r3, r1
 800174a:	70bb      	strb	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_HCD_HC_Init+0x28>
 800175a:	2302      	movs	r3, #2
 800175c:	e076      	b.n	800184c <HAL_HCD_HC_Init+0x116>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	212c      	movs	r1, #44	; 0x2c
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	333d      	adds	r3, #61	; 0x3d
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3338      	adds	r3, #56	; 0x38
 8001786:	787a      	ldrb	r2, [r7, #1]
 8001788:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3340      	adds	r3, #64	; 0x40
 8001798:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800179a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3339      	adds	r3, #57	; 0x39
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	333f      	adds	r3, #63	; 0x3f
 80017bc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	78ba      	ldrb	r2, [r7, #2]
 80017c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017ca:	b2d0      	uxtb	r0, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	333a      	adds	r3, #58	; 0x3a
 80017d8:	4602      	mov	r2, r0
 80017da:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da09      	bge.n	80017f8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	333b      	adds	r3, #59	; 0x3b
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e008      	b.n	800180a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	333b      	adds	r3, #59	; 0x3b
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	333c      	adds	r3, #60	; 0x3c
 8001818:	f897 2020 	ldrb.w	r2, [r7, #32]
 800181c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	787c      	ldrb	r4, [r7, #1]
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	78f9      	ldrb	r1, [r7, #3]
 8001828:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4623      	mov	r3, r4
 800183a:	f004 fe17 	bl	800646c <USB_HC_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_HCD_HC_Halt+0x1e>
 800186e:	2302      	movs	r3, #2
 8001870:	e00f      	b.n	8001892 <HAL_HCD_HC_Halt+0x3e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f005 f867 	bl	8006956 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70bb      	strb	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	333b      	adds	r3, #59	; 0x3b
 80018c4:	78ba      	ldrb	r2, [r7, #2]
 80018c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	333f      	adds	r3, #63	; 0x3f
 80018d6:	787a      	ldrb	r2, [r7, #1]
 80018d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018da:	7c3b      	ldrb	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d112      	bne.n	8001906 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2203      	movs	r2, #3
 80018f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	333d      	adds	r3, #61	; 0x3d
 8001900:	7f3a      	ldrb	r2, [r7, #28]
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e008      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b03      	cmp	r3, #3
 800191c:	f200 80c6 	bhi.w	8001aac <HAL_HCD_HC_SubmitRequest+0x210>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	08001939 	.word	0x08001939
 800192c:	08001a99 	.word	0x08001a99
 8001930:	0800199d 	.word	0x0800199d
 8001934:	08001a1b 	.word	0x08001a1b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001938:	7c3b      	ldrb	r3, [r7, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	f040 80b8 	bne.w	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80b4 	bne.w	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001948:	8b3b      	ldrh	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3355      	adds	r3, #85	; 0x55
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3355      	adds	r3, #85	; 0x55
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001986:	e093      	b.n	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2202      	movs	r2, #2
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e089      	b.n	8001ab0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800199c:	78bb      	ldrb	r3, [r7, #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11d      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3355      	adds	r3, #85	; 0x55
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3342      	adds	r3, #66	; 0x42
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019c8:	e073      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e069      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3354      	adds	r3, #84	; 0x54
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3342      	adds	r3, #66	; 0x42
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
      break;
 8001a04:	e055      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	3342      	adds	r3, #66	; 0x42
 8001a14:	2202      	movs	r2, #2
 8001a16:	701a      	strb	r2, [r3, #0]
      break;
 8001a18:	e04b      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a1a:	78bb      	ldrb	r3, [r7, #2]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d11d      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3355      	adds	r3, #85	; 0x55
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3342      	adds	r3, #66	; 0x42
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a46:	e034      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e02a      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3354      	adds	r3, #84	; 0x54
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3342      	adds	r3, #66	; 0x42
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
      break;
 8001a82:	e016      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	212c      	movs	r1, #44	; 0x2c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	3342      	adds	r3, #66	; 0x42
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e00c      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3342      	adds	r3, #66	; 0x42
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001aac:	bf00      	nop
 8001aae:	e000      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ab0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3344      	adds	r3, #68	; 0x44
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	8b3a      	ldrh	r2, [r7, #24]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	202c      	movs	r0, #44	; 0x2c
 8001acc:	fb00 f303 	mul.w	r3, r0, r3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	334c      	adds	r3, #76	; 0x4c
 8001ad4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3360      	adds	r3, #96	; 0x60
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3350      	adds	r3, #80	; 0x50
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3339      	adds	r3, #57	; 0x39
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3361      	adds	r3, #97	; 0x61
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	222c      	movs	r2, #44	; 0x2c
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	3338      	adds	r3, #56	; 0x38
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	18d1      	adds	r1, r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	f004 fdba 	bl	80066b0 <USB_HC_StartXfer>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop

08001b48 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 fabb 	bl	80060da <USB_GetMode>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	f040 80f6 	bne.w	8001d58 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 fa9f 	bl	80060b4 <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ec 	beq.w	8001d56 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fa96 	bl	80060b4 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b92:	d104      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fa86 	bl	80060b4 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bb2:	d104      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 fa76 	bl	80060b4 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bd2:	d104      	bne.n	8001bde <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 fa66 	bl	80060b4 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d103      	bne.n	8001bfa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 fa58 	bl	80060b4 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0e:	d11c      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c18:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	6938      	ldr	r0, [r7, #16]
 8001c2e:	f004 f947 	bl	8005ec0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c32:	6938      	ldr	r0, [r7, #16]
 8001c34:	f004 f978 	bl	8005f28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fb4e 	bl	80062e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f007 f91b 	bl	8008e80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fa30 	bl	80060b4 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5e:	d102      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 f89e 	bl	8002da2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fa22 	bl	80060b4 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d106      	bne.n	8001c88 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f007 f8e4 	bl	8008e48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fa11 	bl	80060b4 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d101      	bne.n	8001ca0 <HAL_HCD_IRQHandler+0x158>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_HCD_IRQHandler+0x15a>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0210 	bic.w	r2, r2, #16
 8001cb4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 ffa1 	bl	8002bfe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0210 	orr.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 f9ef 	bl	80060b4 <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce0:	d13a      	bne.n	8001d58 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fe24 	bl	8006934 <USB_HC_ReadInterrupt>
 8001cec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e025      	b.n	8001d40 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d018      	beq.n	8001d3a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1e:	d106      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8ab 	bl	8001e82 <HCD_HC_IN_IRQHandler>
 8001d2c:	e005      	b.n	8001d3a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fbf9 	bl	800252c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3d4      	bcc.n	8001cf4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	e000      	b.n	8001d58 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d56:	bf00      	nop
    }
  }
}
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_HCD_Start+0x16>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e013      	b.n	8001d9c <HAL_HCD_Start+0x3e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fb10 	bl	80063a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 f828 	bl	8005de2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_HCD_Stop+0x16>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e00d      	b.n	8001dd6 <HAL_HCD_Stop+0x32>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fefe 	bl	8006bc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fab2 	bl	8006354 <USB_ResetPort>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3360      	adds	r3, #96	; 0x60
 8001e14:	781b      	ldrb	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3350      	adds	r3, #80	; 0x50
 8001e3c:	681b      	ldr	r3, [r3, #0]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 faf6 	bl	8006448 <USB_GetCurrentFrame>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fad1 	bl	800641a <USB_GetHostSpeed>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d11a      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3361      	adds	r3, #97	; 0x61
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fd38 	bl	8006956 <USB_HC_Halt>
 8001ee6:	e0af      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d11b      	bne.n	8001f38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3361      	adds	r3, #97	; 0x61
 8001f22:	2207      	movs	r2, #7
 8001f24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fd10 	bl	8006956 <USB_HC_Halt>
 8001f36:	e087      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d109      	bne.n	8001f62 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	6093      	str	r3, [r2, #8]
 8001f60:	e072      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d11a      	bne.n	8001fae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	2308      	movs	r3, #8
 8001f88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3361      	adds	r3, #97	; 0x61
 8001f98:	2205      	movs	r2, #5
 8001f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fcd5 	bl	8006956 <USB_HC_Halt>
 8001fac:	e04c      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d11b      	bne.n	8001ffe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3361      	adds	r3, #97	; 0x61
 8001fe8:	2208      	movs	r2, #8
 8001fea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fcad 	bl	8006956 <USB_HC_Halt>
 8001ffc:	e024      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d119      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3361      	adds	r3, #97	; 0x61
 8002034:	2206      	movs	r2, #6
 8002036:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fc87 	bl	8006956 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205e:	d112      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fc73 	bl	8006956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002082:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002084:	e24e      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	f040 80df 	bne.w	800225c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d019      	beq.n	80020da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3348      	adds	r3, #72	; 0x48
 80020b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0159      	lsls	r1, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	440b      	add	r3, r1
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020c8:	1ad2      	subs	r2, r2, r3
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	202c      	movs	r0, #44	; 0x2c
 80020d0:	fb00 f303 	mul.w	r3, r0, r3
 80020d4:	440b      	add	r3, r1
 80020d6:	3350      	adds	r3, #80	; 0x50
 80020d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3361      	adds	r3, #97	; 0x61
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	335c      	adds	r3, #92	; 0x5c
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2301      	movs	r3, #1
 800210e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	333f      	adds	r3, #63	; 0x3f
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	333f      	adds	r3, #63	; 0x3f
 8002132:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002134:	2b02      	cmp	r3, #2
 8002136:	d111      	bne.n	800215c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f004 fc07 	bl	8006956 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	461a      	mov	r2, r3
 8002156:	2310      	movs	r3, #16
 8002158:	6093      	str	r3, [r2, #8]
 800215a:	e03a      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	333f      	adds	r3, #63	; 0x3f
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d009      	beq.n	8002184 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002180:	2b01      	cmp	r3, #1
 8002182:	d126      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	0151      	lsls	r1, r2, #5
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	440a      	add	r2, r1
 800219a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3360      	adds	r3, #96	; 0x60
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	b2d9      	uxtb	r1, r3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	202c      	movs	r0, #44	; 0x2c
 80021c0:	fb00 f303 	mul.w	r3, r0, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3360      	adds	r3, #96	; 0x60
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 fe65 	bl	8008e9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d12b      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3348      	adds	r3, #72	; 0x48
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	202c      	movs	r0, #44	; 0x2c
 80021f0:	fb00 f202 	mul.w	r2, r0, r2
 80021f4:	440a      	add	r2, r1
 80021f6:	3240      	adds	r2, #64	; 0x40
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 818e 	beq.w	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3354      	adds	r3, #84	; 0x54
 800222c:	4602      	mov	r2, r0
 800222e:	701a      	strb	r2, [r3, #0]
}
 8002230:	e178      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3354      	adds	r3, #84	; 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f083 0301 	eor.w	r3, r3, #1
 8002246:	b2d8      	uxtb	r0, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3354      	adds	r3, #84	; 0x54
 8002256:	4602      	mov	r2, r0
 8002258:	701a      	strb	r2, [r3, #0]
}
 800225a:	e163      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	f040 80f6 	bne.w	8002460 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d109      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0c9      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3361      	adds	r3, #97	; 0x61
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d109      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	2205      	movs	r2, #5
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e0b5      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3361      	adds	r3, #97	; 0x61
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d009      	beq.n	80022ec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3361      	adds	r3, #97	; 0x61
 80022e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d150      	bne.n	800238e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	335c      	adds	r3, #92	; 0x5c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	202c      	movs	r0, #44	; 0x2c
 8002304:	fb00 f303 	mul.w	r3, r0, r3
 8002308:	440b      	add	r3, r1
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d912      	bls.n	8002348 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3360      	adds	r3, #96	; 0x60
 8002342:	2204      	movs	r2, #4
 8002344:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002346:	e073      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002370:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002378:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800238c:	e050      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d122      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e023      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d119      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	2204      	movs	r2, #4
 800242e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	461a      	mov	r2, r3
 800243e:	2302      	movs	r3, #2
 8002440:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	202c      	movs	r0, #44	; 0x2c
 800244c:	fb00 f303 	mul.w	r3, r0, r3
 8002450:	4413      	add	r3, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f006 fd1f 	bl	8008e9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800245e:	e061      	b.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b10      	cmp	r3, #16
 8002474:	d156      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	333f      	adds	r3, #63	; 0x3f
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d111      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 fa55 	bl	8006956 <USB_HC_Halt>
 80024ac:	e031      	b.n	8002512 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	333f      	adds	r3, #63	; 0x3f
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333f      	adds	r3, #63	; 0x3f
 80024d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11d      	bne.n	8002512 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d110      	bne.n	8002512 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	2203      	movs	r2, #3
 8002500:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f004 fa22 	bl	8006956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	461a      	mov	r2, r3
 8002520:	2310      	movs	r3, #16
 8002522:	6093      	str	r3, [r2, #8]
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d11a      	bne.n	8002592 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2304      	movs	r3, #4
 800256c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3361      	adds	r3, #97	; 0x61
 800257c:	2206      	movs	r2, #6
 800257e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f004 f9e3 	bl	8006956 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002590:	e331      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d12e      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2320      	movs	r3, #32
 80025b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333d      	adds	r3, #61	; 0x3d
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	f040 8313 	bne.w	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	333d      	adds	r3, #61	; 0x3d
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3360      	adds	r3, #96	; 0x60
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 f9a9 	bl	8006956 <USB_HC_Halt>
}
 8002604:	e2f7      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d112      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002630:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f004 f98a 	bl	8006956 <USB_HC_Halt>
}
 8002642:	e2d8      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d140      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d111      	bne.n	80026a6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	333d      	adds	r3, #61	; 0x3d
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	2301      	movs	r3, #1
 80026b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 f93e 	bl	8006956 <USB_HC_Halt>
}
 80026da:	e28c      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d12c      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3361      	adds	r3, #97	; 0x61
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	333d      	adds	r3, #61	; 0x3d
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f004 f90f 	bl	8006956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	6093      	str	r3, [r2, #8]
}
 800274a:	e254      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11a      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2308      	movs	r3, #8
 8002772:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3361      	adds	r3, #97	; 0x61
 8002782:	2205      	movs	r2, #5
 8002784:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f004 f8e0 	bl	8006956 <USB_HC_Halt>
}
 8002796:	e22e      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d140      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3361      	adds	r3, #97	; 0x61
 80027ce:	2203      	movs	r2, #3
 80027d0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	333d      	adds	r3, #61	; 0x3d
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d112      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333c      	adds	r3, #60	; 0x3c
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	333d      	adds	r3, #61	; 0x3d
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f004 f89d 	bl	8006956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2310      	movs	r3, #16
 800282c:	6093      	str	r3, [r2, #8]
}
 800282e:	e1e2      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d164      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d111      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3361      	adds	r3, #97	; 0x61
 800285c:	2206      	movs	r2, #6
 800285e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f004 f873 	bl	8006956 <USB_HC_Halt>
 8002870:	e044      	b.n	80028fc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	335c      	adds	r3, #92	; 0x5c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	202c      	movs	r0, #44	; 0x2c
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	440b      	add	r3, r1
 8002890:	335c      	adds	r3, #92	; 0x5c
 8002892:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	335c      	adds	r3, #92	; 0x5c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d920      	bls.n	80028ea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	335c      	adds	r3, #92	; 0x5c
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	2204      	movs	r2, #4
 80028ca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	b2d9      	uxtb	r1, r3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	202c      	movs	r0, #44	; 0x2c
 80028d6:	fb00 f303 	mul.w	r3, r0, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f006 fada 	bl	8008e9c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028e8:	e008      	b.n	80028fc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	; 0x60
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	6093      	str	r3, [r2, #8]
}
 800290e:	e172      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d11b      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3361      	adds	r3, #97	; 0x61
 8002936:	2208      	movs	r2, #8
 8002938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f004 f806 	bl	8006956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295c:	6093      	str	r3, [r2, #8]
}
 800295e:	e14a      	b.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 813f 	bne.w	8002bf6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3361      	adds	r3, #97	; 0x61
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d17d      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3360      	adds	r3, #96	; 0x60
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	333f      	adds	r3, #63	; 0x3f
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d00a      	beq.n	80029c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	333f      	adds	r3, #63	; 0x3f
 80029c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	f040 8100 	bne.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d113      	bne.n	80029f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3355      	adds	r3, #85	; 0x55
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2d8      	uxtb	r0, r3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3355      	adds	r3, #85	; 0x55
 80029f4:	4602      	mov	r2, r0
 80029f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 80e3 	bne.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	334c      	adds	r3, #76	; 0x4c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80d8 	beq.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	334c      	adds	r3, #76	; 0x4c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	202c      	movs	r0, #44	; 0x2c
 8002a2e:	fb00 f202 	mul.w	r2, r0, r2
 8002a32:	440a      	add	r2, r1
 8002a34:	3240      	adds	r2, #64	; 0x40
 8002a36:	8812      	ldrh	r2, [r2, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	202c      	movs	r0, #44	; 0x2c
 8002a42:	fb00 f202 	mul.w	r2, r0, r2
 8002a46:	440a      	add	r2, r1
 8002a48:	3240      	adds	r2, #64	; 0x40
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80b5 	beq.w	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3355      	adds	r3, #85	; 0x55
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2d8      	uxtb	r0, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3355      	adds	r3, #85	; 0x55
 8002a82:	4602      	mov	r2, r0
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e09f      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d109      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e08b      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e077      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d109      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	2205      	movs	r2, #5
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e063      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3361      	adds	r3, #97	; 0x61
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d009      	beq.n	8002b28 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3361      	adds	r3, #97	; 0x61
 8002b22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d14f      	bne.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	335c      	adds	r3, #92	; 0x5c
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	202c      	movs	r0, #44	; 0x2c
 8002b40:	fb00 f303 	mul.w	r3, r0, r3
 8002b44:	440b      	add	r3, r1
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d912      	bls.n	8002b84 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3360      	adds	r3, #96	; 0x60
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e021      	b.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	202c      	movs	r0, #44	; 0x2c
 8002be4:	fb00 f303 	mul.w	r3, r0, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f006 f953 	bl	8008e9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	0c5b      	lsrs	r3, r3, #17
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d004      	beq.n	8002c44 <HCD_RXQLVL_IRQHandler+0x46>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	f000 80a9 	beq.w	8002d94 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c42:	e0aa      	b.n	8002d9a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80a6 	beq.w	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3344      	adds	r3, #68	; 0x44
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 809b 	beq.w	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	441a      	add	r2, r3
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	202c      	movs	r0, #44	; 0x2c
 8002c7c:	fb00 f303 	mul.w	r3, r0, r3
 8002c80:	440b      	add	r3, r1
 8002c82:	334c      	adds	r3, #76	; 0x4c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d87a      	bhi.n	8002d80 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3344      	adds	r3, #68	; 0x44
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f003 f9ae 	bl	8006004 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3344      	adds	r3, #68	; 0x44
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	441a      	add	r2, r3
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	202c      	movs	r0, #44	; 0x2c
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	; 0x44
 8002cca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3350      	adds	r3, #80	; 0x50
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	441a      	add	r2, r3
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	202c      	movs	r0, #44	; 0x2c
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	440b      	add	r3, r1
 8002cec:	3350      	adds	r3, #80	; 0x50
 8002cee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	0cdb      	lsrs	r3, r3, #19
 8002d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d04:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3340      	adds	r3, #64	; 0x40
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d13c      	bne.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d039      	beq.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d42:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3354      	adds	r3, #84	; 0x54
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3354      	adds	r3, #84	; 0x54
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	701a      	strb	r2, [r3, #0]
      break;
 8002d7e:	e00b      	b.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3360      	adds	r3, #96	; 0x60
 8002d8e:	2204      	movs	r2, #4
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e001      	b.n	8002d98 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d98:	bf00      	nop
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d10b      	bne.n	8002df2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f006 f83d 	bl	8008e64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d132      	bne.n	8002e62 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d126      	bne.n	8002e5c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d113      	bne.n	8002e3e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e20:	d106      	bne.n	8002e30 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2102      	movs	r1, #2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fa59 	bl	80062e0 <USB_InitFSLSPClkSel>
 8002e2e:	e011      	b.n	8002e54 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fa52 	bl	80062e0 <USB_InitFSLSPClkSel>
 8002e3c:	e00a      	b.n	8002e54 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d106      	bne.n	8002e54 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e52:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f006 f82f 	bl	8008eb8 <HAL_HCD_PortEnabled_Callback>
 8002e5a:	e002      	b.n	8002e62 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f006 f839 	bl	8008ed4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d103      	bne.n	8002e74 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f043 0320 	orr.w	r3, r3, #32
 8002e72:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e12b      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fdaa 	bl	8000a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eec:	f001 fa20 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a81      	ldr	r2, [pc, #516]	; (80030fc <HAL_I2C_Init+0x274>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d807      	bhi.n	8002f0c <HAL_I2C_Init+0x84>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a80      	ldr	r2, [pc, #512]	; (8003100 <HAL_I2C_Init+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e006      	b.n	8002f1a <HAL_I2C_Init+0x92>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a7d      	ldr	r2, [pc, #500]	; (8003104 <HAL_I2C_Init+0x27c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e7      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a78      	ldr	r2, [pc, #480]	; (8003108 <HAL_I2C_Init+0x280>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <HAL_I2C_Init+0xd4>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	e009      	b.n	8002f70 <HAL_I2C_Init+0xe8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_I2C_Init+0x284>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	495c      	ldr	r1, [pc, #368]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d819      	bhi.n	8002fc4 <HAL_I2C_Init+0x13c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e59      	subs	r1, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_Init+0x138>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e59      	subs	r1, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbe:	e051      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e04f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_I2C_Init+0x168>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_I2C_Init+0x18e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x196>
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <HAL_I2C_Init+0x1bc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e58      	subs	r0, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	fbb0 f3f3 	udiv	r3, r0, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6809      	ldr	r1, [r1, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6911      	ldr	r1, [r2, #16]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	000186a0 	.word	0x000186a0
 8003100:	001e847f 	.word	0x001e847f
 8003104:	003d08ff 	.word	0x003d08ff
 8003108:	431bde83 	.word	0x431bde83
 800310c:	10624dd3 	.word	0x10624dd3

08003110 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e128      	b.n	8003374 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_I2S_Init+0x26c>)
 800313a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd fcab 	bl	8000a98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003158:	f023 030f 	bic.w	r3, r3, #15
 800315c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d060      	beq.n	8003230 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003176:	2310      	movs	r3, #16
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e001      	b.n	8003180 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b20      	cmp	r3, #32
 8003186:	d802      	bhi.n	800318e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800318e:	2001      	movs	r0, #1
 8003190:	f001 f9e6 	bl	8004560 <HAL_RCCEx_GetPeriphCLKFreq>
 8003194:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319e:	d125      	bne.n	80031ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	3305      	adds	r3, #5
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e01f      	b.n	800320a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	3305      	adds	r3, #5
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e00e      	b.n	800320a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	3305      	adds	r3, #5
 8003208:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <HAL_I2S_Init+0x270>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	08db      	lsrs	r3, r3, #3
 8003214:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e003      	b.n	8003238 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003230:	2302      	movs	r3, #2
 8003232:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d902      	bls.n	8003244 <HAL_I2S_Init+0x134>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2bff      	cmp	r3, #255	; 0xff
 8003242:	d907      	bls.n	8003254 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f043 0210 	orr.w	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e08f      	b.n	8003374 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	ea42 0103 	orr.w	r1, r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	430a      	orrs	r2, r1
 8003266:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6851      	ldr	r1, [r2, #4]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6892      	ldr	r2, [r2, #8]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68d2      	ldr	r2, [r2, #12]
 8003284:	4311      	orrs	r1, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6992      	ldr	r2, [r2, #24]
 800328a:	430a      	orrs	r2, r1
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003296:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d161      	bne.n	8003364 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_I2S_Init+0x274>)
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_I2S_Init+0x278>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_I2S_Init+0x1a4>
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_I2S_Init+0x27c>)
 80032b2:	e001      	b.n	80032b8 <HAL_I2S_Init+0x1a8>
 80032b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4932      	ldr	r1, [pc, #200]	; (8003388 <HAL_I2S_Init+0x278>)
 80032c0:	428a      	cmp	r2, r1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2S_Init+0x1b8>
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <HAL_I2S_Init+0x27c>)
 80032c6:	e001      	b.n	80032cc <HAL_I2S_Init+0x1bc>
 80032c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032d0:	f023 030f 	bic.w	r3, r3, #15
 80032d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_I2S_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_I2S_Init+0x1d4>
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_I2S_Init+0x27c>)
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x1d8>
 80032e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e8:	2202      	movs	r2, #2
 80032ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a25      	ldr	r2, [pc, #148]	; (8003388 <HAL_I2S_Init+0x278>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_I2S_Init+0x1ea>
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_I2S_Init+0x27c>)
 80032f8:	e001      	b.n	80032fe <HAL_I2S_Init+0x1ee>
 80032fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330a:	d003      	beq.n	8003314 <HAL_I2S_Init+0x204>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800332a:	4313      	orrs	r3, r2
 800332c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003334:	4313      	orrs	r3, r2
 8003336:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800333e:	4313      	orrs	r3, r2
 8003340:	b29a      	uxth	r2, r3
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	4313      	orrs	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800334c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_I2S_Init+0x278>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_I2S_Init+0x24c>
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_I2S_Init+0x27c>)
 800335a:	e001      	b.n	8003360 <HAL_I2S_Init+0x250>
 800335c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003360:	897a      	ldrh	r2, [r7, #10]
 8003362:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08003487 	.word	0x08003487
 8003380:	cccccccd 	.word	0xcccccccd
 8003384:	0800359d 	.word	0x0800359d
 8003388:	40003800 	.word	0x40003800
 800338c:	40003400 	.word	0x40003400

08003390 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10e      	bne.n	8003420 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003410:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffb8 	bl	8003390 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	b292      	uxth	r2, r2
 800343c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	1c9a      	adds	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10e      	bne.n	800347e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff93 	bl	80033a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d13a      	bne.n	8003518 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d109      	bne.n	80034c0 <I2S_IRQHandler+0x3a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d102      	bne.n	80034c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffb4 	bl	8003428 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d126      	bne.n	8003518 <I2S_IRQHandler+0x92>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d11f      	bne.n	8003518 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f043 0202 	orr.w	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff50 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d136      	bne.n	8003592 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d109      	bne.n	8003542 <I2S_IRQHandler+0xbc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d102      	bne.n	8003542 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff45 	bl	80033cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b08      	cmp	r3, #8
 800354a:	d122      	bne.n	8003592 <I2S_IRQHandler+0x10c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d11b      	bne.n	8003592 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003568:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff13 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a92      	ldr	r2, [pc, #584]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035b6:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b8:	e001      	b.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a8b      	ldr	r2, [pc, #556]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035d4:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d6:	e001      	b.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d004      	beq.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 8099 	bne.w	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d107      	bne.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f925 	bl	8003858 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f9c8 	bl	80039b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d13a      	bne.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d035      	beq.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6e      	ldr	r2, [pc, #440]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003646:	4b6e      	ldr	r3, [pc, #440]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4969      	ldr	r1, [pc, #420]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003656:	428b      	cmp	r3, r1
 8003658:	d101      	bne.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800365a:	4b69      	ldr	r3, [pc, #420]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800365c:	e001      	b.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800365e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003666:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003676:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0202 	orr.w	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe88 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	f040 80c3 	bne.w	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80bd 	beq.w	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a49      	ldr	r2, [pc, #292]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4944      	ldr	r1, [pc, #272]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ea:	428b      	cmp	r3, r1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036ee:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f0:	e001      	b.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fe4a 	bl	80033b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003724:	e089      	b.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d107      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8be 	bl	80038bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8fd 	bl	8003954 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d12f      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02a      	beq.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800377c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800378a:	e001      	b.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800378c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003798:	428b      	cmp	r3, r1
 800379a:	d101      	bne.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379e:	e001      	b.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fdfa 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d136      	bne.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d031      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e4:	e001      	b.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4902      	ldr	r1, [pc, #8]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f2:	428b      	cmp	r3, r1
 80037f4:	d106      	bne.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037f6:	4b02      	ldr	r3, [pc, #8]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f8:	e006      	b.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037fa:	bf00      	nop
 80037fc:	40003800 	.word	0x40003800
 8003800:	40003400 	.word	0x40003400
 8003804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fdc0 	bl	80033b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003838:	e000      	b.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800383a:	bf00      	nop
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c99      	adds	r1, r3, #2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6251      	str	r1, [r2, #36]	; 0x24
 800386a:	881a      	ldrh	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003898:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ffc9 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c99      	adds	r1, r3, #2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6251      	str	r1, [r2, #36]	; 0x24
 80038ce:	8819      	ldrh	r1, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <I2SEx_TxISR_I2SExt+0x90>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <I2SEx_TxISR_I2SExt+0x22>
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <I2SEx_TxISR_I2SExt+0x94>)
 80038dc:	e001      	b.n	80038e2 <I2SEx_TxISR_I2SExt+0x26>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e2:	460a      	mov	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d121      	bne.n	8003942 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <I2SEx_TxISR_I2SExt+0x90>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <I2SEx_TxISR_I2SExt+0x50>
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <I2SEx_TxISR_I2SExt+0x94>)
 800390a:	e001      	b.n	8003910 <I2SEx_TxISR_I2SExt+0x54>
 800390c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	490d      	ldr	r1, [pc, #52]	; (800394c <I2SEx_TxISR_I2SExt+0x90>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d101      	bne.n	8003920 <I2SEx_TxISR_I2SExt+0x64>
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <I2SEx_TxISR_I2SExt+0x94>)
 800391e:	e001      	b.n	8003924 <I2SEx_TxISR_I2SExt+0x68>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003928:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff81 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40003800 	.word	0x40003800
 8003950:	40003400 	.word	0x40003400

08003954 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68d8      	ldr	r0, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	1c99      	adds	r1, r3, #2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800396c:	b282      	uxth	r2, r0
 800396e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003996:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff4a 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <I2SEx_RxISR_I2SExt+0x90>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <I2SEx_RxISR_I2SExt+0x16>
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <I2SEx_RxISR_I2SExt+0x94>)
 80039cc:	e001      	b.n	80039d2 <I2SEx_RxISR_I2SExt+0x1a>
 80039ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d2:	68d8      	ldr	r0, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	1c99      	adds	r1, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039de:	b282      	uxth	r2, r0
 80039e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d121      	bne.n	8003a3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <I2SEx_RxISR_I2SExt+0x90>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <I2SEx_RxISR_I2SExt+0x50>
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <I2SEx_RxISR_I2SExt+0x94>)
 8003a06:	e001      	b.n	8003a0c <I2SEx_RxISR_I2SExt+0x54>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	490d      	ldr	r1, [pc, #52]	; (8003a48 <I2SEx_RxISR_I2SExt+0x90>)
 8003a14:	428b      	cmp	r3, r1
 8003a16:	d101      	bne.n	8003a1c <I2SEx_RxISR_I2SExt+0x64>
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <I2SEx_RxISR_I2SExt+0x94>)
 8003a1a:	e001      	b.n	8003a20 <I2SEx_RxISR_I2SExt+0x68>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff03 	bl	8003844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40003800 	.word	0x40003800
 8003a4c:	40003400 	.word	0x40003400

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e267      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d075      	beq.n	8003b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d00c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d112      	bne.n	8003aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a86:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d10b      	bne.n	8003aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d05b      	beq.n	8003b58 <HAL_RCC_OscConfig+0x108>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d157      	bne.n	8003b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e242      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab4:	d106      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x74>
 8003ab6:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a75      	ldr	r2, [pc, #468]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e01d      	b.n	8003b00 <HAL_RCC_OscConfig+0xb0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x98>
 8003ace:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6f      	ldr	r2, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b6d      	ldr	r3, [pc, #436]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a6c      	ldr	r2, [pc, #432]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0xb0>
 8003ae8:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d013      	beq.n	8003b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fa42 	bl	8000f90 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fa3e 	bl	8000f90 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e207      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0xc0>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fd fa2e 	bl	8000f90 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd fa2a 	bl	8000f90 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1f3      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	4b51      	ldr	r3, [pc, #324]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0xe8>
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d063      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d11c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b7e:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x152>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e1c7      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4937      	ldr	r1, [pc, #220]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	e03a      	b.n	8003c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc0:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_OscConfig+0x244>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd f9e3 	bl	8000f90 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bce:	f7fd f9df 	bl	8000f90 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e1a8      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4925      	ldr	r1, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]
 8003c00:	e015      	b.n	8003c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_OscConfig+0x244>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd f9c2 	bl	8000f90 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fd f9be 	bl	8000f90 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e187      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d036      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_OscConfig+0x248>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd f9a2 	bl	8000f90 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fd f99e 	bl	8000f90 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e167      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_OscConfig+0x240>)
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x200>
 8003c6e:	e01b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_OscConfig+0x248>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd f98b 	bl	8000f90 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	e00e      	b.n	8003c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c7e:	f7fd f987 	bl	8000f90 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d907      	bls.n	8003c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e150      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470000 	.word	0x42470000
 8003c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ea      	bne.n	8003c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8097 	beq.w	8003de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cba:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	4b7d      	ldr	r3, [pc, #500]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a7c      	ldr	r2, [pc, #496]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b7a      	ldr	r3, [pc, #488]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b77      	ldr	r3, [pc, #476]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d118      	bne.n	8003d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf2:	4b74      	ldr	r3, [pc, #464]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a73      	ldr	r2, [pc, #460]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfe:	f7fd f947 	bl	8000f90 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d06:	f7fd f943 	bl	8000f90 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e10c      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	4b6a      	ldr	r3, [pc, #424]	; (8003ec4 <HAL_RCC_OscConfig+0x474>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x2ea>
 8003d2c:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a63      	ldr	r2, [pc, #396]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	e01c      	b.n	8003d74 <HAL_RCC_OscConfig+0x324>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x30c>
 8003d42:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a5e      	ldr	r2, [pc, #376]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 0304 	orr.w	r3, r3, #4
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a5b      	ldr	r2, [pc, #364]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0x324>
 8003d5c:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a54      	ldr	r2, [pc, #336]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d015      	beq.n	8003da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fd f908 	bl	8000f90 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fd f904 	bl	8000f90 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0cb      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ee      	beq.n	8003d84 <HAL_RCC_OscConfig+0x334>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da8:	f7fd f8f2 	bl	8000f90 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd f8ee 	bl	8000f90 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0b5      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ee      	bne.n	8003db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a38      	ldr	r2, [pc, #224]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a1 	beq.w	8003f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d05c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d141      	bne.n	8003e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd f8c2 	bl	8000f90 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd f8be 	bl	8000f90 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e087      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	019b      	lsls	r3, r3, #6
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	3b01      	subs	r3, #1
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	491b      	ldr	r1, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_RCC_OscConfig+0x478>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd f897 	bl	8000f90 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fd f893 	bl	8000f90 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e05c      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x416>
 8003e84:	e054      	b.n	8003f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCC_OscConfig+0x478>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fd f880 	bl	8000f90 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd f87c 	bl	8000f90 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e045      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x444>
 8003eb2:	e03d      	b.n	8003f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e038      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x4ec>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d121      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d11a      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d111      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0cc      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d90c      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0b8      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f94:	4b59      	ldr	r3, [pc, #356]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a58      	ldr	r2, [pc, #352]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a52      	ldr	r2, [pc, #328]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb8:	4b50      	ldr	r3, [pc, #320]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	494d      	ldr	r1, [pc, #308]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d044      	beq.n	8004060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d119      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e07f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e06f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e067      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4934      	ldr	r1, [pc, #208]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004030:	f7fc ffae 	bl	8000f90 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fc ffaa 	bl	8000f90 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e04f      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d20c      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e032      	b.n	80040ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4916      	ldr	r1, [pc, #88]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	490e      	ldr	r1, [pc, #56]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c6:	f000 f821 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	490a      	ldr	r1, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	5ccb      	ldrb	r3, [r1, r3]
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc ff0e 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023c00 	.word	0x40023c00
 80040fc:	40023800 	.word	0x40023800
 8004100:	08009574 	.word	0x08009574
 8004104:	20000000 	.word	0x20000000
 8004108:	20000004 	.word	0x20000004

0800410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004110:	b094      	sub	sp, #80	; 0x50
 8004112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	647b      	str	r3, [r7, #68]	; 0x44
 8004118:	2300      	movs	r3, #0
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411c:	2300      	movs	r3, #0
 800411e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004124:	4b79      	ldr	r3, [pc, #484]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d00d      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x40>
 8004130:	2b08      	cmp	r3, #8
 8004132:	f200 80e1 	bhi.w	80042f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x34>
 800413a:	2b04      	cmp	r3, #4
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x3a>
 800413e:	e0db      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_GetSysClockFreq+0x204>)
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004144:	e0db      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004146:	4b73      	ldr	r3, [pc, #460]	; (8004314 <HAL_RCC_GetSysClockFreq+0x208>)
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414a:	e0d8      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800414c:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004156:	4b6d      	ldr	r3, [pc, #436]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004162:	4b6a      	ldr	r3, [pc, #424]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	2200      	movs	r2, #0
 800416a:	63bb      	str	r3, [r7, #56]	; 0x38
 800416c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004174:	633b      	str	r3, [r7, #48]	; 0x30
 8004176:	2300      	movs	r3, #0
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
 800417a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800417e:	4622      	mov	r2, r4
 8004180:	462b      	mov	r3, r5
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	0159      	lsls	r1, r3, #5
 800418c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004190:	0150      	lsls	r0, r2, #5
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4621      	mov	r1, r4
 8004198:	1a51      	subs	r1, r2, r1
 800419a:	6139      	str	r1, [r7, #16]
 800419c:	4629      	mov	r1, r5
 800419e:	eb63 0301 	sbc.w	r3, r3, r1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b0:	4659      	mov	r1, fp
 80041b2:	018b      	lsls	r3, r1, #6
 80041b4:	4651      	mov	r1, sl
 80041b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ba:	4651      	mov	r1, sl
 80041bc:	018a      	lsls	r2, r1, #6
 80041be:	4651      	mov	r1, sl
 80041c0:	ebb2 0801 	subs.w	r8, r2, r1
 80041c4:	4659      	mov	r1, fp
 80041c6:	eb63 0901 	sbc.w	r9, r3, r1
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041de:	4690      	mov	r8, r2
 80041e0:	4699      	mov	r9, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	eb18 0303 	adds.w	r3, r8, r3
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	462b      	mov	r3, r5
 80041ec:	eb49 0303 	adc.w	r3, r9, r3
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041fe:	4629      	mov	r1, r5
 8004200:	024b      	lsls	r3, r1, #9
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004208:	4621      	mov	r1, r4
 800420a:	024a      	lsls	r2, r1, #9
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004212:	2200      	movs	r2, #0
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 8004216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800421c:	f7fb ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004228:	e058      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422a:	4b38      	ldr	r3, [pc, #224]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	099b      	lsrs	r3, r3, #6
 8004230:	2200      	movs	r2, #0
 8004232:	4618      	mov	r0, r3
 8004234:	4611      	mov	r1, r2
 8004236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
 8004240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	f04f 0000 	mov.w	r0, #0
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	0159      	lsls	r1, r3, #5
 8004252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004256:	0150      	lsls	r0, r2, #5
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4641      	mov	r1, r8
 800425e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004262:	4649      	mov	r1, r9
 8004264:	eb63 0b01 	sbc.w	fp, r3, r1
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800427c:	ebb2 040a 	subs.w	r4, r2, sl
 8004280:	eb63 050b 	sbc.w	r5, r3, fp
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	00eb      	lsls	r3, r5, #3
 800428e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004292:	00e2      	lsls	r2, r4, #3
 8004294:	4614      	mov	r4, r2
 8004296:	461d      	mov	r5, r3
 8004298:	4643      	mov	r3, r8
 800429a:	18e3      	adds	r3, r4, r3
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	464b      	mov	r3, r9
 80042a0:	eb45 0303 	adc.w	r3, r5, r3
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042b2:	4629      	mov	r1, r5
 80042b4:	028b      	lsls	r3, r1, #10
 80042b6:	4621      	mov	r1, r4
 80042b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042bc:	4621      	mov	r1, r4
 80042be:	028a      	lsls	r2, r1, #10
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	2200      	movs	r2, #0
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	61fa      	str	r2, [r7, #28]
 80042cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d0:	f7fb ff82 	bl	80001d8 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_GetSysClockFreq+0x200>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetSysClockFreq+0x204>)
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004300:	4618      	mov	r0, r3
 8004302:	3750      	adds	r7, #80	; 0x50
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400
 8004314:	007a1200 	.word	0x007a1200

08004318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_RCC_GetHCLKFreq+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff0 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	08009584 	.word	0x08009584

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffdc 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0b5b      	lsrs	r3, r3, #13
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	08009584 	.word	0x08009584

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d038      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a8:	4b68      	ldr	r3, [pc, #416]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ae:	f7fc fdef 	bl	8000f90 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043b6:	f7fc fdeb 	bl	8000f90 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0bd      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c8:	4b61      	ldr	r3, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	495a      	ldr	r1, [pc, #360]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043ee:	4b57      	ldr	r3, [pc, #348]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043f4:	f7fc fdcc 	bl	8000f90 <HAL_GetTick>
 80043f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043fc:	f7fc fdc8 	bl	8000f90 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e09a      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800440e:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8083 	beq.w	800452e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a47      	ldr	r2, [pc, #284]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
 8004438:	4b45      	ldr	r3, [pc, #276]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004444:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a42      	ldr	r2, [pc, #264]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004450:	f7fc fd9e 	bl	8000f90 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fc fd9a 	bl	8000f90 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e06c      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02f      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d028      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004494:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d114      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fc fd68 	bl	8000f90 <HAL_GetTick>
 80044c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fc fd64 	bl	8000f90 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e034      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ee      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d10d      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	4911      	ldr	r1, [pc, #68]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
 800450e:	e005      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800451a:	6093      	str	r3, [r2, #8]
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004528:	4909      	ldr	r1, [pc, #36]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	4313      	orrs	r3, r2
 800452c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7d1a      	ldrb	r2, [r3, #20]
 800453e:	4b07      	ldr	r3, [pc, #28]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004540:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	42470068 	.word	0x42470068
 8004550:	40023800 	.word	0x40023800
 8004554:	40007000 	.word	0x40007000
 8004558:	42470e40 	.word	0x42470e40
 800455c:	424711e0 	.word	0x424711e0

08004560 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d140      	bne.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d131      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004594:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004596:	617b      	str	r3, [r7, #20]
          break;
 8004598:	e031      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a6:	d109      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b2:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e008      	b.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	099b      	lsrs	r3, r3, #6
 80045d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e8:	0f1b      	lsrs	r3, r3, #28
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
          break;
 80045f6:	e002      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
          break;
 80045fc:	bf00      	nop
        }
      }
      break;
 80045fe:	bf00      	nop
    }
  }
  return frequency;
 8004600:	697b      	ldr	r3, [r7, #20]
}
 8004602:	4618      	mov	r0, r3
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00bb8000 	.word	0x00bb8000
 8004618:	007a1200 	.word	0x007a1200
 800461c:	00f42400 	.word	0x00f42400

08004620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07b      	b.n	800472a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004642:	d009      	beq.n	8004658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	61da      	str	r2, [r3, #28]
 800464a:	e005      	b.n	8004658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc fade 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 0104 	and.w	r1, r3, #4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0210 	and.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b088      	sub	sp, #32
 8004736:	af02      	add	r7, sp, #8
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d112      	bne.n	8004776 <HAL_SPI_Receive+0x44>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10e      	bne.n	8004776 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2204      	movs	r2, #4
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f8f1 	bl	8004954 <HAL_SPI_TransmitReceive>
 8004772:	4603      	mov	r3, r0
 8004774:	e0ea      	b.n	800494c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_SPI_Receive+0x52>
 8004780:	2302      	movs	r3, #2
 8004782:	e0e3      	b.n	800494c <HAL_SPI_Receive+0x21a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478c:	f7fc fc00 	bl	8000f90 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800479e:	2302      	movs	r3, #2
 80047a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047a2:	e0ca      	b.n	800493a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Receive+0x7e>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047b4:	e0c1      	b.n	800493a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2204      	movs	r2, #4
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fc:	d10f      	bne.n	800481e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800481c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d007      	beq.n	800483c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d162      	bne.n	800490a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004844:	e02e      	b.n	80048a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d115      	bne.n	8004880 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f103 020c 	add.w	r2, r3, #12
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800487e:	e011      	b.n	80048a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004880:	f7fc fb86 	bl	8000f90 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d803      	bhi.n	8004898 <HAL_SPI_Receive+0x166>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <HAL_SPI_Receive+0x16c>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048a2:	e04a      	b.n	800493a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1cb      	bne.n	8004846 <HAL_SPI_Receive+0x114>
 80048ae:	e031      	b.n	8004914 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d113      	bne.n	80048e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	b292      	uxth	r2, r2
 80048ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	1c9a      	adds	r2, r3, #2
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048e4:	e011      	b.n	800490a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e6:	f7fc fb53 	bl	8000f90 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d803      	bhi.n	80048fe <HAL_SPI_Receive+0x1cc>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d102      	bne.n	8004904 <HAL_SPI_Receive+0x1d2>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004908:	e017      	b.n	800493a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1cd      	bne.n	80048b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fa45 	bl	8004da8 <SPI_EndRxTransaction>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
 8004936:	e000      	b.n	800493a <HAL_SPI_Receive+0x208>
  }

error :
 8004938:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800494a:	7dfb      	ldrb	r3, [r7, #23]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08c      	sub	sp, #48	; 0x30
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004962:	2301      	movs	r3, #1
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_SPI_TransmitReceive+0x26>
 8004976:	2302      	movs	r3, #2
 8004978:	e18a      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x33c>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004982:	f7fc fb05 	bl	8000f90 <HAL_GetTick>
 8004986:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800499c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d00f      	beq.n	80049c4 <HAL_SPI_TransmitReceive+0x70>
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049aa:	d107      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x68>
 80049b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d003      	beq.n	80049c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049c2:	e15b      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x82>
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049dc:	e14e      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d003      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2205      	movs	r2, #5
 80049ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	887a      	ldrh	r2, [r7, #2]
 8004a02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	887a      	ldrh	r2, [r7, #2]
 8004a1a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d007      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4e:	d178      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x10a>
 8004a58:	8b7b      	ldrh	r3, [r7, #26]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d166      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	1c9a      	adds	r2, r3, #2
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a82:	e053      	b.n	8004b2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d11b      	bne.n	8004aca <HAL_SPI_TransmitReceive+0x176>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d016      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x176>
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d113      	bne.n	8004aca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d119      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x1b8>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d014      	beq.n	8004b0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	b292      	uxth	r2, r2
 8004aee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	1c9a      	adds	r2, r3, #2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b0c:	f7fc fa40 	bl	8000f90 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d807      	bhi.n	8004b2c <HAL_SPI_TransmitReceive+0x1d8>
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d003      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b2a:	e0a7      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1a6      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x130>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1a1      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x130>
 8004b40:	e07c      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x1fc>
 8004b4a:	8b7b      	ldrh	r3, [r7, #26]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d16b      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b76:	e057      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d11c      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x26c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x26c>
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d114      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d119      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x2ae>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d014      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c02:	f7fc f9c5 	bl	8000f90 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d803      	bhi.n	8004c1a <HAL_SPI_TransmitReceive+0x2c6>
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d102      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x2cc>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c26:	e029      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1a2      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x224>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d19d      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f917 	bl	8004e74 <SPI_EndRxTxTransaction>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c58:	e010      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	e000      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3730      	adds	r7, #48	; 0x30
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ca8:	f7fc f972 	bl	8000f90 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cb8:	f7fc f96a 	bl	8000f90 <HAL_GetTick>
 8004cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	015b      	lsls	r3, r3, #5
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	e054      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d050      	beq.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd8:	f7fc f95a 	bl	8000f90 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d902      	bls.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d13d      	bne.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d111      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d10:	d004      	beq.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d107      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d34:	d10f      	bne.n	8004d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e017      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d19b      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000

08004da8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dbc:	d111      	bne.n	8004de2 <SPI_EndRxTransaction+0x3a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc6:	d004      	beq.n	8004dd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd0:	d107      	bne.n	8004de2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d12a      	bne.n	8004e42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df4:	d012      	beq.n	8004e1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff ff49 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02d      	beq.n	8004e68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e026      	b.n	8004e6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	2101      	movs	r1, #1
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff ff36 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01a      	beq.n	8004e68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e013      	b.n	8004e6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff ff23 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e000      	b.n	8004e6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e80:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <SPI_EndRxTxTransaction+0x7c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <SPI_EndRxTxTransaction+0x80>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0d5b      	lsrs	r3, r3, #21
 8004e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e90:	fb02 f303 	mul.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9e:	d112      	bne.n	8004ec6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff fef4 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e00f      	b.n	8004ee6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b80      	cmp	r3, #128	; 0x80
 8004ede:	d0f2      	beq.n	8004ec6 <SPI_EndRxTxTransaction+0x52>
 8004ee0:	e000      	b.n	8004ee4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ee2:	bf00      	nop
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	165e9f81 	.word	0x165e9f81

08004ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e03f      	b.n	8004f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb fed0 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fc7b 	bl	8005838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b0ba      	sub	sp, #232	; 0xe8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_UART_IRQHandler+0x66>
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fb65 	bl	80056c2 <UART_Receive_IT>
      return;
 8004ff8:	e256      	b.n	80054a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80de 	beq.w	80051c0 <HAL_UART_IRQHandler+0x22c>
 8005004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005014:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80d1 	beq.w	80051c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_UART_IRQHandler+0xae>
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f043 0201 	orr.w	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_UART_IRQHandler+0xd2>
 800504e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f043 0202 	orr.w	r2, r3, #2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_UART_IRQHandler+0xf6>
 8005072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f043 0204 	orr.w	r2, r3, #4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d011      	beq.n	80050ba <HAL_UART_IRQHandler+0x126>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d105      	bne.n	80050ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f043 0208 	orr.w	r2, r3, #8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 81ed 	beq.w	800549e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_UART_IRQHandler+0x14e>
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 faf0 	bl	80056c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <HAL_UART_IRQHandler+0x17a>
 8005106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d04f      	beq.n	80051ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9f8 	bl	8005504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d141      	bne.n	80051a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800514e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800515a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1d9      	bne.n	8005122 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	2b00      	cmp	r3, #0
 8005174:	d013      	beq.n	800519e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4a7d      	ldr	r2, [pc, #500]	; (8005370 <HAL_UART_IRQHandler+0x3dc>)
 800517c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	4618      	mov	r0, r3
 8005184:	f7fc f8b5 	bl	80012f2 <HAL_DMA_Abort_IT>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	e00e      	b.n	80051bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f99a 	bl	80054d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e00a      	b.n	80051bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f996 	bl	80054d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	e006      	b.n	80051bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f992 	bl	80054d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051ba:	e170      	b.n	800549e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	bf00      	nop
    return;
 80051be:	e16e      	b.n	800549e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	f040 814a 	bne.w	800545e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8143 	beq.w	800545e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 813c 	beq.w	800545e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	f040 80b4 	bne.w	8005374 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005218:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8140 	beq.w	80054a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800522a:	429a      	cmp	r2, r3
 800522c:	f080 8139 	bcs.w	80054a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005236:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	f000 8088 	beq.w	8005356 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800525c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005272:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800527e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800528a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1d9      	bne.n	8005246 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e1      	bne.n	8005292 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3314      	adds	r3, #20
 80052d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e3      	bne.n	80052ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005338:	65ba      	str	r2, [r7, #88]	; 0x58
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800533e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e3      	bne.n	8005314 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	4618      	mov	r0, r3
 8005352:	f7fb ff5e 	bl	8001212 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535e:	b29b      	uxth	r3, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8c0 	bl	80054ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800536c:	e099      	b.n	80054a2 <HAL_UART_IRQHandler+0x50e>
 800536e:	bf00      	nop
 8005370:	080055cb 	.word	0x080055cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 808b 	beq.w	80054a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8086 	beq.w	80054a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053be:	647a      	str	r2, [r7, #68]	; 0x44
 80053c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e3      	bne.n	800539a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053f6:	633a      	str	r2, [r7, #48]	; 0x30
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60fb      	str	r3, [r7, #12]
   return(result);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800543c:	61fa      	str	r2, [r7, #28]
 800543e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f848 	bl	80054ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800545c:	e023      	b.n	80054a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_UART_IRQHandler+0x4ea>
 800546a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8bb 	bl	80055f2 <UART_Transmit_IT>
    return;
 800547c:	e014      	b.n	80054a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <HAL_UART_IRQHandler+0x514>
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8fb 	bl	8005692 <UART_EndTransmit_IT>
    return;
 800549c:	e004      	b.n	80054a8 <HAL_UART_IRQHandler+0x514>
    return;
 800549e:	bf00      	nop
 80054a0:	e002      	b.n	80054a8 <HAL_UART_IRQHandler+0x514>
      return;
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <HAL_UART_IRQHandler+0x514>
      return;
 80054a6:	bf00      	nop
  }
}
 80054a8:	37e8      	adds	r7, #232	; 0xe8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop

080054b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b095      	sub	sp, #84	; 0x54
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552c:	643a      	str	r2, [r7, #64]	; 0x40
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	64bb      	str	r3, [r7, #72]	; 0x48
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	2b01      	cmp	r3, #1
 800557a:	d119      	bne.n	80055b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60bb      	str	r3, [r7, #8]
   return(result);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 0310 	bic.w	r3, r3, #16
 8005592:	647b      	str	r3, [r7, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559c:	61ba      	str	r2, [r7, #24]
 800559e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6979      	ldr	r1, [r7, #20]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	613b      	str	r3, [r7, #16]
   return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055be:	bf00      	nop
 80055c0:	3754      	adds	r7, #84	; 0x54
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff77 	bl	80054d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b21      	cmp	r3, #33	; 0x21
 8005604:	d13e      	bne.n	8005684 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560e:	d114      	bne.n	800563a <UART_Transmit_IT+0x48>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d110      	bne.n	800563a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800562c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	621a      	str	r2, [r3, #32]
 8005638:	e008      	b.n	800564c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6211      	str	r1, [r2, #32]
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4619      	mov	r1, r3
 800565a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10f      	bne.n	8005680 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800566e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fefc 	bl	80054b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b08c      	sub	sp, #48	; 0x30
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b22      	cmp	r3, #34	; 0x22
 80056d4:	f040 80ab 	bne.w	800582e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d117      	bne.n	8005712 <UART_Receive_IT+0x50>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d113      	bne.n	8005712 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	b29a      	uxth	r2, r3
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	1c9a      	adds	r2, r3, #2
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
 8005710:	e026      	b.n	8005760 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d007      	beq.n	8005736 <UART_Receive_IT+0x74>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <UART_Receive_IT+0x82>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e008      	b.n	8005756 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	b2da      	uxtb	r2, r3
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29b      	uxth	r3, r3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4619      	mov	r1, r3
 800576e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005770:	2b00      	cmp	r3, #0
 8005772:	d15a      	bne.n	800582a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0220 	bic.w	r2, r2, #32
 8005782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d135      	bne.n	8005820 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f023 0310 	bic.w	r3, r3, #16
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057da:	623a      	str	r2, [r7, #32]
 80057dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	69f9      	ldr	r1, [r7, #28]
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d10a      	bne.n	8005812 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fe67 	bl	80054ec <HAL_UARTEx_RxEventCallback>
 800581e:	e002      	b.n	8005826 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fe4f 	bl	80054c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e002      	b.n	8005830 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e000      	b.n	8005830 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800582e:	2302      	movs	r3, #2
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3730      	adds	r7, #48	; 0x30
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800583c:	b0c0      	sub	sp, #256	; 0x100
 800583e:	af00      	add	r7, sp, #0
 8005840:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	68d9      	ldr	r1, [r3, #12]
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	ea40 0301 	orr.w	r3, r0, r1
 8005860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	431a      	orrs	r2, r3
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	431a      	orrs	r2, r3
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005890:	f021 010c 	bic.w	r1, r1, #12
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800589e:	430b      	orrs	r3, r1
 80058a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	6999      	ldr	r1, [r3, #24]
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	ea40 0301 	orr.w	r3, r0, r1
 80058be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b8f      	ldr	r3, [pc, #572]	; (8005b04 <UART_SetConfig+0x2cc>)
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d005      	beq.n	80058d8 <UART_SetConfig+0xa0>
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b8d      	ldr	r3, [pc, #564]	; (8005b08 <UART_SetConfig+0x2d0>)
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d104      	bne.n	80058e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058d8:	f7fe fd3e 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 80058dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058e0:	e003      	b.n	80058ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058e2:	f7fe fd25 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 80058e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	f040 810c 	bne.w	8005b10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005902:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005906:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	1891      	adds	r1, r2, r2
 8005910:	65b9      	str	r1, [r7, #88]	; 0x58
 8005912:	415b      	adcs	r3, r3
 8005914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005916:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800591a:	4621      	mov	r1, r4
 800591c:	eb12 0801 	adds.w	r8, r2, r1
 8005920:	4629      	mov	r1, r5
 8005922:	eb43 0901 	adc.w	r9, r3, r1
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593a:	4690      	mov	r8, r2
 800593c:	4699      	mov	r9, r3
 800593e:	4623      	mov	r3, r4
 8005940:	eb18 0303 	adds.w	r3, r8, r3
 8005944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005948:	462b      	mov	r3, r5
 800594a:	eb49 0303 	adc.w	r3, r9, r3
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800595e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005962:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005966:	460b      	mov	r3, r1
 8005968:	18db      	adds	r3, r3, r3
 800596a:	653b      	str	r3, [r7, #80]	; 0x50
 800596c:	4613      	mov	r3, r2
 800596e:	eb42 0303 	adc.w	r3, r2, r3
 8005972:	657b      	str	r3, [r7, #84]	; 0x54
 8005974:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005978:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800597c:	f7fa fc2c 	bl	80001d8 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4b61      	ldr	r3, [pc, #388]	; (8005b0c <UART_SetConfig+0x2d4>)
 8005986:	fba3 2302 	umull	r2, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	011c      	lsls	r4, r3, #4
 800598e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005992:	2200      	movs	r2, #0
 8005994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005998:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800599c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	1891      	adds	r1, r2, r2
 80059a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80059a8:	415b      	adcs	r3, r3
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059b0:	4641      	mov	r1, r8
 80059b2:	eb12 0a01 	adds.w	sl, r2, r1
 80059b6:	4649      	mov	r1, r9
 80059b8:	eb43 0b01 	adc.w	fp, r3, r1
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d0:	4692      	mov	sl, r2
 80059d2:	469b      	mov	fp, r3
 80059d4:	4643      	mov	r3, r8
 80059d6:	eb1a 0303 	adds.w	r3, sl, r3
 80059da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059de:	464b      	mov	r3, r9
 80059e0:	eb4b 0303 	adc.w	r3, fp, r3
 80059e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059fc:	460b      	mov	r3, r1
 80059fe:	18db      	adds	r3, r3, r3
 8005a00:	643b      	str	r3, [r7, #64]	; 0x40
 8005a02:	4613      	mov	r3, r2
 8005a04:	eb42 0303 	adc.w	r3, r2, r3
 8005a08:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a12:	f7fa fbe1 	bl	80001d8 <__aeabi_uldivmod>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4b3b      	ldr	r3, [pc, #236]	; (8005b0c <UART_SetConfig+0x2d4>)
 8005a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2264      	movs	r2, #100	; 0x64
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	1acb      	subs	r3, r1, r3
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a32:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <UART_SetConfig+0x2d4>)
 8005a34:	fba3 2302 	umull	r2, r3, r3, r2
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a40:	441c      	add	r4, r3
 8005a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	1891      	adds	r1, r2, r2
 8005a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a5c:	415b      	adcs	r3, r3
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a64:	4641      	mov	r1, r8
 8005a66:	1851      	adds	r1, r2, r1
 8005a68:	6339      	str	r1, [r7, #48]	; 0x30
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	414b      	adcs	r3, r1
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	00cb      	lsls	r3, r1, #3
 8005a80:	4651      	mov	r1, sl
 8005a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a86:	4651      	mov	r1, sl
 8005a88:	00ca      	lsls	r2, r1, #3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4642      	mov	r2, r8
 8005a92:	189b      	adds	r3, r3, r2
 8005a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a98:	464b      	mov	r3, r9
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ab0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ab4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ab8:	460b      	mov	r3, r1
 8005aba:	18db      	adds	r3, r3, r3
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abe:	4613      	mov	r3, r2
 8005ac0:	eb42 0303 	adc.w	r3, r2, r3
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ace:	f7fa fb83 	bl	80001d8 <__aeabi_uldivmod>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <UART_SetConfig+0x2d4>)
 8005ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	2164      	movs	r1, #100	; 0x64
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	3332      	adds	r3, #50	; 0x32
 8005aea:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <UART_SetConfig+0x2d4>)
 8005aec:	fba2 2303 	umull	r2, r3, r2, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f003 0207 	and.w	r2, r3, #7
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4422      	add	r2, r4
 8005afe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b00:	e105      	b.n	8005d0e <UART_SetConfig+0x4d6>
 8005b02:	bf00      	nop
 8005b04:	40011000 	.word	0x40011000
 8005b08:	40011400 	.word	0x40011400
 8005b0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b22:	4642      	mov	r2, r8
 8005b24:	464b      	mov	r3, r9
 8005b26:	1891      	adds	r1, r2, r2
 8005b28:	6239      	str	r1, [r7, #32]
 8005b2a:	415b      	adcs	r3, r3
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b32:	4641      	mov	r1, r8
 8005b34:	1854      	adds	r4, r2, r1
 8005b36:	4649      	mov	r1, r9
 8005b38:	eb43 0501 	adc.w	r5, r3, r1
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	00eb      	lsls	r3, r5, #3
 8005b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4a:	00e2      	lsls	r2, r4, #3
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	461d      	mov	r5, r3
 8005b50:	4643      	mov	r3, r8
 8005b52:	18e3      	adds	r3, r4, r3
 8005b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b58:	464b      	mov	r3, r9
 8005b5a:	eb45 0303 	adc.w	r3, r5, r3
 8005b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b7e:	4629      	mov	r1, r5
 8005b80:	008b      	lsls	r3, r1, #2
 8005b82:	4621      	mov	r1, r4
 8005b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b88:	4621      	mov	r1, r4
 8005b8a:	008a      	lsls	r2, r1, #2
 8005b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b90:	f7fa fb22 	bl	80001d8 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4b60      	ldr	r3, [pc, #384]	; (8005d1c <UART_SetConfig+0x4e4>)
 8005b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	011c      	lsls	r4, r3, #4
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	61b9      	str	r1, [r7, #24]
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	1851      	adds	r1, r2, r1
 8005bc8:	6139      	str	r1, [r7, #16]
 8005bca:	4649      	mov	r1, r9
 8005bcc:	414b      	adcs	r3, r1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bdc:	4659      	mov	r1, fp
 8005bde:	00cb      	lsls	r3, r1, #3
 8005be0:	4651      	mov	r1, sl
 8005be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be6:	4651      	mov	r1, sl
 8005be8:	00ca      	lsls	r2, r1, #3
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	189b      	adds	r3, r3, r2
 8005bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	eb42 0303 	adc.w	r3, r2, r3
 8005c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	008b      	lsls	r3, r1, #2
 8005c20:	4641      	mov	r1, r8
 8005c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c26:	4641      	mov	r1, r8
 8005c28:	008a      	lsls	r2, r1, #2
 8005c2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c2e:	f7fa fad3 	bl	80001d8 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <UART_SetConfig+0x4e4>)
 8005c38:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	2164      	movs	r1, #100	; 0x64
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	3332      	adds	r3, #50	; 0x32
 8005c4a:	4a34      	ldr	r2, [pc, #208]	; (8005d1c <UART_SetConfig+0x4e4>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c56:	441c      	add	r4, r3
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c60:	677a      	str	r2, [r7, #116]	; 0x74
 8005c62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c66:	4642      	mov	r2, r8
 8005c68:	464b      	mov	r3, r9
 8005c6a:	1891      	adds	r1, r2, r2
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	415b      	adcs	r3, r3
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c76:	4641      	mov	r1, r8
 8005c78:	1851      	adds	r1, r2, r1
 8005c7a:	6039      	str	r1, [r7, #0]
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	414b      	adcs	r3, r1
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c8e:	4659      	mov	r1, fp
 8005c90:	00cb      	lsls	r3, r1, #3
 8005c92:	4651      	mov	r1, sl
 8005c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c98:	4651      	mov	r1, sl
 8005c9a:	00ca      	lsls	r2, r1, #3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	4642      	mov	r2, r8
 8005ca4:	189b      	adds	r3, r3, r2
 8005ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca8:	464b      	mov	r3, r9
 8005caa:	460a      	mov	r2, r1
 8005cac:	eb42 0303 	adc.w	r3, r2, r3
 8005cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	663b      	str	r3, [r7, #96]	; 0x60
 8005cbc:	667a      	str	r2, [r7, #100]	; 0x64
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cca:	4649      	mov	r1, r9
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	4641      	mov	r1, r8
 8005cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	008a      	lsls	r2, r1, #2
 8005cd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cdc:	f7fa fa7c 	bl	80001d8 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <UART_SetConfig+0x4e4>)
 8005ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2164      	movs	r1, #100	; 0x64
 8005cee:	fb01 f303 	mul.w	r3, r1, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	3332      	adds	r3, #50	; 0x32
 8005cf8:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <UART_SetConfig+0x4e4>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4422      	add	r2, r4
 8005d0c:	609a      	str	r2, [r3, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d14:	46bd      	mov	sp, r7
 8005d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d1a:	bf00      	nop
 8005d1c:	51eb851f 	.word	0x51eb851f

08005d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d20:	b084      	sub	sp, #16
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	f107 001c 	add.w	r0, r7, #28
 8005d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d122      	bne.n	8005d7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d105      	bne.n	8005d72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9c0 	bl	80060f8 <USB_CoreReset>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	e01a      	b.n	8005db4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9b4 	bl	80060f8 <USB_CoreReset>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
 8005da6:	e005      	b.n	8005db4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10b      	bne.n	8005dd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f043 0206 	orr.w	r2, r3, #6
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dde:	b004      	add	sp, #16
 8005de0:	4770      	bx	lr

08005de2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f023 0201 	bic.w	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d115      	bne.n	8005e74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e54:	2001      	movs	r0, #1
 8005e56:	f7fb f8a7 	bl	8000fa8 <HAL_Delay>
      ms++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f93a 	bl	80060da <USB_GetMode>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d01e      	beq.n	8005eaa <USB_SetCurrentMode+0x84>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b31      	cmp	r3, #49	; 0x31
 8005e70:	d9f0      	bls.n	8005e54 <USB_SetCurrentMode+0x2e>
 8005e72:	e01a      	b.n	8005eaa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d115      	bne.n	8005ea6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e86:	2001      	movs	r0, #1
 8005e88:	f7fb f88e 	bl	8000fa8 <HAL_Delay>
      ms++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f921 	bl	80060da <USB_GetMode>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <USB_SetCurrentMode+0x84>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b31      	cmp	r3, #49	; 0x31
 8005ea2:	d9f0      	bls.n	8005e86 <USB_SetCurrentMode+0x60>
 8005ea4:	e001      	b.n	8005eaa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e005      	b.n	8005eb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b32      	cmp	r3, #50	; 0x32
 8005eae:	d101      	bne.n	8005eb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <USB_FlushTxFifo+0x64>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e01b      	b.n	8005f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	daf2      	bge.n	8005ece <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	019b      	lsls	r3, r3, #6
 8005ef0:	f043 0220 	orr.w	r2, r3, #32
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a08      	ldr	r2, [pc, #32]	; (8005f24 <USB_FlushTxFifo+0x64>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e006      	b.n	8005f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d0f0      	beq.n	8005ef8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	00030d40 	.word	0x00030d40

08005f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <USB_FlushRxFifo+0x5c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e018      	b.n	8005f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	daf2      	bge.n	8005f34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2210      	movs	r2, #16
 8005f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <USB_FlushRxFifo+0x5c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e006      	b.n	8005f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d0f0      	beq.n	8005f58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	00030d40 	.word	0x00030d40

08005f88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4611      	mov	r1, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	460b      	mov	r3, r1
 8005f98:	71fb      	strb	r3, [r7, #7]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d123      	bne.n	8005ff6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fae:	88bb      	ldrh	r3, [r7, #4]
 8005fb0:	3303      	adds	r3, #3
 8005fb2:	089b      	lsrs	r3, r3, #2
 8005fb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	e018      	b.n	8005fee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	031a      	lsls	r2, r3, #12
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc8:	461a      	mov	r2, r3
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	3301      	adds	r3, #1
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d3e2      	bcc.n	8005fbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3724      	adds	r7, #36	; 0x24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006004:	b480      	push	{r7}
 8006006:	b08b      	sub	sp, #44	; 0x2c
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	b29b      	uxth	r3, r3
 8006020:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800602a:	2300      	movs	r3, #0
 800602c:	623b      	str	r3, [r7, #32]
 800602e:	e014      	b.n	800605a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	601a      	str	r2, [r3, #0]
    pDest++;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	3301      	adds	r3, #1
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	3301      	adds	r3, #1
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	3301      	adds	r3, #1
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	3301      	adds	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	3301      	adds	r3, #1
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	6a3a      	ldr	r2, [r7, #32]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	429a      	cmp	r2, r3
 8006060:	d3e6      	bcc.n	8006030 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006062:	8bfb      	ldrh	r3, [r7, #30]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01e      	beq.n	80060a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006072:	461a      	mov	r2, r3
 8006074:	f107 0310 	add.w	r3, r7, #16
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
 8006088:	b2da      	uxtb	r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	701a      	strb	r2, [r3, #0]
      i++;
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	3301      	adds	r3, #1
 8006092:	623b      	str	r3, [r7, #32]
      pDest++;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	3301      	adds	r3, #1
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800609a:	8bfb      	ldrh	r3, [r7, #30]
 800609c:	3b01      	subs	r3, #1
 800609e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060a0:	8bfb      	ldrh	r3, [r7, #30]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1ea      	bne.n	800607c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	372c      	adds	r7, #44	; 0x2c
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0301 	and.w	r3, r3, #1
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <USB_CoreReset+0x64>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e01b      	b.n	800614e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	daf2      	bge.n	8006104 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f043 0201 	orr.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <USB_CoreReset+0x64>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e006      	b.n	800614e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d0f0      	beq.n	800612e <USB_CoreReset+0x36>

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	00030d40 	.word	0x00030d40

08006160 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006160:	b084      	sub	sp, #16
 8006162:	b580      	push	{r7, lr}
 8006164:	b086      	sub	sp, #24
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800616e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d018      	beq.n	80061e8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d10a      	bne.n	80061d2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ca:	f043 0304 	orr.w	r3, r3, #4
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e014      	b.n	80061fc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061e0:	f023 0304 	bic.w	r3, r3, #4
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e009      	b.n	80061fc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061f6:	f023 0304 	bic.w	r3, r3, #4
 80061fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061fc:	2110      	movs	r1, #16
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fe5e 	bl	8005ec0 <USB_FlushTxFifo>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fe8a 	bl	8005f28 <USB_FlushRxFifo>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e015      	b.n	8006250 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	461a      	mov	r2, r3
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d3e5      	bcc.n	8006224 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006278:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a13      	ldr	r2, [pc, #76]	; (80062cc <USB_HostInit+0x16c>)
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <USB_HostInit+0x170>)
 8006284:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006288:	e009      	b.n	800629e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <USB_HostInit+0x174>)
 8006294:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <USB_HostInit+0x178>)
 800629a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f043 0210 	orr.w	r2, r3, #16
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <USB_HostInit+0x17c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c8:	b004      	add	sp, #16
 80062ca:	4770      	bx	lr
 80062cc:	01000200 	.word	0x01000200
 80062d0:	00e00300 	.word	0x00e00300
 80062d4:	00600080 	.word	0x00600080
 80062d8:	004000e0 	.word	0x004000e0
 80062dc:	a3200008 	.word	0xa3200008

080062e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006318:	4313      	orrs	r3, r2
 800631a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d107      	bne.n	8006332 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006328:	461a      	mov	r2, r3
 800632a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800632e:	6053      	str	r3, [r2, #4]
 8006330:	e009      	b.n	8006346 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d106      	bne.n	8006346 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633e:	461a      	mov	r2, r3
 8006340:	f241 7370 	movw	r3, #6000	; 0x1770
 8006344:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006374:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800637e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006382:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006384:	2064      	movs	r0, #100	; 0x64
 8006386:	f7fa fe0f 	bl	8000fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006396:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006398:	200a      	movs	r0, #10
 800639a:	f7fa fe05 	bl	8000fa8 <HAL_Delay>

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <USB_DriveVbus+0x44>
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d106      	bne.n	80063ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f6:	d109      	bne.n	800640c <USB_DriveVbus+0x64>
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	0c5b      	lsrs	r3, r3, #17
 8006438:	f003 0303 	and.w	r3, r3, #3
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	b29b      	uxth	r3, r3
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4603      	mov	r3, r0
 800647c:	70fb      	strb	r3, [r7, #3]
 800647e:	460b      	mov	r3, r1
 8006480:	70bb      	strb	r3, [r7, #2]
 8006482:	4613      	mov	r3, r2
 8006484:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	461a      	mov	r2, r3
 800649c:	f04f 33ff 	mov.w	r3, #4294967295
 80064a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80064a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d87e      	bhi.n	80065a8 <USB_HC_Init+0x13c>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <USB_HC_Init+0x44>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064c1 	.word	0x080064c1
 80064b4:	0800656b 	.word	0x0800656b
 80064b8:	080064c1 	.word	0x080064c1
 80064bc:	0800652d 	.word	0x0800652d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	461a      	mov	r2, r3
 80064ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80064d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80064d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da10      	bge.n	80064fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80064fc:	e057      	b.n	80065ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d051      	beq.n	80065ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	440a      	add	r2, r1
 8006520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006524:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006528:	60d3      	str	r3, [r2, #12]
      break;
 800652a:	e040      	b.n	80065ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	461a      	mov	r2, r3
 800653a:	f240 639d 	movw	r3, #1693	; 0x69d
 800653e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006540:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006544:	2b00      	cmp	r3, #0
 8006546:	da34      	bge.n	80065b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	440a      	add	r2, r1
 800655e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006566:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006568:	e023      	b.n	80065b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	461a      	mov	r2, r3
 8006578:	f240 2325 	movw	r3, #549	; 0x225
 800657c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800657e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006582:	2b00      	cmp	r3, #0
 8006584:	da17      	bge.n	80065b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	78fa      	ldrb	r2, [r7, #3]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	440a      	add	r2, r1
 800659c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80065a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80065a6:	e006      	b.n	80065b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	77fb      	strb	r3, [r7, #31]
      break;
 80065ac:	e004      	b.n	80065b8 <USB_HC_Init+0x14c>
      break;
 80065ae:	bf00      	nop
 80065b0:	e002      	b.n	80065b8 <USB_HC_Init+0x14c>
      break;
 80065b2:	bf00      	nop
 80065b4:	e000      	b.n	80065b8 <USB_HC_Init+0x14c>
      break;
 80065b6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d2:	f043 0302 	orr.w	r3, r3, #2
 80065d6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	2101      	movs	r1, #1
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	6939      	ldr	r1, [r7, #16]
 80065ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065f2:	4313      	orrs	r3, r2
 80065f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006602:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006606:	2b00      	cmp	r3, #0
 8006608:	da03      	bge.n	8006612 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	e001      	b.n	8006616 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff feff 	bl	800641a <USB_GetHostSpeed>
 800661c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800661e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006622:	2b02      	cmp	r3, #2
 8006624:	d106      	bne.n	8006634 <USB_HC_Init+0x1c8>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d003      	beq.n	8006634 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800662c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e001      	b.n	8006638 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006638:	787b      	ldrb	r3, [r7, #1]
 800663a:	059b      	lsls	r3, r3, #22
 800663c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006640:	78bb      	ldrb	r3, [r7, #2]
 8006642:	02db      	lsls	r3, r3, #11
 8006644:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006648:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800664a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800664e:	049b      	lsls	r3, r3, #18
 8006650:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006654:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006656:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006658:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800665c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	0159      	lsls	r1, r3, #5
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	440b      	add	r3, r1
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006674:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006676:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800667a:	2b03      	cmp	r3, #3
 800667c:	d003      	beq.n	8006686 <USB_HC_Init+0x21a>
 800667e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10f      	bne.n	80066a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	440a      	add	r2, r1
 800669c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	; 0x30
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80066c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d02d      	beq.n	8006736 <USB_HC_StartXfer+0x86>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d129      	bne.n	8006736 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d117      	bne.n	8006718 <USB_HC_StartXfer+0x68>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	79db      	ldrb	r3, [r3, #7]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <USB_HC_StartXfer+0x48>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	79db      	ldrb	r3, [r3, #7]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d10f      	bne.n	8006718 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	440a      	add	r2, r1
 800670e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <USB_HC_StartXfer+0x86>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	795b      	ldrb	r3, [r3, #5]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fa0f 	bl	8006b50 <USB_DoPing>
      return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e0f8      	b.n	8006928 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d018      	beq.n	8006770 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	8912      	ldrh	r2, [r2, #8]
 8006746:	4413      	add	r3, r2
 8006748:	3b01      	subs	r3, #1
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	8912      	ldrh	r2, [r2, #8]
 800674e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006752:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006754:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006756:	8b7b      	ldrh	r3, [r7, #26]
 8006758:	429a      	cmp	r2, r3
 800675a:	d90b      	bls.n	8006774 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800675c:	8b7b      	ldrh	r3, [r7, #26]
 800675e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	8912      	ldrh	r2, [r2, #8]
 8006766:	fb03 f202 	mul.w	r2, r3, r2
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	611a      	str	r2, [r3, #16]
 800676e:	e001      	b.n	8006774 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006770:	2301      	movs	r3, #1
 8006772:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	78db      	ldrb	r3, [r3, #3]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800677c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	8912      	ldrh	r2, [r2, #8]
 8006782:	fb03 f202 	mul.w	r2, r3, r2
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	611a      	str	r2, [r3, #16]
 800678a:	e003      	b.n	8006794 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	695a      	ldr	r2, [r3, #20]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800679c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800679e:	04d9      	lsls	r1, r3, #19
 80067a0:	4b63      	ldr	r3, [pc, #396]	; (8006930 <USB_HC_StartXfer+0x280>)
 80067a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	7a9b      	ldrb	r3, [r3, #10]
 80067aa:	075b      	lsls	r3, r3, #29
 80067ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	0148      	lsls	r0, r1, #5
 80067b4:	6a39      	ldr	r1, [r7, #32]
 80067b6:	4401      	add	r1, r0
 80067b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80067be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	460a      	mov	r2, r1
 80067d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bf0c      	ite	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	2300      	movne	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006810:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	7e7b      	ldrb	r3, [r7, #25]
 8006822:	075b      	lsls	r3, r3, #29
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	0148      	lsls	r0, r1, #5
 8006828:	6a39      	ldr	r1, [r7, #32]
 800682a:	4401      	add	r1, r0
 800682c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006830:	4313      	orrs	r3, r2
 8006832:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800684a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	78db      	ldrb	r3, [r3, #3]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e003      	b.n	8006866 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006864:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800686c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	461a      	mov	r2, r3
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e04e      	b.n	8006928 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	78db      	ldrb	r3, [r3, #3]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d149      	bne.n	8006926 <USB_HC_StartXfer+0x276>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d045      	beq.n	8006926 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	79db      	ldrb	r3, [r3, #7]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d830      	bhi.n	8006904 <USB_HC_StartXfer+0x254>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <USB_HC_StartXfer+0x1f8>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068dd 	.word	0x080068dd
 80068b0:	080068b9 	.word	0x080068b9
 80068b4:	080068dd 	.word	0x080068dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	3303      	adds	r3, #3
 80068be:	089b      	lsrs	r3, r3, #2
 80068c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068c2:	8afa      	ldrh	r2, [r7, #22]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d91c      	bls.n	8006908 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f043 0220 	orr.w	r2, r3, #32
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80068da:	e015      	b.n	8006908 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	3303      	adds	r3, #3
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068e6:	8afa      	ldrh	r2, [r7, #22]
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d90a      	bls.n	800690c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	619a      	str	r2, [r3, #24]
        }
        break;
 8006902:	e003      	b.n	800690c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006904:	bf00      	nop
 8006906:	e002      	b.n	800690e <USB_HC_StartXfer+0x25e>
        break;
 8006908:	bf00      	nop
 800690a:	e000      	b.n	800690e <USB_HC_StartXfer+0x25e>
        break;
 800690c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68d9      	ldr	r1, [r3, #12]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	785a      	ldrb	r2, [r3, #1]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	b29b      	uxth	r3, r3
 800691c:	2000      	movs	r0, #0
 800691e:	9000      	str	r0, [sp, #0]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff fb31 	bl	8005f88 <USB_WritePacket>
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3728      	adds	r7, #40	; 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	1ff80000 	.word	0x1ff80000

08006934 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	b29b      	uxth	r3, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006956:	b480      	push	{r7}
 8006958:	b089      	sub	sp, #36	; 0x24
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	460b      	mov	r3, r1
 8006960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	0c9b      	lsrs	r3, r3, #18
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	0fdb      	lsrs	r3, r3, #31
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d104      	bne.n	80069b0 <USB_HC_Halt+0x5a>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e0c8      	b.n	8006b42 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <USB_HC_Halt+0x66>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d163      	bne.n	8006a84 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 80ab 	bne.w	8006b40 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d133      	bne.n	8006a5e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a14:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a34:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a42:	d81d      	bhi.n	8006a80 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5a:	d0ec      	beq.n	8006a36 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a5c:	e070      	b.n	8006b40 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a7e:	e05f      	b.n	8006b40 <USB_HC_Halt+0x1ea>
            break;
 8006a80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a82:	e05d      	b.n	8006b40 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d133      	bne.n	8006b1c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b00:	d81d      	bhi.n	8006b3e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b18:	d0ec      	beq.n	8006af4 <USB_HC_Halt+0x19e>
 8006b1a:	e011      	b.n	8006b40 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	e000      	b.n	8006b40 <USB_HC_Halt+0x1ea>
          break;
 8006b3e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3724      	adds	r7, #36	; 0x24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b64:	2301      	movs	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	04da      	lsls	r2, r3, #19
 8006b6c:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <USB_DoPing+0x74>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	1ff80000 	.word	0x1ff80000

08006bc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff f911 	bl	8005e04 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006be2:	2110      	movs	r1, #16
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff f96b 	bl	8005ec0 <USB_FlushTxFifo>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff f997 	bl	8005f28 <USB_FlushRxFifo>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e01f      	b.n	8006c4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	461a      	mov	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	3301      	adds	r3, #1
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d9dc      	bls.n	8006c0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c50:	2300      	movs	r3, #0
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	e034      	b.n	8006cc0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3301      	adds	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c9c:	d80c      	bhi.n	8006cb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb4:	d0ec      	beq.n	8006c90 <USB_StopHost+0xc8>
 8006cb6:	e000      	b.n	8006cba <USB_StopHost+0xf2>
        break;
 8006cb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d9c7      	bls.n	8006c56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff f880 	bl	8005de2 <USB_EnableGlobalInt>

  return ret;
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b089      	sub	sp, #36	; 0x24
 8006cf0:	af04      	add	r7, sp, #16
 8006cf2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	2102      	movs	r1, #2
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fc66 	bl	80075cc <USBH_FindInterface>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2bff      	cmp	r3, #255	; 0xff
 8006d08:	d002      	beq.n	8006d10 <USBH_CDC_InterfaceInit+0x24>
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d901      	bls.n	8006d14 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d10:	2302      	movs	r3, #2
 8006d12:	e13d      	b.n	8006f90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fc3b 	bl	8007594 <USBH_SelectInterface>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e131      	b.n	8006f90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d32:	2050      	movs	r0, #80	; 0x50
 8006d34:	f002 fafa 	bl	800932c <malloc>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e11f      	b.n	8006f90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d50:	2250      	movs	r2, #80	; 0x50
 8006d52:	2100      	movs	r1, #0
 8006d54:	68b8      	ldr	r0, [r7, #8]
 8006d56:	f002 faf9 	bl	800934c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	211a      	movs	r1, #26
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da15      	bge.n	8006d9e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	211a      	movs	r1, #26
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d82:	781a      	ldrb	r2, [r3, #0]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	211a      	movs	r1, #26
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d98:	881a      	ldrh	r2, [r3, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 ff2c 	bl	8008c02 <USBH_AllocPipe>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	7819      	ldrb	r1, [r3, #0]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	7858      	ldrb	r0, [r3, #1]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	8952      	ldrh	r2, [r2, #10]
 8006dca:	9202      	str	r2, [sp, #8]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	9201      	str	r2, [sp, #4]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fee4 	bl	8008ba4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2200      	movs	r2, #0
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f002 f9f3 	bl	80091d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006dea:	2300      	movs	r3, #0
 8006dec:	2200      	movs	r2, #0
 8006dee:	210a      	movs	r1, #10
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fbeb 	bl	80075cc <USBH_FindInterface>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2bff      	cmp	r3, #255	; 0xff
 8006dfe:	d002      	beq.n	8006e06 <USBH_CDC_InterfaceInit+0x11a>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d901      	bls.n	8006e0a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e06:	2302      	movs	r3, #2
 8006e08:	e0c2      	b.n	8006f90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	211a      	movs	r1, #26
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da16      	bge.n	8006e50 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	211a      	movs	r1, #26
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	211a      	movs	r1, #26
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e48:	881a      	ldrh	r2, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	835a      	strh	r2, [r3, #26]
 8006e4e:	e015      	b.n	8006e7c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	211a      	movs	r1, #26
 8006e56:	fb01 f303 	mul.w	r3, r1, r3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	211a      	movs	r1, #26
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	211a      	movs	r1, #26
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da16      	bge.n	8006ec2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	211a      	movs	r1, #26
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	211a      	movs	r1, #26
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006eba:	881a      	ldrh	r2, [r3, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	835a      	strh	r2, [r3, #26]
 8006ec0:	e015      	b.n	8006eee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	211a      	movs	r1, #26
 8006ec8:	fb01 f303 	mul.w	r3, r1, r3
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	211a      	movs	r1, #26
 8006ede:	fb01 f303 	mul.w	r3, r1, r3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ee8:	881a      	ldrh	r2, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	7b9b      	ldrb	r3, [r3, #14]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fe84 	bl	8008c02 <USBH_AllocPipe>
 8006efa:	4603      	mov	r3, r0
 8006efc:	461a      	mov	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	7bdb      	ldrb	r3, [r3, #15]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fe7a 	bl	8008c02 <USBH_AllocPipe>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	7b59      	ldrb	r1, [r3, #13]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	7b98      	ldrb	r0, [r3, #14]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	8b12      	ldrh	r2, [r2, #24]
 8006f2e:	9202      	str	r2, [sp, #8]
 8006f30:	2202      	movs	r2, #2
 8006f32:	9201      	str	r2, [sp, #4]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	4623      	mov	r3, r4
 8006f38:	4602      	mov	r2, r0
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fe32 	bl	8008ba4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	7b19      	ldrb	r1, [r3, #12]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	7bd8      	ldrb	r0, [r3, #15]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	8b52      	ldrh	r2, [r2, #26]
 8006f58:	9202      	str	r2, [sp, #8]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	9201      	str	r2, [sp, #4]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4623      	mov	r3, r4
 8006f62:	4602      	mov	r2, r0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fe1d 	bl	8008ba4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	7b5b      	ldrb	r3, [r3, #13]
 8006f76:	2200      	movs	r2, #0
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f002 f928 	bl	80091d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	7b1b      	ldrb	r3, [r3, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f002 f921 	bl	80091d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd90      	pop	{r4, r7, pc}

08006f98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00e      	beq.n	8006fd0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fe12 	bl	8008be2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 fe3d 	bl	8008c44 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00e      	beq.n	8006ff6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fdff 	bl	8008be2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	7b1b      	ldrb	r3, [r3, #12]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fe2a 	bl	8008c44 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	7b5b      	ldrb	r3, [r3, #13]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00e      	beq.n	800701c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	7b5b      	ldrb	r3, [r3, #13]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fdec 	bl	8008be2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	7b5b      	ldrb	r3, [r3, #13]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 fe17 	bl	8008c44 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	4618      	mov	r0, r3
 8007032:	f002 f983 	bl	800933c <free>
    phost->pActiveClass->pData = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703c:	2200      	movs	r2, #0
 800703e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3340      	adds	r3, #64	; 0x40
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f8b1 	bl	80071ca <GetLineCoding>
 8007068:	4603      	mov	r3, r0
 800706a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007078:	2102      	movs	r1, #2
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800707e:	7afb      	ldrb	r3, [r7, #11]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d877      	bhi.n	800719c <USBH_CDC_Process+0x114>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <USBH_CDC_Process+0x2c>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070c9 	.word	0x080070c9
 80070b8:	080070cf 	.word	0x080070cf
 80070bc:	080070ff 	.word	0x080070ff
 80070c0:	08007173 	.word	0x08007173
 80070c4:	08007181 	.word	0x08007181
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e06d      	b.n	80071aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f897 	bl	8007208 <SetLineCoding>
 80070da:	4603      	mov	r3, r0
 80070dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070ec:	e058      	b.n	80071a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d055      	beq.n	80071a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070fc:	e050      	b.n	80071a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3340      	adds	r3, #64	; 0x40
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f860 	bl	80071ca <GetLineCoding>
 800710a:	4603      	mov	r3, r0
 800710c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d126      	bne.n	8007162 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007126:	791b      	ldrb	r3, [r3, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d13b      	bne.n	80071a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007138:	429a      	cmp	r2, r3
 800713a:	d133      	bne.n	80071a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007146:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007148:	429a      	cmp	r2, r3
 800714a:	d12b      	bne.n	80071a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007154:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007156:	429a      	cmp	r2, r3
 8007158:	d124      	bne.n	80071a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f958 	bl	8007410 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007160:	e020      	b.n	80071a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d01d      	beq.n	80071a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2204      	movs	r2, #4
 800716c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007170:	e018      	b.n	80071a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f867 	bl	8007246 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8da 	bl	8007332 <CDC_ProcessReception>
      break;
 800717e:	e014      	b.n	80071aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007180:	2100      	movs	r1, #0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 ffef 	bl	8008166 <USBH_ClrFeature>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800719a:	e005      	b.n	80071a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800719c:	bf00      	nop
 800719e:	e004      	b.n	80071aa <USBH_CDC_Process+0x122>
      break;
 80071a0:	bf00      	nop
 80071a2:	e002      	b.n	80071aa <USBH_CDC_Process+0x122>
      break;
 80071a4:	bf00      	nop
 80071a6:	e000      	b.n	80071aa <USBH_CDC_Process+0x122>
      break;
 80071a8:	bf00      	nop

  }

  return status;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	22a1      	movs	r2, #161	; 0xa1
 80071d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2221      	movs	r2, #33	; 0x21
 80071de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2207      	movs	r2, #7
 80071f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2207      	movs	r2, #7
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 fa81 	bl	8008700 <USBH_CtlReq>
 80071fe:	4603      	mov	r3, r0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2207      	movs	r2, #7
 800722e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2207      	movs	r2, #7
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fa62 	bl	8008700 <USBH_CtlReq>
 800723c:	4603      	mov	r3, r0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af02      	add	r7, sp, #8
 800724c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007258:	2300      	movs	r3, #0
 800725a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007262:	2b01      	cmp	r3, #1
 8007264:	d002      	beq.n	800726c <CDC_ProcessTransmission+0x26>
 8007266:	2b02      	cmp	r3, #2
 8007268:	d023      	beq.n	80072b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800726a:	e05e      	b.n	800732a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	8b12      	ldrh	r2, [r2, #24]
 8007274:	4293      	cmp	r3, r2
 8007276:	d90b      	bls.n	8007290 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	69d9      	ldr	r1, [r3, #28]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8b1a      	ldrh	r2, [r3, #24]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	7b5b      	ldrb	r3, [r3, #13]
 8007284:	2001      	movs	r0, #1
 8007286:	9000      	str	r0, [sp, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fc48 	bl	8008b1e <USBH_BulkSendData>
 800728e:	e00b      	b.n	80072a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	7b5b      	ldrb	r3, [r3, #13]
 800729e:	2001      	movs	r0, #1
 80072a0:	9000      	str	r0, [sp, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fc3b 	bl	8008b1e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072b0:	e03b      	b.n	800732a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	7b5b      	ldrb	r3, [r3, #13]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 ff5f 	bl	800917c <USBH_LL_GetURBState>
 80072be:	4603      	mov	r3, r0
 80072c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d128      	bne.n	800731a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	8b12      	ldrh	r2, [r2, #24]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d90e      	bls.n	80072f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	8b12      	ldrh	r2, [r2, #24]
 80072dc:	1a9a      	subs	r2, r3, r2
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	8b12      	ldrh	r2, [r2, #24]
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	61da      	str	r2, [r3, #28]
 80072f0:	e002      	b.n	80072f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007308:	e00e      	b.n	8007328 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f868 	bl	80073e8 <USBH_CDC_TransmitCallback>
      break;
 8007318:	e006      	b.n	8007328 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d103      	bne.n	8007328 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007328:	bf00      	nop
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007344:	2300      	movs	r3, #0
 8007346:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800734e:	2b03      	cmp	r3, #3
 8007350:	d002      	beq.n	8007358 <CDC_ProcessReception+0x26>
 8007352:	2b04      	cmp	r3, #4
 8007354:	d00e      	beq.n	8007374 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007356:	e043      	b.n	80073e0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	6a19      	ldr	r1, [r3, #32]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	8b5a      	ldrh	r2, [r3, #26]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	7b1b      	ldrb	r3, [r3, #12]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fbff 	bl	8008b68 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2204      	movs	r2, #4
 800736e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007372:	e035      	b.n	80073e0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	7b1b      	ldrb	r3, [r3, #12]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fefe 	bl	800917c <USBH_LL_GetURBState>
 8007380:	4603      	mov	r3, r0
 8007382:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007384:	7cfb      	ldrb	r3, [r7, #19]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d129      	bne.n	80073de <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	7b1b      	ldrb	r3, [r3, #12]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fe61 	bl	8009058 <USBH_LL_GetLastXferSize>
 8007396:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d016      	beq.n	80073d0 <CDC_ProcessReception+0x9e>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	8b5b      	ldrh	r3, [r3, #26]
 80073a6:	461a      	mov	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d910      	bls.n	80073d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad2      	subs	r2, r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	441a      	add	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2203      	movs	r2, #3
 80073ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073ce:	e006      	b.n	80073de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f80f 	bl	80073fc <USBH_CDC_ReceiveCallback>
      break;
 80073de:	bf00      	nop
  }
}
 80073e0:	bf00      	nop
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	e029      	b.n	8007490 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	79fa      	ldrb	r2, [r7, #7]
 8007440:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f81f 	bl	8007498 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f001 fd31 	bl	8008ef0 <USBH_LL_Init>

  return USBH_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	e009      	b.n	80074be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	33e0      	adds	r3, #224	; 0xe0
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b0f      	cmp	r3, #15
 80074c2:	d9f2      	bls.n	80074aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e009      	b.n	80074de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e4:	d3f1      	bcc.n	80074ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2240      	movs	r2, #64	; 0x40
 800750a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d016      	beq.n	8007582 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10e      	bne.n	800757c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	33de      	adds	r3, #222	; 0xde
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
 800757a:	e004      	b.n	8007586 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800757c:	2302      	movs	r3, #2
 800757e:	73fb      	strb	r3, [r7, #15]
 8007580:	e001      	b.n	8007586 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007582:	2302      	movs	r3, #2
 8007584:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d204      	bcs.n	80075ba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075b8:	e001      	b.n	80075be <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075ba:	2302      	movs	r3, #2
 80075bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	70fb      	strb	r3, [r7, #3]
 80075de:	460b      	mov	r3, r1
 80075e0:	70bb      	strb	r3, [r7, #2]
 80075e2:	4613      	mov	r3, r2
 80075e4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075f6:	e025      	b.n	8007644 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	221a      	movs	r2, #26
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	3308      	adds	r3, #8
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	3302      	adds	r3, #2
 8007608:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	795b      	ldrb	r3, [r3, #5]
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	429a      	cmp	r2, r3
 8007612:	d002      	beq.n	800761a <USBH_FindInterface+0x4e>
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	2bff      	cmp	r3, #255	; 0xff
 8007618:	d111      	bne.n	800763e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800761e:	78ba      	ldrb	r2, [r7, #2]
 8007620:	429a      	cmp	r2, r3
 8007622:	d002      	beq.n	800762a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007624:	78bb      	ldrb	r3, [r7, #2]
 8007626:	2bff      	cmp	r3, #255	; 0xff
 8007628:	d109      	bne.n	800763e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800762e:	787a      	ldrb	r2, [r7, #1]
 8007630:	429a      	cmp	r2, r3
 8007632:	d002      	beq.n	800763a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007634:	787b      	ldrb	r3, [r7, #1]
 8007636:	2bff      	cmp	r3, #255	; 0xff
 8007638:	d101      	bne.n	800763e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	e006      	b.n	800764c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	3301      	adds	r3, #1
 8007642:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d9d6      	bls.n	80075f8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800764a:	23ff      	movs	r3, #255	; 0xff
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fc81 	bl	8008f68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007666:	2101      	movs	r1, #1
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fd9a 	bl	80091a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af04      	add	r7, sp, #16
 800767e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007680:	2302      	movs	r3, #2
 8007682:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d102      	bne.n	800769a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2203      	movs	r2, #3
 8007698:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b0b      	cmp	r3, #11
 80076a2:	f200 81be 	bhi.w	8007a22 <USBH_Process+0x3aa>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <USBH_Process+0x34>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	0800770f 	.word	0x0800770f
 80076b4:	08007777 	.word	0x08007777
 80076b8:	080079bd 	.word	0x080079bd
 80076bc:	08007a23 	.word	0x08007a23
 80076c0:	0800781b 	.word	0x0800781b
 80076c4:	08007963 	.word	0x08007963
 80076c8:	08007851 	.word	0x08007851
 80076cc:	08007871 	.word	0x08007871
 80076d0:	08007891 	.word	0x08007891
 80076d4:	080078d5 	.word	0x080078d5
 80076d8:	080079a5 	.word	0x080079a5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 819e 	beq.w	8007a26 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076f0:	20c8      	movs	r0, #200	; 0xc8
 80076f2:	f001 fd9d 	bl	8009230 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fc93 	bl	8009022 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800770c:	e18b      	b.n	8007a26 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007714:	2b01      	cmp	r3, #1
 8007716:	d107      	bne.n	8007728 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007726:	e18d      	b.n	8007a44 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800772e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007732:	d914      	bls.n	800775e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800773a:	3301      	adds	r3, #1
 800773c:	b2da      	uxtb	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800774a:	2b03      	cmp	r3, #3
 800774c:	d903      	bls.n	8007756 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	220d      	movs	r2, #13
 8007752:	701a      	strb	r2, [r3, #0]
      break;
 8007754:	e176      	b.n	8007a44 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]
      break;
 800775c:	e172      	b.n	8007a44 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007764:	f103 020a 	add.w	r2, r3, #10
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800776e:	200a      	movs	r0, #10
 8007770:	f001 fd5e 	bl	8009230 <USBH_Delay>
      break;
 8007774:	e166      	b.n	8007a44 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007786:	2104      	movs	r1, #4
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800778c:	2064      	movs	r0, #100	; 0x64
 800778e:	f001 fd4f 	bl	8009230 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fc1e 	bl	8008fd4 <USBH_LL_GetSpeed>
 8007798:	4603      	mov	r3, r0
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2205      	movs	r2, #5
 80077a6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fa29 	bl	8008c02 <USBH_AllocPipe>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077b8:	2180      	movs	r1, #128	; 0x80
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fa21 	bl	8008c02 <USBH_AllocPipe>
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	7919      	ldrb	r1, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077dc:	b292      	uxth	r2, r2
 80077de:	9202      	str	r2, [sp, #8]
 80077e0:	2200      	movs	r2, #0
 80077e2:	9201      	str	r2, [sp, #4]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4603      	mov	r3, r0
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f9da 	bl	8008ba4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7959      	ldrb	r1, [r3, #5]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007804:	b292      	uxth	r2, r2
 8007806:	9202      	str	r2, [sp, #8]
 8007808:	2200      	movs	r2, #0
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	4603      	mov	r3, r0
 8007810:	2200      	movs	r2, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 f9c6 	bl	8008ba4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007818:	e114      	b.n	8007a44 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f918 	bl	8007a50 <USBH_HandleEnum>
 8007820:	4603      	mov	r3, r0
 8007822:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	f040 80fe 	bne.w	8007a2a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800783c:	2b01      	cmp	r3, #1
 800783e:	d103      	bne.n	8007848 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2208      	movs	r2, #8
 8007844:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007846:	e0f0      	b.n	8007a2a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2207      	movs	r2, #7
 800784c:	701a      	strb	r2, [r3, #0]
      break;
 800784e:	e0ec      	b.n	8007a2a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80e9 	beq.w	8007a2e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007862:	2101      	movs	r1, #1
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2208      	movs	r2, #8
 800786c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800786e:	e0de      	b.n	8007a2e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007876:	b29b      	uxth	r3, r3
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fc2c 	bl	80080d8 <USBH_SetCfg>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	f040 80d5 	bne.w	8007a32 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2209      	movs	r2, #9
 800788c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800788e:	e0d0      	b.n	8007a32 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800789e:	2101      	movs	r1, #1
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc3c 	bl	800811e <USBH_SetFeature>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	220a      	movs	r2, #10
 80078b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078b8:	e0bd      	b.n	8007a36 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b03      	cmp	r3, #3
 80078c0:	f040 80b9 	bne.w	8007a36 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220a      	movs	r2, #10
 80078c8:	701a      	strb	r2, [r3, #0]
      break;
 80078ca:	e0b4      	b.n	8007a36 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	220a      	movs	r2, #10
 80078d0:	701a      	strb	r2, [r3, #0]
      break;
 80078d2:	e0b0      	b.n	8007a36 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80ad 	beq.w	8007a3a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
 80078ec:	e016      	b.n	800791c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078ee:	7bfa      	ldrb	r2, [r7, #15]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	32de      	adds	r2, #222	; 0xde
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	791a      	ldrb	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007900:	429a      	cmp	r2, r3
 8007902:	d108      	bne.n	8007916 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007904:	7bfa      	ldrb	r2, [r7, #15]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32de      	adds	r2, #222	; 0xde
 800790a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007914:	e005      	b.n	8007922 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	3301      	adds	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0e5      	beq.n	80078ee <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d016      	beq.n	800795a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2206      	movs	r2, #6
 8007942:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800794a:	2103      	movs	r1, #3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007950:	e073      	b.n	8007a3a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	220d      	movs	r2, #13
 8007956:	701a      	strb	r2, [r3, #0]
      break;
 8007958:	e06f      	b.n	8007a3a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	220d      	movs	r2, #13
 800795e:	701a      	strb	r2, [r3, #0]
      break;
 8007960:	e06b      	b.n	8007a3a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d017      	beq.n	800799c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
 8007978:	4603      	mov	r3, r0
 800797a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	220b      	movs	r2, #11
 8007988:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800798a:	e058      	b.n	8007a3e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d154      	bne.n	8007a3e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	220d      	movs	r2, #13
 8007998:	701a      	strb	r2, [r3, #0]
      break;
 800799a:	e050      	b.n	8007a3e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	220d      	movs	r2, #13
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	e04c      	b.n	8007a3e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d049      	beq.n	8007a42 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
      }
      break;
 80079ba:	e042      	b.n	8007a42 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fd67 	bl	8007498 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079f8:	2105      	movs	r1, #5
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d107      	bne.n	8007a1a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fe20 	bl	8007658 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a18:	e014      	b.n	8007a44 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 faa4 	bl	8008f68 <USBH_LL_Start>
      break;
 8007a20:	e010      	b.n	8007a44 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a22:	bf00      	nop
 8007a24:	e00e      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a26:	bf00      	nop
 8007a28:	e00c      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e00a      	b.n	8007a44 <USBH_Process+0x3cc>
    break;
 8007a2e:	bf00      	nop
 8007a30:	e008      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a32:	bf00      	nop
 8007a34:	e006      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a36:	bf00      	nop
 8007a38:	e004      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a3a:	bf00      	nop
 8007a3c:	e002      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a3e:	bf00      	nop
 8007a40:	e000      	b.n	8007a44 <USBH_Process+0x3cc>
      break;
 8007a42:	bf00      	nop
  }
  return USBH_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop

08007a50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af04      	add	r7, sp, #16
 8007a56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b07      	cmp	r3, #7
 8007a66:	f200 81c1 	bhi.w	8007dec <USBH_HandleEnum+0x39c>
 8007a6a:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <USBH_HandleEnum+0x20>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007b4f 	.word	0x08007b4f
 8007a78:	08007bb9 	.word	0x08007bb9
 8007a7c:	08007c47 	.word	0x08007c47
 8007a80:	08007cb1 	.word	0x08007cb1
 8007a84:	08007d21 	.word	0x08007d21
 8007a88:	08007d67 	.word	0x08007d67
 8007a8c:	08007dad 	.word	0x08007dad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a90:	2108      	movs	r1, #8
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa50 	bl	8007f38 <USBH_Get_DevDesc>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d130      	bne.n	8007b04 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7919      	ldrb	r1, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	9202      	str	r2, [sp, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	9201      	str	r2, [sp, #4]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2280      	movs	r2, #128	; 0x80
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f865 	bl	8008ba4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7959      	ldrb	r1, [r3, #5]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aee:	b292      	uxth	r2, r2
 8007af0:	9202      	str	r2, [sp, #8]
 8007af2:	2200      	movs	r2, #0
 8007af4:	9201      	str	r2, [sp, #4]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4603      	mov	r3, r0
 8007afa:	2200      	movs	r2, #0
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f851 	bl	8008ba4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b02:	e175      	b.n	8007df0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	f040 8172 	bne.w	8007df0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b12:	3301      	adds	r3, #1
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d903      	bls.n	8007b2e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	220d      	movs	r2, #13
 8007b2a:	701a      	strb	r2, [r3, #0]
      break;
 8007b2c:	e160      	b.n	8007df0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	795b      	ldrb	r3, [r3, #5]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f885 	bl	8008c44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	791b      	ldrb	r3, [r3, #4]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 f87f 	bl	8008c44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
      break;
 8007b4c:	e150      	b.n	8007df0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b4e:	2112      	movs	r1, #18
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f9f1 	bl	8007f38 <USBH_Get_DevDesc>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d103      	bne.n	8007b68 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b66:	e145      	b.n	8007df4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	f040 8142 	bne.w	8007df4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b76:	3301      	adds	r3, #1
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d903      	bls.n	8007b92 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	220d      	movs	r2, #13
 8007b8e:	701a      	strb	r2, [r3, #0]
      break;
 8007b90:	e130      	b.n	8007df4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	795b      	ldrb	r3, [r3, #5]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f853 	bl	8008c44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f84d 	bl	8008c44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
      break;
 8007bb6:	e11d      	b.n	8007df4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007bb8:	2101      	movs	r1, #1
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa68 	bl	8008090 <USBH_SetAddress>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d132      	bne.n	8007c30 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007bca:	2002      	movs	r0, #2
 8007bcc:	f001 fb30 	bl	8009230 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2203      	movs	r2, #3
 8007bdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	7919      	ldrb	r1, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	9202      	str	r2, [sp, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	9201      	str	r2, [sp, #4]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2280      	movs	r2, #128	; 0x80
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 ffcf 	bl	8008ba4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7959      	ldrb	r1, [r3, #5]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c1a:	b292      	uxth	r2, r2
 8007c1c:	9202      	str	r2, [sp, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	9201      	str	r2, [sp, #4]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4603      	mov	r3, r0
 8007c26:	2200      	movs	r2, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 ffbb 	bl	8008ba4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c2e:	e0e3      	b.n	8007df8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	f040 80e0 	bne.w	8007df8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	220d      	movs	r2, #13
 8007c3c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	705a      	strb	r2, [r3, #1]
      break;
 8007c44:	e0d8      	b.n	8007df8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c46:	2109      	movs	r1, #9
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f99d 	bl	8007f88 <USBH_Get_CfgDesc>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c5e:	e0cd      	b.n	8007dfc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	f040 80ca 	bne.w	8007dfc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c6e:	3301      	adds	r3, #1
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d903      	bls.n	8007c8a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	220d      	movs	r2, #13
 8007c86:	701a      	strb	r2, [r3, #0]
      break;
 8007c88:	e0b8      	b.n	8007dfc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	795b      	ldrb	r3, [r3, #5]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 ffd7 	bl	8008c44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 ffd1 	bl	8008c44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
      break;
 8007cae:	e0a5      	b.n	8007dfc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f965 	bl	8007f88 <USBH_Get_CfgDesc>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2205      	movs	r2, #5
 8007ccc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cce:	e097      	b.n	8007e00 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	f040 8094 	bne.w	8007e00 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cde:	3301      	adds	r3, #1
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d903      	bls.n	8007cfa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	220d      	movs	r2, #13
 8007cf6:	701a      	strb	r2, [r3, #0]
      break;
 8007cf8:	e082      	b.n	8007e00 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	795b      	ldrb	r3, [r3, #5]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 ff9f 	bl	8008c44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	791b      	ldrb	r3, [r3, #4]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 ff99 	bl	8008c44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
      break;
 8007d1e:	e06f      	b.n	8007e00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d019      	beq.n	8007d5e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d36:	23ff      	movs	r3, #255	; 0xff
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f949 	bl	8007fd0 <USBH_Get_StringDesc>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2206      	movs	r2, #6
 8007d4c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d4e:	e059      	b.n	8007e04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d156      	bne.n	8007e04 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2206      	movs	r2, #6
 8007d5a:	705a      	strb	r2, [r3, #1]
      break;
 8007d5c:	e052      	b.n	8007e04 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2206      	movs	r2, #6
 8007d62:	705a      	strb	r2, [r3, #1]
      break;
 8007d64:	e04e      	b.n	8007e04 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d019      	beq.n	8007da4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d7c:	23ff      	movs	r3, #255	; 0xff
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f926 	bl	8007fd0 <USBH_Get_StringDesc>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d103      	bne.n	8007d96 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2207      	movs	r2, #7
 8007d92:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d94:	e038      	b.n	8007e08 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d135      	bne.n	8007e08 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2207      	movs	r2, #7
 8007da0:	705a      	strb	r2, [r3, #1]
      break;
 8007da2:	e031      	b.n	8007e08 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2207      	movs	r2, #7
 8007da8:	705a      	strb	r2, [r3, #1]
      break;
 8007daa:	e02d      	b.n	8007e08 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d017      	beq.n	8007de6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dc2:	23ff      	movs	r3, #255	; 0xff
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f903 	bl	8007fd0 <USBH_Get_StringDesc>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007dd8:	e018      	b.n	8007e0c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d115      	bne.n	8007e0c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
      break;
 8007de4:	e012      	b.n	8007e0c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dea:	e00f      	b.n	8007e0c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007dec:	bf00      	nop
 8007dee:	e00e      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007df0:	bf00      	nop
 8007df2:	e00c      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007df4:	bf00      	nop
 8007df6:	e00a      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e008      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e006      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007e00:	bf00      	nop
 8007e02:	e004      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007e04:	bf00      	nop
 8007e06:	e002      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007e08:	bf00      	nop
 8007e0a:	e000      	b.n	8007e0e <USBH_HandleEnum+0x3be>
      break;
 8007e0c:	bf00      	nop
  }
  return Status;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f804 	bl	8007e5a <USBH_HandleSof>
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b0b      	cmp	r3, #11
 8007e6a:	d10a      	bne.n	8007e82 <USBH_HandleSof+0x28>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
  }
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e9a:	bf00      	nop
}
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007eb6:	bf00      	nop
}
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f844 	bl	8008f9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	791b      	ldrb	r3, [r3, #4]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fe91 	bl	8008c44 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fe8b 	bl	8008c44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	4613      	mov	r3, r2
 8007f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f56:	2100      	movs	r1, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f864 	bl	8008026 <USBH_GetDescriptor>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f74:	78fa      	ldrb	r2, [r7, #3]
 8007f76:	b292      	uxth	r2, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f000 f918 	bl	80081ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	331c      	adds	r3, #28
 8007f98:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f9a:	887b      	ldrh	r3, [r7, #2]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f83d 	bl	8008026 <USBH_GetDescriptor>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d107      	bne.n	8007fc6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007fb6:	887b      	ldrh	r3, [r7, #2]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f987 	bl	80082d0 <USBH_ParseCfgDesc>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	460b      	mov	r3, r1
 8007fde:	72fb      	strb	r3, [r7, #11]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f812 	bl	8008026 <USBH_GetDescriptor>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d107      	bne.n	800801c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008012:	893a      	ldrh	r2, [r7, #8]
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fb24 	bl	8008664 <USBH_ParseStringDesc>
  }

  return status;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	607b      	str	r3, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	72fb      	strb	r3, [r7, #11]
 8008034:	4613      	mov	r3, r2
 8008036:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	789b      	ldrb	r3, [r3, #2]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d11c      	bne.n	800807a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008040:	7afb      	ldrb	r3, [r7, #11]
 8008042:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008046:	b2da      	uxtb	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2206      	movs	r2, #6
 8008050:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	893a      	ldrh	r2, [r7, #8]
 8008056:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800805e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008062:	d104      	bne.n	800806e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f240 4209 	movw	r2, #1033	; 0x409
 800806a:	829a      	strh	r2, [r3, #20]
 800806c:	e002      	b.n	8008074 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8b3a      	ldrh	r2, [r7, #24]
 8008078:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800807a:	8b3b      	ldrh	r3, [r7, #24]
 800807c:	461a      	mov	r2, r3
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fb3d 	bl	8008700 <USBH_CtlReq>
 8008086:	4603      	mov	r3, r0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	789b      	ldrb	r3, [r3, #2]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d10f      	bne.n	80080c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2205      	movs	r2, #5
 80080ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080c4:	2200      	movs	r2, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fb19 	bl	8008700 <USBH_CtlReq>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	789b      	ldrb	r3, [r3, #2]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d10e      	bne.n	800810a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2209      	movs	r2, #9
 80080f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	887a      	ldrh	r2, [r7, #2]
 80080fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 faf6 	bl	8008700 <USBH_CtlReq>
 8008114:	4603      	mov	r3, r0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	789b      	ldrb	r3, [r3, #2]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d10f      	bne.n	8008152 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2203      	movs	r2, #3
 800813c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fad2 	bl	8008700 <USBH_CtlReq>
 800815c:	4603      	mov	r3, r0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	789b      	ldrb	r3, [r3, #2]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d10f      	bne.n	800819a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2202      	movs	r2, #2
 800817e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800819a:	2200      	movs	r2, #0
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 faae 	bl	8008700 <USBH_CtlReq>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	785a      	ldrb	r2, [r3, #1]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3302      	adds	r3, #2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3303      	adds	r3, #3
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4313      	orrs	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	791a      	ldrb	r2, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	795a      	ldrb	r2, [r3, #5]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	799a      	ldrb	r2, [r3, #6]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	79da      	ldrb	r2, [r3, #7]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	79db      	ldrb	r3, [r3, #7]
 800820c:	2b20      	cmp	r3, #32
 800820e:	dc11      	bgt.n	8008234 <USBH_ParseDevDesc+0x86>
 8008210:	2b08      	cmp	r3, #8
 8008212:	db16      	blt.n	8008242 <USBH_ParseDevDesc+0x94>
 8008214:	3b08      	subs	r3, #8
 8008216:	2201      	movs	r2, #1
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008224:	2b00      	cmp	r3, #0
 8008226:	bf14      	ite	ne
 8008228:	2301      	movne	r3, #1
 800822a:	2300      	moveq	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <USBH_ParseDevDesc+0x8a>
 8008232:	e006      	b.n	8008242 <USBH_ParseDevDesc+0x94>
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d104      	bne.n	8008242 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	79da      	ldrb	r2, [r3, #7]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	71da      	strb	r2, [r3, #7]
      break;
 8008240:	e003      	b.n	800824a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2240      	movs	r2, #64	; 0x40
 8008246:	71da      	strb	r2, [r3, #7]
      break;
 8008248:	bf00      	nop
  }

  if (length > 8U)
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d939      	bls.n	80082c4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	3308      	adds	r3, #8
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3309      	adds	r3, #9
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	b29b      	uxth	r3, r3
 8008264:	4313      	orrs	r3, r2
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	330a      	adds	r3, #10
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	b29a      	uxth	r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	330b      	adds	r3, #11
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	b29b      	uxth	r3, r3
 8008280:	4313      	orrs	r3, r2
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	330c      	adds	r3, #12
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29a      	uxth	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	330d      	adds	r3, #13
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	b29b      	uxth	r3, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	7b9a      	ldrb	r2, [r3, #14]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	7bda      	ldrb	r2, [r3, #15]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	7c1a      	ldrb	r2, [r3, #16]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	7c5a      	ldrb	r2, [r3, #17]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	745a      	strb	r2, [r3, #17]
  }
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08c      	sub	sp, #48	; 0x30
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	785a      	ldrb	r2, [r3, #1]
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3302      	adds	r3, #2
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b29a      	uxth	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3303      	adds	r3, #3
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	b29b      	uxth	r3, r3
 8008324:	4313      	orrs	r3, r2
 8008326:	b29b      	uxth	r3, r3
 8008328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832c:	bf28      	it	cs
 800832e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008332:	b29a      	uxth	r2, r3
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	791a      	ldrb	r2, [r3, #4]
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	795a      	ldrb	r2, [r3, #5]
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	799a      	ldrb	r2, [r3, #6]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	79da      	ldrb	r2, [r3, #7]
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	7a1a      	ldrb	r2, [r3, #8]
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b09      	cmp	r3, #9
 8008366:	d002      	beq.n	800836e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	2209      	movs	r2, #9
 800836c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b09      	cmp	r3, #9
 8008372:	f240 809d 	bls.w	80084b0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008376:	2309      	movs	r3, #9
 8008378:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800837e:	e081      	b.n	8008484 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008380:	f107 0316 	add.w	r3, r7, #22
 8008384:	4619      	mov	r1, r3
 8008386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008388:	f000 f99f 	bl	80086ca <USBH_GetNextDesc>
 800838c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	2b04      	cmp	r3, #4
 8008394:	d176      	bne.n	8008484 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b09      	cmp	r3, #9
 800839c:	d002      	beq.n	80083a4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	2209      	movs	r2, #9
 80083a2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80083a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a8:	221a      	movs	r2, #26
 80083aa:	fb02 f303 	mul.w	r3, r2, r3
 80083ae:	3308      	adds	r3, #8
 80083b0:	6a3a      	ldr	r2, [r7, #32]
 80083b2:	4413      	add	r3, r2
 80083b4:	3302      	adds	r3, #2
 80083b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80083b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ba:	69f8      	ldr	r0, [r7, #28]
 80083bc:	f000 f87e 	bl	80084bc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083ca:	e043      	b.n	8008454 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083cc:	f107 0316 	add.w	r3, r7, #22
 80083d0:	4619      	mov	r1, r3
 80083d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d4:	f000 f979 	bl	80086ca <USBH_GetNextDesc>
 80083d8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	785b      	ldrb	r3, [r3, #1]
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d138      	bne.n	8008454 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	795b      	ldrb	r3, [r3, #5]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d10f      	bne.n	800840a <USBH_ParseCfgDesc+0x13a>
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	799b      	ldrb	r3, [r3, #6]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d10b      	bne.n	800840a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	79db      	ldrb	r3, [r3, #7]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10f      	bne.n	800841a <USBH_ParseCfgDesc+0x14a>
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d00b      	beq.n	800841a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2209      	movs	r2, #9
 8008406:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008408:	e007      	b.n	800841a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b07      	cmp	r3, #7
 8008410:	d004      	beq.n	800841c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	2207      	movs	r2, #7
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e000      	b.n	800841c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800841a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800841c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008420:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008424:	3201      	adds	r2, #1
 8008426:	00d2      	lsls	r2, r2, #3
 8008428:	211a      	movs	r1, #26
 800842a:	fb01 f303 	mul.w	r3, r1, r3
 800842e:	4413      	add	r3, r2
 8008430:	3308      	adds	r3, #8
 8008432:	6a3a      	ldr	r2, [r7, #32]
 8008434:	4413      	add	r3, r2
 8008436:	3304      	adds	r3, #4
 8008438:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800843a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843c:	69b9      	ldr	r1, [r7, #24]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 f86b 	bl	800851a <USBH_ParseEPDesc>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800844a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800844e:	3301      	adds	r3, #1
 8008450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800845c:	429a      	cmp	r2, r3
 800845e:	d204      	bcs.n	800846a <USBH_ParseCfgDesc+0x19a>
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	885a      	ldrh	r2, [r3, #2]
 8008464:	8afb      	ldrh	r3, [r7, #22]
 8008466:	429a      	cmp	r2, r3
 8008468:	d8b0      	bhi.n	80083cc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	791b      	ldrb	r3, [r3, #4]
 800846e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008472:	429a      	cmp	r2, r3
 8008474:	d201      	bcs.n	800847a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008476:	2303      	movs	r3, #3
 8008478:	e01c      	b.n	80084b4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800847a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800847e:	3301      	adds	r3, #1
 8008480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008488:	2b01      	cmp	r3, #1
 800848a:	d805      	bhi.n	8008498 <USBH_ParseCfgDesc+0x1c8>
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	885a      	ldrh	r2, [r3, #2]
 8008490:	8afb      	ldrh	r3, [r7, #22]
 8008492:	429a      	cmp	r2, r3
 8008494:	f63f af74 	bhi.w	8008380 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	791b      	ldrb	r3, [r3, #4]
 800849c:	2b02      	cmp	r3, #2
 800849e:	bf28      	it	cs
 80084a0:	2302      	movcs	r3, #2
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d201      	bcs.n	80084b0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e001      	b.n	80084b4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80084b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3730      	adds	r7, #48	; 0x30
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	789a      	ldrb	r2, [r3, #2]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	78da      	ldrb	r2, [r3, #3]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	791a      	ldrb	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	795a      	ldrb	r2, [r3, #5]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	799a      	ldrb	r2, [r3, #6]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	79da      	ldrb	r2, [r3, #7]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	7a1a      	ldrb	r2, [r3, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	721a      	strb	r2, [r3, #8]
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800851a:	b480      	push	{r7}
 800851c:	b087      	sub	sp, #28
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	781a      	ldrb	r2, [r3, #0]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	785a      	ldrb	r2, [r3, #1]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	789a      	ldrb	r2, [r3, #2]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	78da      	ldrb	r2, [r3, #3]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3305      	adds	r3, #5
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	b29b      	uxth	r3, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	b29a      	uxth	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	799a      	ldrb	r2, [r3, #6]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	889b      	ldrh	r3, [r3, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d102      	bne.n	800857c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008576:	2303      	movs	r3, #3
 8008578:	75fb      	strb	r3, [r7, #23]
 800857a:	e033      	b.n	80085e4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	889b      	ldrh	r3, [r3, #4]
 8008580:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008584:	f023 0307 	bic.w	r3, r3, #7
 8008588:	b29a      	uxth	r2, r3
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	889b      	ldrh	r3, [r3, #4]
 8008592:	b21a      	sxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	b299      	uxth	r1, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3305      	adds	r3, #5
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	430b      	orrs	r3, r1
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d110      	bne.n	80085d6 <USBH_ParseEPDesc+0xbc>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b299      	uxth	r1, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3305      	adds	r3, #5
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	021b      	lsls	r3, r3, #8
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	430b      	orrs	r3, r1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	b21b      	sxth	r3, r3
 80085ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085d2:	b21b      	sxth	r3, r3
 80085d4:	e001      	b.n	80085da <USBH_ParseEPDesc+0xc0>
 80085d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085da:	4313      	orrs	r3, r2
 80085dc:	b21b      	sxth	r3, r3
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	78db      	ldrb	r3, [r3, #3]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d005      	beq.n	8008606 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	78db      	ldrb	r3, [r3, #3]
 80085fe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008602:	2b03      	cmp	r3, #3
 8008604:	d127      	bne.n	8008656 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	799b      	ldrb	r3, [r3, #6]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <USBH_ParseEPDesc+0xfc>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	799b      	ldrb	r3, [r3, #6]
 8008612:	2b10      	cmp	r3, #16
 8008614:	d91f      	bls.n	8008656 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
 800861a:	e01c      	b.n	8008656 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	78db      	ldrb	r3, [r3, #3]
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d10a      	bne.n	800863e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	799b      	ldrb	r3, [r3, #6]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <USBH_ParseEPDesc+0x11e>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	799b      	ldrb	r3, [r3, #6]
 8008634:	2b10      	cmp	r3, #16
 8008636:	d90e      	bls.n	8008656 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008638:	2303      	movs	r3, #3
 800863a:	75fb      	strb	r3, [r7, #23]
 800863c:	e00b      	b.n	8008656 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	78db      	ldrb	r3, [r3, #3]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b03      	cmp	r3, #3
 8008648:	d105      	bne.n	8008656 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	799b      	ldrb	r3, [r3, #6]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008652:	2303      	movs	r3, #3
 8008654:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b03      	cmp	r3, #3
 800867a:	d120      	bne.n	80086be <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	1e9a      	subs	r2, r3, #2
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	4293      	cmp	r3, r2
 8008686:	bf28      	it	cs
 8008688:	4613      	movcs	r3, r2
 800868a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3302      	adds	r3, #2
 8008690:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008692:	2300      	movs	r3, #0
 8008694:	82fb      	strh	r3, [r7, #22]
 8008696:	e00b      	b.n	80086b0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008698:	8afb      	ldrh	r3, [r7, #22]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086aa:	8afb      	ldrh	r3, [r7, #22]
 80086ac:	3302      	adds	r3, #2
 80086ae:	82fb      	strh	r3, [r7, #22]
 80086b0:	8afa      	ldrh	r2, [r7, #22]
 80086b2:	8abb      	ldrh	r3, [r7, #20]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d3ef      	bcc.n	8008698 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
  }
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	881a      	ldrh	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4413      	add	r3, r2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4413      	add	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800870e:	2301      	movs	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	789b      	ldrb	r3, [r3, #2]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d002      	beq.n	8008720 <USBH_CtlReq+0x20>
 800871a:	2b02      	cmp	r3, #2
 800871c:	d00f      	beq.n	800873e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800871e:	e027      	b.n	8008770 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	88fa      	ldrh	r2, [r7, #6]
 800872a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2202      	movs	r2, #2
 8008736:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
      break;
 800873c:	e018      	b.n	8008770 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 f81c 	bl	800877c <USBH_HandleControl>
 8008744:	4603      	mov	r3, r0
 8008746:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <USBH_CtlReq+0x54>
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d106      	bne.n	8008762 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	761a      	strb	r2, [r3, #24]
      break;
 8008760:	e005      	b.n	800876e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d102      	bne.n	800876e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	709a      	strb	r2, [r3, #2]
      break;
 800876e:	bf00      	nop
  }
  return status;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008788:	2300      	movs	r3, #0
 800878a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7e1b      	ldrb	r3, [r3, #24]
 8008790:	3b01      	subs	r3, #1
 8008792:	2b0a      	cmp	r3, #10
 8008794:	f200 8156 	bhi.w	8008a44 <USBH_HandleControl+0x2c8>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <USBH_HandleControl+0x24>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	080087e7 	.word	0x080087e7
 80087a8:	08008851 	.word	0x08008851
 80087ac:	08008877 	.word	0x08008877
 80087b0:	080088af 	.word	0x080088af
 80087b4:	080088d9 	.word	0x080088d9
 80087b8:	0800892b 	.word	0x0800892b
 80087bc:	0800894d 	.word	0x0800894d
 80087c0:	08008989 	.word	0x08008989
 80087c4:	080089af 	.word	0x080089af
 80087c8:	080089ed 	.word	0x080089ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f103 0110 	add.w	r1, r3, #16
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	795b      	ldrb	r3, [r3, #5]
 80087d6:	461a      	mov	r2, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f943 	bl	8008a64 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	761a      	strb	r2, [r3, #24]
      break;
 80087e4:	e139      	b.n	8008a5a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fcc5 	bl	800917c <USBH_LL_GetURBState>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d11e      	bne.n	800883a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7c1b      	ldrb	r3, [r3, #16]
 8008800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008804:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8adb      	ldrh	r3, [r3, #22]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800880e:	7b7b      	ldrb	r3, [r7, #13]
 8008810:	2b80      	cmp	r3, #128	; 0x80
 8008812:	d103      	bne.n	800881c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2203      	movs	r2, #3
 8008818:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800881a:	e115      	b.n	8008a48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2205      	movs	r2, #5
 8008820:	761a      	strb	r2, [r3, #24]
      break;
 8008822:	e111      	b.n	8008a48 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008824:	7b7b      	ldrb	r3, [r7, #13]
 8008826:	2b80      	cmp	r3, #128	; 0x80
 8008828:	d103      	bne.n	8008832 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2209      	movs	r2, #9
 800882e:	761a      	strb	r2, [r3, #24]
      break;
 8008830:	e10a      	b.n	8008a48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2207      	movs	r2, #7
 8008836:	761a      	strb	r2, [r3, #24]
      break;
 8008838:	e106      	b.n	8008a48 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b04      	cmp	r3, #4
 800883e:	d003      	beq.n	8008848 <USBH_HandleControl+0xcc>
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b02      	cmp	r3, #2
 8008844:	f040 8100 	bne.w	8008a48 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	220b      	movs	r2, #11
 800884c:	761a      	strb	r2, [r3, #24]
      break;
 800884e:	e0fb      	b.n	8008a48 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6899      	ldr	r1, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	899a      	ldrh	r2, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	791b      	ldrb	r3, [r3, #4]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f93a 	bl	8008ae2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2204      	movs	r2, #4
 8008872:	761a      	strb	r2, [r3, #24]
      break;
 8008874:	e0f1      	b.n	8008a5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	791b      	ldrb	r3, [r3, #4]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fc7d 	bl	800917c <USBH_LL_GetURBState>
 8008882:	4603      	mov	r3, r0
 8008884:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d102      	bne.n	8008892 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2209      	movs	r2, #9
 8008890:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b05      	cmp	r3, #5
 8008896:	d102      	bne.n	800889e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008898:	2303      	movs	r3, #3
 800889a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800889c:	e0d6      	b.n	8008a4c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	f040 80d3 	bne.w	8008a4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	220b      	movs	r2, #11
 80088aa:	761a      	strb	r2, [r3, #24]
      break;
 80088ac:	e0ce      	b.n	8008a4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6899      	ldr	r1, [r3, #8]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	899a      	ldrh	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	795b      	ldrb	r3, [r3, #5]
 80088ba:	2001      	movs	r0, #1
 80088bc:	9000      	str	r0, [sp, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f8ea 	bl	8008a98 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2206      	movs	r2, #6
 80088d4:	761a      	strb	r2, [r3, #24]
      break;
 80088d6:	e0c0      	b.n	8008a5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	795b      	ldrb	r3, [r3, #5]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fc4c 	bl	800917c <USBH_LL_GetURBState>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d103      	bne.n	80088f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2207      	movs	r2, #7
 80088f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088f4:	e0ac      	b.n	8008a50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d105      	bne.n	8008908 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	220c      	movs	r2, #12
 8008900:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008902:	2303      	movs	r3, #3
 8008904:	73fb      	strb	r3, [r7, #15]
      break;
 8008906:	e0a3      	b.n	8008a50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d103      	bne.n	8008916 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2205      	movs	r2, #5
 8008912:	761a      	strb	r2, [r3, #24]
      break;
 8008914:	e09c      	b.n	8008a50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b04      	cmp	r3, #4
 800891a:	f040 8099 	bne.w	8008a50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	220b      	movs	r2, #11
 8008922:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008924:	2302      	movs	r3, #2
 8008926:	73fb      	strb	r3, [r7, #15]
      break;
 8008928:	e092      	b.n	8008a50 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	791b      	ldrb	r3, [r3, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f8d5 	bl	8008ae2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800893e:	b29a      	uxth	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2208      	movs	r2, #8
 8008948:	761a      	strb	r2, [r3, #24]

      break;
 800894a:	e086      	b.n	8008a5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	791b      	ldrb	r3, [r3, #4]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fc12 	bl	800917c <USBH_LL_GetURBState>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d105      	bne.n	800896e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	220d      	movs	r2, #13
 8008966:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800896c:	e072      	b.n	8008a54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d103      	bne.n	800897c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	220b      	movs	r2, #11
 8008978:	761a      	strb	r2, [r3, #24]
      break;
 800897a:	e06b      	b.n	8008a54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b05      	cmp	r3, #5
 8008980:	d168      	bne.n	8008a54 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008982:	2303      	movs	r3, #3
 8008984:	73fb      	strb	r3, [r7, #15]
      break;
 8008986:	e065      	b.n	8008a54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	795b      	ldrb	r3, [r3, #5]
 800898c:	2201      	movs	r2, #1
 800898e:	9200      	str	r2, [sp, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f87f 	bl	8008a98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	220a      	movs	r2, #10
 80089aa:	761a      	strb	r2, [r3, #24]
      break;
 80089ac:	e055      	b.n	8008a5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	795b      	ldrb	r3, [r3, #5]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fbe1 	bl	800917c <USBH_LL_GetURBState>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d105      	bne.n	80089d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	220d      	movs	r2, #13
 80089cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089ce:	e043      	b.n	8008a58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d103      	bne.n	80089de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2209      	movs	r2, #9
 80089da:	761a      	strb	r2, [r3, #24]
      break;
 80089dc:	e03c      	b.n	8008a58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d139      	bne.n	8008a58 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	220b      	movs	r2, #11
 80089e8:	761a      	strb	r2, [r3, #24]
      break;
 80089ea:	e035      	b.n	8008a58 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	7e5b      	ldrb	r3, [r3, #25]
 80089f0:	3301      	adds	r3, #1
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	765a      	strb	r2, [r3, #25]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7e5b      	ldrb	r3, [r3, #25]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d806      	bhi.n	8008a0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a0c:	e025      	b.n	8008a5a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a14:	2106      	movs	r1, #6
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	795b      	ldrb	r3, [r3, #5]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f90c 	bl	8008c44 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	791b      	ldrb	r3, [r3, #4]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f906 	bl	8008c44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	73fb      	strb	r3, [r7, #15]
      break;
 8008a42:	e00a      	b.n	8008a5a <USBH_HandleControl+0x2de>

    default:
      break;
 8008a44:	bf00      	nop
 8008a46:	e008      	b.n	8008a5a <USBH_HandleControl+0x2de>
      break;
 8008a48:	bf00      	nop
 8008a4a:	e006      	b.n	8008a5a <USBH_HandleControl+0x2de>
      break;
 8008a4c:	bf00      	nop
 8008a4e:	e004      	b.n	8008a5a <USBH_HandleControl+0x2de>
      break;
 8008a50:	bf00      	nop
 8008a52:	e002      	b.n	8008a5a <USBH_HandleControl+0x2de>
      break;
 8008a54:	bf00      	nop
 8008a56:	e000      	b.n	8008a5a <USBH_HandleControl+0x2de>
      break;
 8008a58:	bf00      	nop
  }

  return status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af04      	add	r7, sp, #16
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a72:	79f9      	ldrb	r1, [r7, #7]
 8008a74:	2300      	movs	r3, #0
 8008a76:	9303      	str	r3, [sp, #12]
 8008a78:	2308      	movs	r3, #8
 8008a7a:	9302      	str	r3, [sp, #8]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	2300      	movs	r3, #0
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	2200      	movs	r2, #0
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fb46 	bl	800911a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af04      	add	r7, sp, #16
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	80fb      	strh	r3, [r7, #6]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008abc:	7979      	ldrb	r1, [r7, #5]
 8008abe:	7e3b      	ldrb	r3, [r7, #24]
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	9302      	str	r3, [sp, #8]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	2301      	movs	r3, #1
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fb21 	bl	800911a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af04      	add	r7, sp, #16
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	4611      	mov	r1, r2
 8008aee:	461a      	mov	r2, r3
 8008af0:	460b      	mov	r3, r1
 8008af2:	80fb      	strh	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008af8:	7979      	ldrb	r1, [r7, #5]
 8008afa:	2300      	movs	r3, #0
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	88fb      	ldrh	r3, [r7, #6]
 8008b00:	9302      	str	r3, [sp, #8]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	2301      	movs	r3, #1
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fb03 	bl	800911a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b14:	2300      	movs	r3, #0

}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b088      	sub	sp, #32
 8008b22:	af04      	add	r7, sp, #16
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	80fb      	strh	r3, [r7, #6]
 8008b30:	4613      	mov	r3, r2
 8008b32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b42:	7979      	ldrb	r1, [r7, #5]
 8008b44:	7e3b      	ldrb	r3, [r7, #24]
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	9302      	str	r3, [sp, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	2301      	movs	r3, #1
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	2200      	movs	r2, #0
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fade 	bl	800911a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4611      	mov	r1, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	460b      	mov	r3, r1
 8008b78:	80fb      	strh	r3, [r7, #6]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b7e:	7979      	ldrb	r1, [r7, #5]
 8008b80:	2300      	movs	r3, #0
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	2302      	movs	r3, #2
 8008b92:	2201      	movs	r2, #1
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 fac0 	bl	800911a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af04      	add	r7, sp, #16
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	4608      	mov	r0, r1
 8008bae:	4611      	mov	r1, r2
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	70fb      	strb	r3, [r7, #3]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70bb      	strb	r3, [r7, #2]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bbe:	7878      	ldrb	r0, [r7, #1]
 8008bc0:	78ba      	ldrb	r2, [r7, #2]
 8008bc2:	78f9      	ldrb	r1, [r7, #3]
 8008bc4:	8b3b      	ldrh	r3, [r7, #24]
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	7d3b      	ldrb	r3, [r7, #20]
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	7c3b      	ldrb	r3, [r7, #16]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa53 	bl	800907e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fa72 	bl	80090dc <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f836 	bl	8008c80 <USBH_GetFreePipe>
 8008c14:	4603      	mov	r3, r0
 8008c16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c18:	89fb      	ldrh	r3, [r7, #14]
 8008c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00a      	beq.n	8008c38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c22:	78fa      	ldrb	r2, [r7, #3]
 8008c24:	89fb      	ldrh	r3, [r7, #14]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	33e0      	adds	r3, #224	; 0xe0
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c38:	89fb      	ldrh	r3, [r7, #14]
 8008c3a:	b2db      	uxtb	r3, r3
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	2b0f      	cmp	r3, #15
 8008c54:	d80d      	bhi.n	8008c72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	33e0      	adds	r3, #224	; 0xe0
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	33e0      	adds	r3, #224	; 0xe0
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	e00f      	b.n	8008cb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	33e0      	adds	r3, #224	; 0xe0
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d102      	bne.n	8008cac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	e007      	b.n	8008cbc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b0f      	cmp	r3, #15
 8008cb6:	d9ec      	bls.n	8008c92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	490e      	ldr	r1, [pc, #56]	; (8008d08 <MX_USB_HOST_Init+0x40>)
 8008cd0:	480e      	ldr	r0, [pc, #56]	; (8008d0c <MX_USB_HOST_Init+0x44>)
 8008cd2:	f7fe fba7 	bl	8007424 <USBH_Init>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cdc:	f7f7 fe66 	bl	80009ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008ce0:	490b      	ldr	r1, [pc, #44]	; (8008d10 <MX_USB_HOST_Init+0x48>)
 8008ce2:	480a      	ldr	r0, [pc, #40]	; (8008d0c <MX_USB_HOST_Init+0x44>)
 8008ce4:	f7fe fc2c 	bl	8007540 <USBH_RegisterClass>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cee:	f7f7 fe5d 	bl	80009ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cf2:	4806      	ldr	r0, [pc, #24]	; (8008d0c <MX_USB_HOST_Init+0x44>)
 8008cf4:	f7fe fcb0 	bl	8007658 <USBH_Start>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cfe:	f7f7 fe55 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d02:	bf00      	nop
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	200008a8 	.word	0x200008a8
 8008d10:	2000000c 	.word	0x2000000c

08008d14 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d18:	4802      	ldr	r0, [pc, #8]	; (8008d24 <MX_USB_HOST_Process+0x10>)
 8008d1a:	f7fe fcad 	bl	8007678 <USBH_Process>
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200008a8 	.word	0x200008a8

08008d28 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d819      	bhi.n	8008d70 <USBH_UserProcess+0x48>
 8008d3c:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <USBH_UserProcess+0x1c>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008d71 	.word	0x08008d71
 8008d48:	08008d61 	.word	0x08008d61
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d69 	.word	0x08008d69
 8008d54:	08008d59 	.word	0x08008d59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d58:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <USBH_UserProcess+0x58>)
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	701a      	strb	r2, [r3, #0]
  break;
 8008d5e:	e008      	b.n	8008d72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <USBH_UserProcess+0x58>)
 8008d62:	2202      	movs	r2, #2
 8008d64:	701a      	strb	r2, [r3, #0]
  break;
 8008d66:	e004      	b.n	8008d72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <USBH_UserProcess+0x58>)
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	701a      	strb	r2, [r3, #0]
  break;
 8008d6e:	e000      	b.n	8008d72 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000c80 	.word	0x20000c80

08008d84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08a      	sub	sp, #40	; 0x28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d8c:	f107 0314 	add.w	r3, r7, #20
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	605a      	str	r2, [r3, #4]
 8008d96:	609a      	str	r2, [r3, #8]
 8008d98:	60da      	str	r2, [r3, #12]
 8008d9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008da4:	d147      	bne.n	8008e36 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	4b25      	ldr	r3, [pc, #148]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	4a24      	ldr	r2, [pc, #144]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	6313      	str	r3, [r2, #48]	; 0x30
 8008db6:	4b22      	ldr	r3, [pc, #136]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008dd0:	f107 0314 	add.w	r3, r7, #20
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	481b      	ldr	r0, [pc, #108]	; (8008e44 <HAL_HCD_MspInit+0xc0>)
 8008dd8:	f7f8 faae 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ddc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de2:	2302      	movs	r3, #2
 8008de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dea:	2303      	movs	r3, #3
 8008dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dee:	230a      	movs	r3, #10
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df2:	f107 0314 	add.w	r3, r7, #20
 8008df6:	4619      	mov	r1, r3
 8008df8:	4812      	ldr	r0, [pc, #72]	; (8008e44 <HAL_HCD_MspInit+0xc0>)
 8008dfa:	f7f8 fa9d 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dfe:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e02:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e08:	6353      	str	r3, [r2, #52]	; 0x34
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e12:	4a0b      	ldr	r2, [pc, #44]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e18:	6453      	str	r3, [r2, #68]	; 0x44
 8008e1a:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <HAL_HCD_MspInit+0xbc>)
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e26:	2200      	movs	r2, #0
 8008e28:	2100      	movs	r1, #0
 8008e2a:	2043      	movs	r0, #67	; 0x43
 8008e2c:	f7f8 f9bb 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e30:	2043      	movs	r0, #67	; 0x43
 8008e32:	f7f8 f9d4 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e36:	bf00      	nop
 8008e38:	3728      	adds	r7, #40	; 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	40023800 	.word	0x40023800
 8008e44:	40020000 	.word	0x40020000

08008e48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe ffed 	bl	8007e36 <USBH_LL_IncTimer>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff f825 	bl	8007ec2 <USBH_LL_Connect>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff f82e 	bl	8007ef0 <USBH_LL_Disconnect>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe ffdf 	bl	8007e8a <USBH_LL_PortEnabled>
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe ffdf 	bl	8007ea6 <USBH_LL_PortDisabled>
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d12a      	bne.n	8008f58 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f02:	4a18      	ldr	r2, [pc, #96]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f0e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f20:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f26:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f2e:	2202      	movs	r2, #2
 8008f30:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f38:	480a      	ldr	r0, [pc, #40]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f3a:	f7f8 fb9a 	bl	8001672 <HAL_HCD_Init>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f44:	f7f7 fd32 	bl	80009ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f48:	4806      	ldr	r0, [pc, #24]	; (8008f64 <USBH_LL_Init+0x74>)
 8008f4a:	f7f8 ff7e 	bl	8001e4a <HAL_HCD_GetCurrentFrame>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7fe ff60 	bl	8007e18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000c84 	.word	0x20000c84

08008f68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f8 feed 	bl	8001d5e <HAL_HCD_Start>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f95c 	bl	8009248 <USBH_Get_USB_Status>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f8 fef5 	bl	8001da4 <HAL_HCD_Stop>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f941 	bl	8009248 <USBH_Get_USB_Status>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f8 ff3d 	bl	8001e66 <HAL_HCD_GetCurrentSpeed>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d00c      	beq.n	800900c <USBH_LL_GetSpeed+0x38>
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d80d      	bhi.n	8009012 <USBH_LL_GetSpeed+0x3e>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <USBH_LL_GetSpeed+0x2c>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d003      	beq.n	8009006 <USBH_LL_GetSpeed+0x32>
 8008ffe:	e008      	b.n	8009012 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
    break;
 8009004:	e008      	b.n	8009018 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009006:	2301      	movs	r3, #1
 8009008:	73fb      	strb	r3, [r7, #15]
    break;
 800900a:	e005      	b.n	8009018 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800900c:	2302      	movs	r3, #2
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	e002      	b.n	8009018 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009012:	2301      	movs	r3, #1
 8009014:	73fb      	strb	r3, [r7, #15]
    break;
 8009016:	bf00      	nop
  }
  return  speed;
 8009018:	7bfb      	ldrb	r3, [r7, #15]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009038:	4618      	mov	r0, r3
 800903a:	f7f8 fed0 	bl	8001dde <HAL_HCD_ResetPort>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f8ff 	bl	8009248 <USBH_Get_USB_Status>
 800904a:	4603      	mov	r3, r0
 800904c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800904e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7f8 fed7 	bl	8001e22 <HAL_HCD_HC_GetXferCount>
 8009074:	4603      	mov	r3, r0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800907e:	b590      	push	{r4, r7, lr}
 8009080:	b089      	sub	sp, #36	; 0x24
 8009082:	af04      	add	r7, sp, #16
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	461a      	mov	r2, r3
 800908c:	4603      	mov	r3, r0
 800908e:	70fb      	strb	r3, [r7, #3]
 8009090:	460b      	mov	r3, r1
 8009092:	70bb      	strb	r3, [r7, #2]
 8009094:	4613      	mov	r3, r2
 8009096:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090a6:	787c      	ldrb	r4, [r7, #1]
 80090a8:	78ba      	ldrb	r2, [r7, #2]
 80090aa:	78f9      	ldrb	r1, [r7, #3]
 80090ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4623      	mov	r3, r4
 80090be:	f7f8 fb3a 	bl	8001736 <HAL_HCD_HC_Init>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f8bd 	bl	8009248 <USBH_Get_USB_Status>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd90      	pop	{r4, r7, pc}

080090dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	4611      	mov	r1, r2
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f8 fbaa 	bl	8001854 <HAL_HCD_HC_Halt>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 f89e 	bl	8009248 <USBH_Get_USB_Status>
 800910c:	4603      	mov	r3, r0
 800910e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009110:	7bbb      	ldrb	r3, [r7, #14]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800911a:	b590      	push	{r4, r7, lr}
 800911c:	b089      	sub	sp, #36	; 0x24
 800911e:	af04      	add	r7, sp, #16
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	4608      	mov	r0, r1
 8009124:	4611      	mov	r1, r2
 8009126:	461a      	mov	r2, r3
 8009128:	4603      	mov	r3, r0
 800912a:	70fb      	strb	r3, [r7, #3]
 800912c:	460b      	mov	r3, r1
 800912e:	70bb      	strb	r3, [r7, #2]
 8009130:	4613      	mov	r3, r2
 8009132:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009142:	787c      	ldrb	r4, [r7, #1]
 8009144:	78ba      	ldrb	r2, [r7, #2]
 8009146:	78f9      	ldrb	r1, [r7, #3]
 8009148:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800914c:	9303      	str	r3, [sp, #12]
 800914e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009150:	9302      	str	r3, [sp, #8]
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	4623      	mov	r3, r4
 800915e:	f7f8 fb9d 	bl	800189c <HAL_HCD_HC_SubmitRequest>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f86d 	bl	8009248 <USBH_Get_USB_Status>
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009172:	7bbb      	ldrb	r3, [r7, #14]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bd90      	pop	{r4, r7, pc}

0800917c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7f8 fe31 	bl	8001dfa <HAL_HCD_HC_GetURBState>
 8009198:	4603      	mov	r3, r0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d103      	bne.n	80091c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 f870 	bl	80092a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091c0:	20c8      	movs	r0, #200	; 0xc8
 80091c2:	f7f7 fef1 	bl	8000fa8 <HAL_Delay>
  return USBH_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	4613      	mov	r3, r2
 80091de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091e8:	78fb      	ldrb	r3, [r7, #3]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	212c      	movs	r1, #44	; 0x2c
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	4413      	add	r3, r2
 80091f4:	333b      	adds	r3, #59	; 0x3b
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	212c      	movs	r1, #44	; 0x2c
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	3354      	adds	r3, #84	; 0x54
 800920a:	78ba      	ldrb	r2, [r7, #2]
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	e008      	b.n	8009222 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	212c      	movs	r1, #44	; 0x2c
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	4413      	add	r3, r2
 800921c:	3355      	adds	r3, #85	; 0x55
 800921e:	78ba      	ldrb	r2, [r7, #2]
 8009220:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7f7 feb5 	bl	8000fa8 <HAL_Delay>
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d817      	bhi.n	800928c <USBH_Get_USB_Status+0x44>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBH_Get_USB_Status+0x1c>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009275 	.word	0x08009275
 8009268:	0800927b 	.word	0x0800927b
 800926c:	08009281 	.word	0x08009281
 8009270:	08009287 	.word	0x08009287
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
    break;
 8009278:	e00b      	b.n	8009292 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	73fb      	strb	r3, [r7, #15]
    break;
 800927e:	e008      	b.n	8009292 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
    break;
 8009284:	e005      	b.n	8009292 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009286:	2302      	movs	r3, #2
 8009288:	73fb      	strb	r3, [r7, #15]
    break;
 800928a:	e002      	b.n	8009292 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800928c:	2302      	movs	r3, #2
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	bf00      	nop
  }
  return usb_status;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
 80092b8:	e001      	b.n	80092be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80092ba:	2301      	movs	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	461a      	mov	r2, r3
 80092c2:	2101      	movs	r1, #1
 80092c4:	4803      	ldr	r0, [pc, #12]	; (80092d4 <MX_DriverVbusFS+0x34>)
 80092c6:	f7f8 f9bb 	bl	8001640 <HAL_GPIO_WritePin>
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40020800 	.word	0x40020800

080092d8 <__errno>:
 80092d8:	4b01      	ldr	r3, [pc, #4]	; (80092e0 <__errno+0x8>)
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	2000002c 	.word	0x2000002c

080092e4 <__libc_init_array>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	4d0d      	ldr	r5, [pc, #52]	; (800931c <__libc_init_array+0x38>)
 80092e8:	4c0d      	ldr	r4, [pc, #52]	; (8009320 <__libc_init_array+0x3c>)
 80092ea:	1b64      	subs	r4, r4, r5
 80092ec:	10a4      	asrs	r4, r4, #2
 80092ee:	2600      	movs	r6, #0
 80092f0:	42a6      	cmp	r6, r4
 80092f2:	d109      	bne.n	8009308 <__libc_init_array+0x24>
 80092f4:	4d0b      	ldr	r5, [pc, #44]	; (8009324 <__libc_init_array+0x40>)
 80092f6:	4c0c      	ldr	r4, [pc, #48]	; (8009328 <__libc_init_array+0x44>)
 80092f8:	f000 f92e 	bl	8009558 <_init>
 80092fc:	1b64      	subs	r4, r4, r5
 80092fe:	10a4      	asrs	r4, r4, #2
 8009300:	2600      	movs	r6, #0
 8009302:	42a6      	cmp	r6, r4
 8009304:	d105      	bne.n	8009312 <__libc_init_array+0x2e>
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	f855 3b04 	ldr.w	r3, [r5], #4
 800930c:	4798      	blx	r3
 800930e:	3601      	adds	r6, #1
 8009310:	e7ee      	b.n	80092f0 <__libc_init_array+0xc>
 8009312:	f855 3b04 	ldr.w	r3, [r5], #4
 8009316:	4798      	blx	r3
 8009318:	3601      	adds	r6, #1
 800931a:	e7f2      	b.n	8009302 <__libc_init_array+0x1e>
 800931c:	08009594 	.word	0x08009594
 8009320:	08009594 	.word	0x08009594
 8009324:	08009594 	.word	0x08009594
 8009328:	08009598 	.word	0x08009598

0800932c <malloc>:
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <malloc+0xc>)
 800932e:	4601      	mov	r1, r0
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f000 b87f 	b.w	8009434 <_malloc_r>
 8009336:	bf00      	nop
 8009338:	2000002c 	.word	0x2000002c

0800933c <free>:
 800933c:	4b02      	ldr	r3, [pc, #8]	; (8009348 <free+0xc>)
 800933e:	4601      	mov	r1, r0
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f000 b80b 	b.w	800935c <_free_r>
 8009346:	bf00      	nop
 8009348:	2000002c 	.word	0x2000002c

0800934c <memset>:
 800934c:	4402      	add	r2, r0
 800934e:	4603      	mov	r3, r0
 8009350:	4293      	cmp	r3, r2
 8009352:	d100      	bne.n	8009356 <memset+0xa>
 8009354:	4770      	bx	lr
 8009356:	f803 1b01 	strb.w	r1, [r3], #1
 800935a:	e7f9      	b.n	8009350 <memset+0x4>

0800935c <_free_r>:
 800935c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800935e:	2900      	cmp	r1, #0
 8009360:	d044      	beq.n	80093ec <_free_r+0x90>
 8009362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009366:	9001      	str	r0, [sp, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f1a1 0404 	sub.w	r4, r1, #4
 800936e:	bfb8      	it	lt
 8009370:	18e4      	addlt	r4, r4, r3
 8009372:	f000 f8e3 	bl	800953c <__malloc_lock>
 8009376:	4a1e      	ldr	r2, [pc, #120]	; (80093f0 <_free_r+0x94>)
 8009378:	9801      	ldr	r0, [sp, #4]
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	b933      	cbnz	r3, 800938c <_free_r+0x30>
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	6014      	str	r4, [r2, #0]
 8009382:	b003      	add	sp, #12
 8009384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009388:	f000 b8de 	b.w	8009548 <__malloc_unlock>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d908      	bls.n	80093a2 <_free_r+0x46>
 8009390:	6825      	ldr	r5, [r4, #0]
 8009392:	1961      	adds	r1, r4, r5
 8009394:	428b      	cmp	r3, r1
 8009396:	bf01      	itttt	eq
 8009398:	6819      	ldreq	r1, [r3, #0]
 800939a:	685b      	ldreq	r3, [r3, #4]
 800939c:	1949      	addeq	r1, r1, r5
 800939e:	6021      	streq	r1, [r4, #0]
 80093a0:	e7ed      	b.n	800937e <_free_r+0x22>
 80093a2:	461a      	mov	r2, r3
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	b10b      	cbz	r3, 80093ac <_free_r+0x50>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x46>
 80093ac:	6811      	ldr	r1, [r2, #0]
 80093ae:	1855      	adds	r5, r2, r1
 80093b0:	42a5      	cmp	r5, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x70>
 80093b4:	6824      	ldr	r4, [r4, #0]
 80093b6:	4421      	add	r1, r4
 80093b8:	1854      	adds	r4, r2, r1
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	d1e0      	bne.n	8009382 <_free_r+0x26>
 80093c0:	681c      	ldr	r4, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6053      	str	r3, [r2, #4]
 80093c6:	4421      	add	r1, r4
 80093c8:	6011      	str	r1, [r2, #0]
 80093ca:	e7da      	b.n	8009382 <_free_r+0x26>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x78>
 80093ce:	230c      	movs	r3, #12
 80093d0:	6003      	str	r3, [r0, #0]
 80093d2:	e7d6      	b.n	8009382 <_free_r+0x26>
 80093d4:	6825      	ldr	r5, [r4, #0]
 80093d6:	1961      	adds	r1, r4, r5
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf04      	itt	eq
 80093dc:	6819      	ldreq	r1, [r3, #0]
 80093de:	685b      	ldreq	r3, [r3, #4]
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1949      	addeq	r1, r1, r5
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	6054      	str	r4, [r2, #4]
 80093ea:	e7ca      	b.n	8009382 <_free_r+0x26>
 80093ec:	b003      	add	sp, #12
 80093ee:	bd30      	pop	{r4, r5, pc}
 80093f0:	20000f88 	.word	0x20000f88

080093f4 <sbrk_aligned>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4e0e      	ldr	r6, [pc, #56]	; (8009430 <sbrk_aligned+0x3c>)
 80093f8:	460c      	mov	r4, r1
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	4605      	mov	r5, r0
 80093fe:	b911      	cbnz	r1, 8009406 <sbrk_aligned+0x12>
 8009400:	f000 f88c 	bl	800951c <_sbrk_r>
 8009404:	6030      	str	r0, [r6, #0]
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f000 f887 	bl	800951c <_sbrk_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d00a      	beq.n	8009428 <sbrk_aligned+0x34>
 8009412:	1cc4      	adds	r4, r0, #3
 8009414:	f024 0403 	bic.w	r4, r4, #3
 8009418:	42a0      	cmp	r0, r4
 800941a:	d007      	beq.n	800942c <sbrk_aligned+0x38>
 800941c:	1a21      	subs	r1, r4, r0
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f87c 	bl	800951c <_sbrk_r>
 8009424:	3001      	adds	r0, #1
 8009426:	d101      	bne.n	800942c <sbrk_aligned+0x38>
 8009428:	f04f 34ff 	mov.w	r4, #4294967295
 800942c:	4620      	mov	r0, r4
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	20000f8c 	.word	0x20000f8c

08009434 <_malloc_r>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	1ccd      	adds	r5, r1, #3
 800943a:	f025 0503 	bic.w	r5, r5, #3
 800943e:	3508      	adds	r5, #8
 8009440:	2d0c      	cmp	r5, #12
 8009442:	bf38      	it	cc
 8009444:	250c      	movcc	r5, #12
 8009446:	2d00      	cmp	r5, #0
 8009448:	4607      	mov	r7, r0
 800944a:	db01      	blt.n	8009450 <_malloc_r+0x1c>
 800944c:	42a9      	cmp	r1, r5
 800944e:	d905      	bls.n	800945c <_malloc_r+0x28>
 8009450:	230c      	movs	r3, #12
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	2600      	movs	r6, #0
 8009456:	4630      	mov	r0, r6
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	4e2e      	ldr	r6, [pc, #184]	; (8009518 <_malloc_r+0xe4>)
 800945e:	f000 f86d 	bl	800953c <__malloc_lock>
 8009462:	6833      	ldr	r3, [r6, #0]
 8009464:	461c      	mov	r4, r3
 8009466:	bb34      	cbnz	r4, 80094b6 <_malloc_r+0x82>
 8009468:	4629      	mov	r1, r5
 800946a:	4638      	mov	r0, r7
 800946c:	f7ff ffc2 	bl	80093f4 <sbrk_aligned>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	4604      	mov	r4, r0
 8009474:	d14d      	bne.n	8009512 <_malloc_r+0xde>
 8009476:	6834      	ldr	r4, [r6, #0]
 8009478:	4626      	mov	r6, r4
 800947a:	2e00      	cmp	r6, #0
 800947c:	d140      	bne.n	8009500 <_malloc_r+0xcc>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	4631      	mov	r1, r6
 8009482:	4638      	mov	r0, r7
 8009484:	eb04 0803 	add.w	r8, r4, r3
 8009488:	f000 f848 	bl	800951c <_sbrk_r>
 800948c:	4580      	cmp	r8, r0
 800948e:	d13a      	bne.n	8009506 <_malloc_r+0xd2>
 8009490:	6821      	ldr	r1, [r4, #0]
 8009492:	3503      	adds	r5, #3
 8009494:	1a6d      	subs	r5, r5, r1
 8009496:	f025 0503 	bic.w	r5, r5, #3
 800949a:	3508      	adds	r5, #8
 800949c:	2d0c      	cmp	r5, #12
 800949e:	bf38      	it	cc
 80094a0:	250c      	movcc	r5, #12
 80094a2:	4629      	mov	r1, r5
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ffa5 	bl	80093f4 <sbrk_aligned>
 80094aa:	3001      	adds	r0, #1
 80094ac:	d02b      	beq.n	8009506 <_malloc_r+0xd2>
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	442b      	add	r3, r5
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	e00e      	b.n	80094d4 <_malloc_r+0xa0>
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	1b52      	subs	r2, r2, r5
 80094ba:	d41e      	bmi.n	80094fa <_malloc_r+0xc6>
 80094bc:	2a0b      	cmp	r2, #11
 80094be:	d916      	bls.n	80094ee <_malloc_r+0xba>
 80094c0:	1961      	adds	r1, r4, r5
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	6025      	str	r5, [r4, #0]
 80094c6:	bf18      	it	ne
 80094c8:	6059      	strne	r1, [r3, #4]
 80094ca:	6863      	ldr	r3, [r4, #4]
 80094cc:	bf08      	it	eq
 80094ce:	6031      	streq	r1, [r6, #0]
 80094d0:	5162      	str	r2, [r4, r5]
 80094d2:	604b      	str	r3, [r1, #4]
 80094d4:	4638      	mov	r0, r7
 80094d6:	f104 060b 	add.w	r6, r4, #11
 80094da:	f000 f835 	bl	8009548 <__malloc_unlock>
 80094de:	f026 0607 	bic.w	r6, r6, #7
 80094e2:	1d23      	adds	r3, r4, #4
 80094e4:	1af2      	subs	r2, r6, r3
 80094e6:	d0b6      	beq.n	8009456 <_malloc_r+0x22>
 80094e8:	1b9b      	subs	r3, r3, r6
 80094ea:	50a3      	str	r3, [r4, r2]
 80094ec:	e7b3      	b.n	8009456 <_malloc_r+0x22>
 80094ee:	6862      	ldr	r2, [r4, #4]
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	bf0c      	ite	eq
 80094f4:	6032      	streq	r2, [r6, #0]
 80094f6:	605a      	strne	r2, [r3, #4]
 80094f8:	e7ec      	b.n	80094d4 <_malloc_r+0xa0>
 80094fa:	4623      	mov	r3, r4
 80094fc:	6864      	ldr	r4, [r4, #4]
 80094fe:	e7b2      	b.n	8009466 <_malloc_r+0x32>
 8009500:	4634      	mov	r4, r6
 8009502:	6876      	ldr	r6, [r6, #4]
 8009504:	e7b9      	b.n	800947a <_malloc_r+0x46>
 8009506:	230c      	movs	r3, #12
 8009508:	603b      	str	r3, [r7, #0]
 800950a:	4638      	mov	r0, r7
 800950c:	f000 f81c 	bl	8009548 <__malloc_unlock>
 8009510:	e7a1      	b.n	8009456 <_malloc_r+0x22>
 8009512:	6025      	str	r5, [r4, #0]
 8009514:	e7de      	b.n	80094d4 <_malloc_r+0xa0>
 8009516:	bf00      	nop
 8009518:	20000f88 	.word	0x20000f88

0800951c <_sbrk_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d06      	ldr	r5, [pc, #24]	; (8009538 <_sbrk_r+0x1c>)
 8009520:	2300      	movs	r3, #0
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	f7f7 fc5a 	bl	8000de0 <_sbrk>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_sbrk_r+0x1a>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_sbrk_r+0x1a>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	20000f90 	.word	0x20000f90

0800953c <__malloc_lock>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__malloc_lock+0x8>)
 800953e:	f000 b809 	b.w	8009554 <__retarget_lock_acquire_recursive>
 8009542:	bf00      	nop
 8009544:	20000f94 	.word	0x20000f94

08009548 <__malloc_unlock>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__malloc_unlock+0x8>)
 800954a:	f000 b804 	b.w	8009556 <__retarget_lock_release_recursive>
 800954e:	bf00      	nop
 8009550:	20000f94 	.word	0x20000f94

08009554 <__retarget_lock_acquire_recursive>:
 8009554:	4770      	bx	lr

08009556 <__retarget_lock_release_recursive>:
 8009556:	4770      	bx	lr

08009558 <_init>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr

08009564 <_fini>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr
